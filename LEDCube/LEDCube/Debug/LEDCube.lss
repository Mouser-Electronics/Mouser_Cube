
LEDCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003456  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00003456  0000350a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  008000a8  008000a8  00003552  2**0
                  ALLOC
  3 .eeprom       000001ff  00810000  00810000  00003552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003751  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00003781  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f99  00000000  00000000  00003a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b10  00000000  00000000  00008a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014fb  00000000  00000000  00009512  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000116c  00000000  00000000  0000aa10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f9  00000000  00000000  0000bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f91  00000000  00000000  0000c275  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  00013206  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		}
	}
}

unsigned char gol_count_neighbors (int x, int y, int z)
{
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
       4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      10:	0c 94 45 18 	jmp	0x308a	; 0x308a <__vector_4>
      14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
      28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
unsigned char gol_count_neighbors (int x, int y, int z)
{
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
      2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
						ny = (y+iy)%GOL_Y;
      38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
			{
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
      40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      54:	7e 16       	cp	r7, r30
      56:	83 16       	cp	r8, r19
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
						ny = (y+iy)%GOL_Y;
						nz = (z+iz)%GOL_Z;
      58:	8c 16       	cp	r8, r28
      5a:	a5 16       	cp	r10, r21
      5c:	b2 16       	cp	r11, r18
      5e:	b5 16       	cp	r11, r21
      60:	de 16       	cp	r13, r30
      62:	06 17       	cp	r16, r22
      64:	2a 17       	cp	r18, r26
      66:	73 17       	cp	r23, r19
      68:	78 17       	cp	r23, r24
      6a:	85 17       	cp	r24, r21
						nx = x+ix;
						ny = y+iy;
						nz = z+iz;
					}
					
					if ( getvoxel(nx, ny, nz) )
      6c:	8a 17       	cp	r24, r26
      6e:	d9 17       	cp	r29, r25
      70:	e2 17       	cp	r30, r18
      72:	e9 17       	cp	r30, r25
      74:	f1 17       	cp	r31, r17
      76:	f8 17       	cp	r31, r24
      78:	ff 17       	cp	r31, r31
						neigh++;
      7a:	0c 18       	sub	r0, r12
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
      7c:	14 18       	sub	r1, r4
      7e:	17 18       	sub	r1, r7
      80:	24 18       	sub	r2, r4
      82:	2d 18       	sub	r2, r13
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
      84:	35 18       	sub	r3, r5

00000086 <__trampolines_end>:
      86:	07 06       	cpc	r0, r23
      88:	05 04       	cpc	r0, r5
      8a:	03 02       	muls	r16, r19
      8c:	01 00       	.word	0x0001	; ????
      8e:	10 20       	and	r1, r0
      90:	30 40       	sbci	r19, 0x00	; 0
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
						ny = (y+iy)%GOL_Y;
      92:	50 60       	ori	r21, 0x00	; 0
      94:	70 71       	andi	r23, 0x10	; 16
      96:	72 73       	andi	r23, 0x32	; 50
      98:	74 75       	andi	r23, 0x54	; 84
      9a:	76 77       	andi	r23, 0x76	; 118
      9c:	67 57       	subi	r22, 0x77	; 119
      9e:	47 37       	cpi	r20, 0x77	; 119
      a0:	27 17       	cp	r18, r23
      a2:	04 03       	mulsu	r16, r20
      a4:	12 21       	and	r17, r2
      a6:	30 40       	sbci	r19, 0x00	; 0
      a8:	51 62       	ori	r21, 0x21	; 33
      aa:	73 74       	andi	r23, 0x43	; 67
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
      ac:	65 56       	subi	r22, 0x65	; 101
      ae:	47 37       	cpi	r20, 0x77	; 119
      b0:	26 15       	cp	r18, r6

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf e5       	ldi	r28, 0x5F	; 95
      b8:	d8 e0       	ldi	r29, 0x08	; 8
      ba:	de bf       	out	0x3e, r29	; 62
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	10 e0       	ldi	r17, 0x00	; 0
      c0:	a0 e6       	ldi	r26, 0x60	; 96
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	e6 e5       	ldi	r30, 0x56	; 86
      c6:	f4 e3       	ldi	r31, 0x34	; 52
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	a8 3a       	cpi	r26, 0xA8	; 168
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	a8 ea       	ldi	r26, 0xA8	; 168
				}
			}
		}
	}
	return neigh;
}
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	aa 32       	cpi	r26, 0x2A	; 42
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	0e 94 17 19 	call	0x322e	; 0x322e <main>
      e8:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <_exit>

000000ec <__bad_interrupt>:
      ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <inrange>:
      f0:	08 97       	sbiw	r24, 0x08	; 8
      f2:	48 f4       	brcc	.+18     	; 0x106 <inrange+0x16>
      f4:	68 30       	cpi	r22, 0x08	; 8
      f6:	71 05       	cpc	r23, r1
      f8:	40 f4       	brcc	.+16     	; 0x10a <inrange+0x1a>
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	48 30       	cpi	r20, 0x08	; 8
      fe:	51 05       	cpc	r21, r1
		lasty = y1;
	}

	if (z1>z2)
	{
		xz = (float)(z1-z2)/(float)(x2-x1);
     100:	28 f0       	brcs	.+10     	; 0x10c <inrange+0x1c>
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	08 95       	ret
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	08 95       	ret
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret

0000010e <setvoxel>:
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	f8 2e       	mov	r15, r24
     11a:	eb 01       	movw	r28, r22
		lastz = z2;
	} else
	{
		xz = (float)(z2-z1)/(float)(x2-x1);
     11c:	8a 01       	movw	r16, r20
     11e:	0e 94 78 00 	call	0xf0	; 0xf0 <inrange>
     122:	88 23       	and	r24, r24
     124:	a9 f0       	breq	.+42     	; 0x150 <setvoxel+0x42>
     126:	00 0f       	add	r16, r16
     128:	11 1f       	adc	r17, r17
     12a:	00 0f       	add	r16, r16
     12c:	11 1f       	adc	r17, r17
     12e:	00 0f       	add	r16, r16
     130:	11 1f       	adc	r17, r17
     132:	c0 0f       	add	r28, r16
     134:	d1 1f       	adc	r29, r17
     136:	c8 51       	subi	r28, 0x18	; 24
     138:	df 4f       	sbci	r29, 0xFF	; 255
     13a:	48 81       	ld	r20, Y
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	c9 01       	movw	r24, r18
     142:	02 c0       	rjmp	.+4      	; 0x148 <setvoxel+0x3a>
     144:	88 0f       	add	r24, r24
     146:	99 1f       	adc	r25, r25
     148:	fa 94       	dec	r15
     14a:	e2 f7       	brpl	.-8      	; 0x144 <setvoxel+0x36>
     14c:	84 2b       	or	r24, r20
     14e:	88 83       	st	Y, r24
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
     154:	1f 91       	pop	r17
     156:	0f 91       	pop	r16
     158:	ff 90       	pop	r15
     15a:	08 95       	ret

0000015c <clrvoxel>:
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
	{
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	f8 2e       	mov	r15, r24
     168:	eb 01       	movw	r28, r22
     16a:	8a 01       	movw	r16, r20
     16c:	0e 94 78 00 	call	0xf0	; 0xf0 <inrange>
     170:	88 23       	and	r24, r24
     172:	b1 f0       	breq	.+44     	; 0x1a0 <clrvoxel+0x44>


	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
	{
		y = (xy*(x-x1))+y1;
     174:	00 0f       	add	r16, r16
     176:	11 1f       	adc	r17, r17
     178:	00 0f       	add	r16, r16
     17a:	11 1f       	adc	r17, r17
     17c:	00 0f       	add	r16, r16
     17e:	11 1f       	adc	r17, r17
     180:	c0 0f       	add	r28, r16
     182:	d1 1f       	adc	r29, r17
     184:	c8 51       	subi	r28, 0x18	; 24
     186:	df 4f       	sbci	r29, 0xFF	; 255
     188:	48 81       	ld	r20, Y
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	c9 01       	movw	r24, r18
     190:	02 c0       	rjmp	.+4      	; 0x196 <clrvoxel+0x3a>
     192:	88 0f       	add	r24, r24
     194:	99 1f       	adc	r25, r25
     196:	fa 94       	dec	r15
     198:	e2 f7       	brpl	.-8      	; 0x192 <clrvoxel+0x36>
     19a:	80 95       	com	r24
     19c:	84 23       	and	r24, r20
     19e:	88 83       	st	Y, r24
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
		z = (xz*(x-x1))+z1;
     1a8:	ff 90       	pop	r15
     1aa:	08 95       	ret

000001ac <getvoxel>:
     1ac:	ff 92       	push	r15
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	f8 2e       	mov	r15, r24
     1b8:	eb 01       	movw	r28, r22
     1ba:	8a 01       	movw	r16, r20
     1bc:	0e 94 78 00 	call	0xf0	; 0xf0 <inrange>
     1c0:	88 23       	and	r24, r24
     1c2:	99 f0       	breq	.+38     	; 0x1ea <getvoxel+0x3e>
     1c4:	00 0f       	add	r16, r16
     1c6:	11 1f       	adc	r17, r17
     1c8:	00 0f       	add	r16, r16
     1ca:	11 1f       	adc	r17, r17
     1cc:	00 0f       	add	r16, r16
     1ce:	11 1f       	adc	r17, r17
     1d0:	c0 0f       	add	r28, r16
     1d2:	d1 1f       	adc	r29, r17
		setvoxel(x,y,z);
     1d4:	c8 51       	subi	r28, 0x18	; 24
     1d6:	df 4f       	sbci	r29, 0xFF	; 255


	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
	{
		y = (xy*(x-x1))+y1;
     1d8:	28 81       	ld	r18, Y
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	c9 01       	movw	r24, r18
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <getvoxel+0x38>
     1e0:	95 95       	asr	r25
     1e2:	87 95       	ror	r24
     1e4:	fa 94       	dec	r15
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <getvoxel+0x34>
     1e8:	81 70       	andi	r24, 0x01	; 1
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	1f 91       	pop	r17
     1f0:	0f 91       	pop	r16
     1f2:	ff 90       	pop	r15
     1f4:	08 95       	ret

000001f6 <altervoxel>:
     1f6:	21 30       	cpi	r18, 0x01	; 1
     1f8:	31 05       	cpc	r19, r1
     1fa:	19 f4       	brne	.+6      	; 0x202 <altervoxel+0xc>
     1fc:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
     200:	08 95       	ret
     202:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
     206:	08 95       	ret

00000208 <flpvoxel>:
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
     212:	f8 2e       	mov	r15, r24
     214:	eb 01       	movw	r28, r22
     216:	8a 01       	movw	r16, r20
     218:	0e 94 78 00 	call	0xf0	; 0xf0 <inrange>
     21c:	88 23       	and	r24, r24
     21e:	a9 f0       	breq	.+42     	; 0x24a <flpvoxel+0x42>
     220:	00 0f       	add	r16, r16
     222:	11 1f       	adc	r17, r17
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
	}
	
}
     224:	00 0f       	add	r16, r16
     226:	11 1f       	adc	r17, r17
     228:	00 0f       	add	r16, r16
     22a:	11 1f       	adc	r17, r17
     22c:	c0 0f       	add	r28, r16
     22e:	d1 1f       	adc	r29, r17
     230:	c8 51       	subi	r28, 0x18	; 24
     232:	df 4f       	sbci	r29, 0xFF	; 255
     234:	48 81       	ld	r20, Y
     236:	21 e0       	ldi	r18, 0x01	; 1
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	c9 01       	movw	r24, r18
     23c:	02 c0       	rjmp	.+4      	; 0x242 <flpvoxel+0x3a>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	fa 94       	dec	r15
     244:	e2 f7       	brpl	.-8      	; 0x23e <flpvoxel+0x36>
     246:	84 27       	eor	r24, r20
     248:	88 83       	st	Y, r24
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	08 95       	ret

00000256 <setplane_z>:
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     256:	88 30       	cpi	r24, 0x08	; 8
     258:	91 05       	cpc	r25, r1
     25a:	a0 f4       	brcc	.+40     	; 0x284 <setplane_z+0x2e>
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0xff;
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	4f ef       	ldi	r20, 0xFF	; 255
     26e:	fc 01       	movw	r30, r24
     270:	e2 0f       	add	r30, r18
     272:	f3 1f       	adc	r31, r19
     274:	e8 51       	subi	r30, 0x18	; 24
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	40 83       	st	Z, r20
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
     27e:	28 30       	cpi	r18, 0x08	; 8
     280:	31 05       	cpc	r19, r1
     282:	a9 f7       	brne	.-22     	; 0x26e <setplane_z+0x18>
     284:	08 95       	ret

00000286 <setplane_x>:

void setplane_x (int x)
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
     286:	88 30       	cpi	r24, 0x08	; 8
     288:	91 05       	cpc	r25, r1
     28a:	28 f5       	brcc	.+74     	; 0x2d6 <setplane_x+0x50>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     28c:	71 e0       	ldi	r23, 0x01	; 1
     28e:	01 c0       	rjmp	.+2      	; 0x292 <setplane_x+0xc>
     290:	77 0f       	add	r23, r23
     292:	8a 95       	dec	r24
     294:	ea f7       	brpl	.-6      	; 0x290 <setplane_x+0xa>
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	50 e0       	ldi	r21, 0x00	; 0
			cube[z][i] = 0x00;
	}
}

void setplane_x (int x)
{
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	a0 e0       	ldi	r26, 0x00	; 0
     29e:	11 c0       	rjmp	.+34     	; 0x2c2 <setplane_x+0x3c>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     2a0:	f9 01       	movw	r30, r18
     2a2:	e8 0f       	add	r30, r24
     2a4:	f9 1f       	adc	r31, r25
     2a6:	e8 51       	subi	r30, 0x18	; 24
     2a8:	ff 4f       	sbci	r31, 0xFF	; 255
     2aa:	60 81       	ld	r22, Z
     2ac:	67 2b       	or	r22, r23
     2ae:	60 83       	st	Z, r22
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	88 30       	cpi	r24, 0x08	; 8
     2b4:	91 05       	cpc	r25, r1
     2b6:	a1 f7       	brne	.-24     	; 0x2a0 <setplane_x+0x1a>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     2b8:	4f 5f       	subi	r20, 0xFF	; 255
     2ba:	5f 4f       	sbci	r21, 0xFF	; 255
     2bc:	48 30       	cpi	r20, 0x08	; 8
     2be:	51 05       	cpc	r21, r1
     2c0:	51 f0       	breq	.+20     	; 0x2d6 <setplane_x+0x50>
			cube[z][i] = 0x00;
	}
}

void setplane_x (int x)
{
     2c2:	8b 2f       	mov	r24, r27
     2c4:	9a 2f       	mov	r25, r26
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     2c6:	9a 01       	movw	r18, r20
     2c8:	22 0f       	add	r18, r18
     2ca:	33 1f       	adc	r19, r19
     2cc:	22 0f       	add	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	e5 cf       	rjmp	.-54     	; 0x2a0 <setplane_x+0x1a>
     2d6:	08 95       	ret

000002d8 <setplane_y>:
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	91 05       	cpc	r25, r1
     2dc:	a0 f4       	brcc	.+40     	; 0x306 <setplane_y+0x2e>
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
     2e2:	4f ef       	ldi	r20, 0xFF	; 255
     2e4:	f9 01       	movw	r30, r18
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	e8 0f       	add	r30, r24
     2f4:	f9 1f       	adc	r31, r25
     2f6:	e8 51       	subi	r30, 0x18	; 24
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	40 83       	st	Z, r20
void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     2fc:	2f 5f       	subi	r18, 0xFF	; 255
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	28 30       	cpi	r18, 0x08	; 8
     302:	31 05       	cpc	r19, r1
     304:	79 f7       	brne	.-34     	; 0x2e4 <setplane_y+0xc>
     306:	08 95       	ret

00000308 <setplane>:
	}
}

void setplane (char axis, unsigned char i)
{
    switch (axis)
     308:	89 37       	cpi	r24, 0x79	; 121
     30a:	49 f0       	breq	.+18     	; 0x31e <setplane+0x16>
     30c:	8a 37       	cpi	r24, 0x7A	; 122
     30e:	61 f0       	breq	.+24     	; 0x328 <setplane+0x20>
     310:	88 37       	cpi	r24, 0x78	; 120
     312:	71 f4       	brne	.+28     	; 0x330 <setplane+0x28>
    {
        case AXIS_X:
            setplane_x(i);
     314:	86 2f       	mov	r24, r22
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 43 01 	call	0x286	; 0x286 <setplane_x>
            break;
     31c:	08 95       	ret
        
       case AXIS_Y:
            setplane_y(i);
     31e:	86 2f       	mov	r24, r22
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <setplane_y>
            break;
     326:	08 95       	ret

       case AXIS_Z:
            setplane_z(i);
     328:	86 2f       	mov	r24, r22
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 2b 01 	call	0x256	; 0x256 <setplane_z>
     330:	08 95       	ret

00000332 <fill>:
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0

// Fill a value into all 64 byts of the cube buffer
// Mostly used for clearing. fill(0x00)
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	10 c0       	rjmp	.+32     	; 0x35c <fill+0x2a>
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
     33c:	fa 01       	movw	r30, r20
     33e:	e2 0f       	add	r30, r18
     340:	f3 1f       	adc	r31, r19
     342:	e8 51       	subi	r30, 0x18	; 24
     344:	ff 4f       	sbci	r31, 0xFF	; 255
     346:	80 83       	st	Z, r24
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
     348:	2f 5f       	subi	r18, 0xFF	; 255
     34a:	3f 4f       	sbci	r19, 0xFF	; 255
     34c:	28 30       	cpi	r18, 0x08	; 8
     34e:	31 05       	cpc	r19, r1
     350:	a9 f7       	brne	.-22     	; 0x33c <fill+0xa>
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     352:	6f 5f       	subi	r22, 0xFF	; 255
     354:	7f 4f       	sbci	r23, 0xFF	; 255
     356:	68 30       	cpi	r22, 0x08	; 8
     358:	71 05       	cpc	r23, r1
     35a:	51 f0       	breq	.+20     	; 0x370 <fill+0x3e>

// Fill a value into all 64 byts of the cube buffer
// Mostly used for clearing. fill(0x00)
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
     35c:	2a 2f       	mov	r18, r26
     35e:	39 2f       	mov	r19, r25
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
     360:	ab 01       	movw	r20, r22
     362:	44 0f       	add	r20, r20
     364:	55 1f       	adc	r21, r21
     366:	44 0f       	add	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	44 0f       	add	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	e6 cf       	rjmp	.-52     	; 0x33c <fill+0xa>
     370:	08 95       	ret

00000372 <byteline>:

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     372:	6f 5f       	subi	r22, 0xFF	; 255
     374:	7f 4f       	sbci	r23, 0xFF	; 255
     376:	2f ef       	ldi	r18, 0xFF	; 255
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	a9 01       	movw	r20, r18
     37c:	02 c0       	rjmp	.+4      	; 0x382 <byteline+0x10>
     37e:	44 0f       	add	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	6a 95       	dec	r22
     384:	e2 f7       	brpl	.-8      	; 0x37e <byteline+0xc>
     386:	ba 01       	movw	r22, r20
     388:	60 95       	com	r22
     38a:	a9 01       	movw	r20, r18
     38c:	02 c0       	rjmp	.+4      	; 0x392 <byteline+0x20>
     38e:	44 0f       	add	r20, r20
     390:	55 1f       	adc	r21, r21
     392:	8a 95       	dec	r24
     394:	e2 f7       	brpl	.-8      	; 0x38e <byteline+0x1c>
     396:	ca 01       	movw	r24, r20
}
     398:	86 23       	and	r24, r22
     39a:	08 95       	ret

0000039c <box_wireframe>:
}

// Draw a wireframe box. This only draws the corners and edges,
// no walls.
void box_wireframe(int x1, int y1, int z1, int x2, int y2, int z2)
{
     39c:	6f 92       	push	r6
     39e:	7f 92       	push	r7
     3a0:	8f 92       	push	r8
     3a2:	9f 92       	push	r9
     3a4:	af 92       	push	r10
     3a6:	bf 92       	push	r11
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	5c 01       	movw	r10, r24
     3ba:	4b 01       	movw	r8, r22
     3bc:	ea 01       	movw	r28, r20
     3be:	69 01       	movw	r12, r18
     3c0:	37 01       	movw	r6, r14
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
     3c2:	28 17       	cp	r18, r24
     3c4:	39 07       	cpc	r19, r25
     3c6:	2c f4       	brge	.+10     	; 0x3d2 <box_wireframe+0x36>
     3c8:	98 2f       	mov	r25, r24
     3ca:	8b 2d       	mov	r24, r11
	{
		int tmp;
		tmp = ix1;
		ix1= ix2;
     3cc:	59 01       	movw	r10, r18
		ix2 = tmp;
     3ce:	c9 2e       	mov	r12, r25
     3d0:	d8 2e       	mov	r13, r24
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
     3d2:	08 15       	cp	r16, r8
     3d4:	19 05       	cpc	r17, r9
     3d6:	2c f4       	brge	.+10     	; 0x3e2 <box_wireframe+0x46>
     3d8:	98 2d       	mov	r25, r8
     3da:	89 2d       	mov	r24, r9
	{
		int tmp;
		tmp = ix1;
		ix1= ix2;
     3dc:	48 01       	movw	r8, r16
		ix2 = tmp;
     3de:	09 2f       	mov	r16, r25
     3e0:	18 2f       	mov	r17, r24
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
     3e2:	6c 16       	cp	r6, r28
     3e4:	7d 06       	cpc	r7, r29
     3e6:	2c f4       	brge	.+10     	; 0x3f2 <box_wireframe+0x56>
     3e8:	9c 2f       	mov	r25, r28
     3ea:	8d 2f       	mov	r24, r29
	{
		int tmp;
		tmp = ix1;
		ix1= ix2;
     3ec:	e3 01       	movw	r28, r6
		ix2 = tmp;
     3ee:	69 2e       	mov	r6, r25
     3f0:	78 2e       	mov	r7, r24
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	// Lines along X axis
	cube[z1][y1] = byteline(x1,x2);
     3f2:	b6 01       	movw	r22, r12
     3f4:	c5 01       	movw	r24, r10
     3f6:	0e 94 b9 01 	call	0x372	; 0x372 <byteline>
     3fa:	9e 01       	movw	r18, r28
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	f9 01       	movw	r30, r18
     40a:	e8 0d       	add	r30, r8
     40c:	f9 1d       	adc	r31, r9
     40e:	e8 51       	subi	r30, 0x18	; 24
     410:	ff 4f       	sbci	r31, 0xFF	; 255
     412:	80 83       	st	Z, r24
	cube[z1][y2] = byteline(x1,x2);
     414:	20 0f       	add	r18, r16
     416:	31 1f       	adc	r19, r17
     418:	f9 01       	movw	r30, r18
     41a:	e8 51       	subi	r30, 0x18	; 24
     41c:	ff 4f       	sbci	r31, 0xFF	; 255
     41e:	80 83       	st	Z, r24
	cube[z2][y1] = byteline(x1,x2);
     420:	93 01       	movw	r18, r6
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	22 0f       	add	r18, r18
     42c:	33 1f       	adc	r19, r19
     42e:	f9 01       	movw	r30, r18
     430:	e8 0d       	add	r30, r8
     432:	f9 1d       	adc	r31, r9
     434:	e8 51       	subi	r30, 0x18	; 24
     436:	ff 4f       	sbci	r31, 0xFF	; 255
     438:	80 83       	st	Z, r24
	cube[z2][y2] = byteline(x1,x2);
     43a:	20 0f       	add	r18, r16
     43c:	31 1f       	adc	r19, r17
     43e:	f9 01       	movw	r30, r18
     440:	e8 51       	subi	r30, 0x18	; 24
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	80 83       	st	Z, r24

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
     446:	08 15       	cp	r16, r8
     448:	19 05       	cpc	r17, r9
     44a:	dc f0       	brlt	.+54     	; 0x482 <box_wireframe+0xe6>
     44c:	74 01       	movw	r14, r8
	{
		setvoxel(x1,iy,z1);
     44e:	ae 01       	movw	r20, r28
     450:	b7 01       	movw	r22, r14
     452:	c5 01       	movw	r24, r10
     454:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		setvoxel(x1,iy,z2);
     458:	a3 01       	movw	r20, r6
     45a:	b7 01       	movw	r22, r14
     45c:	c5 01       	movw	r24, r10
     45e:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		setvoxel(x2,iy,z1);
     462:	ae 01       	movw	r20, r28
     464:	b7 01       	movw	r22, r14
     466:	c6 01       	movw	r24, r12
     468:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		setvoxel(x2,iy,z2);
     46c:	a3 01       	movw	r20, r6
     46e:	b7 01       	movw	r22, r14
     470:	c6 01       	movw	r24, r12
     472:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
	cube[z1][y2] = byteline(x1,x2);
	cube[z2][y1] = byteline(x1,x2);
	cube[z2][y2] = byteline(x1,x2);

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
     476:	8f ef       	ldi	r24, 0xFF	; 255
     478:	e8 1a       	sub	r14, r24
     47a:	f8 0a       	sbc	r15, r24
     47c:	0e 15       	cp	r16, r14
     47e:	1f 05       	cpc	r17, r15
     480:	34 f7       	brge	.-52     	; 0x44e <box_wireframe+0xb2>
		setvoxel(x2,iy,z1);
		setvoxel(x2,iy,z2);
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
     482:	6c 16       	cp	r6, r28
     484:	7d 06       	cpc	r7, r29
     486:	c4 f0       	brlt	.+48     	; 0x4b8 <box_wireframe+0x11c>
	{
		setvoxel(x1,y1,iz);
     488:	ae 01       	movw	r20, r28
     48a:	b4 01       	movw	r22, r8
     48c:	c5 01       	movw	r24, r10
     48e:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		setvoxel(x1,y2,iz);
     492:	ae 01       	movw	r20, r28
     494:	b8 01       	movw	r22, r16
     496:	c5 01       	movw	r24, r10
     498:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		setvoxel(x2,y1,iz);
     49c:	ae 01       	movw	r20, r28
     49e:	b4 01       	movw	r22, r8
     4a0:	c6 01       	movw	r24, r12
     4a2:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		setvoxel(x2,y2,iz);
     4a6:	ae 01       	movw	r20, r28
     4a8:	b8 01       	movw	r22, r16
     4aa:	c6 01       	movw	r24, r12
     4ac:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		setvoxel(x2,iy,z1);
		setvoxel(x2,iy,z2);
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
     4b0:	21 96       	adiw	r28, 0x01	; 1
     4b2:	6c 16       	cp	r6, r28
     4b4:	7d 06       	cpc	r7, r29
     4b6:	44 f7       	brge	.-48     	; 0x488 <box_wireframe+0xec>
		setvoxel(x1,y2,iz);
		setvoxel(x2,y1,iz);
		setvoxel(x2,y2,iz);
	}

}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	9f 90       	pop	r9
     4ce:	8f 90       	pop	r8
     4d0:	7f 90       	pop	r7
     4d2:	6f 90       	pop	r6
     4d4:	08 95       	ret

000004d6 <flipbyte>:

	flop = (flop & 0b11111110) | (0b00000001 & (byte >> 7));
	flop = (flop & 0b11111101) | (0b00000010 & (byte >> 5));
	flop = (flop & 0b11111011) | (0b00000100 & (byte >> 3));
	flop = (flop & 0b11110111) | (0b00001000 & (byte >> 1));
	flop = (flop & 0b11101111) | (0b00010000 & (byte << 1));
     4d6:	28 2f       	mov	r18, r24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
char flipbyte (char byte)
{
	char flop = 0x00;

	flop = (flop & 0b11111110) | (0b00000001 & (byte >> 7));
	flop = (flop & 0b11111101) | (0b00000010 & (byte >> 5));
     4da:	e8 2f       	mov	r30, r24
     4dc:	e2 95       	swap	r30
     4de:	e6 95       	lsr	r30
     4e0:	e7 70       	andi	r30, 0x07	; 7
     4e2:	e2 70       	andi	r30, 0x02	; 2
     4e4:	98 2f       	mov	r25, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	99 27       	eor	r25, r25
     4ea:	99 1f       	adc	r25, r25
	flop = (flop & 0b11111011) | (0b00000100 & (byte >> 3));
     4ec:	e9 2b       	or	r30, r25
     4ee:	98 2f       	mov	r25, r24
     4f0:	96 95       	lsr	r25
     4f2:	96 95       	lsr	r25
     4f4:	96 95       	lsr	r25
     4f6:	94 70       	andi	r25, 0x04	; 4
	flop = (flop & 0b11110111) | (0b00001000 & (byte >> 1));
     4f8:	e9 2b       	or	r30, r25
     4fa:	86 95       	lsr	r24
     4fc:	88 70       	andi	r24, 0x08	; 8
	flop = (flop & 0b11101111) | (0b00010000 & (byte << 1));
     4fe:	8e 2b       	or	r24, r30
     500:	f9 01       	movw	r30, r18
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	e0 71       	andi	r30, 0x10	; 16
	flop = (flop & 0b11011111) | (0b00100000 & (byte << 3));
     508:	8e 2b       	or	r24, r30
     50a:	b9 01       	movw	r22, r18
     50c:	66 0f       	add	r22, r22
     50e:	77 1f       	adc	r23, r23
     510:	66 0f       	add	r22, r22
     512:	77 1f       	adc	r23, r23
     514:	66 0f       	add	r22, r22
     516:	77 1f       	adc	r23, r23
     518:	60 72       	andi	r22, 0x20	; 32
	flop = (flop & 0b10111111) | (0b01000000 & (byte << 5));
     51a:	86 2b       	or	r24, r22
     51c:	a9 01       	movw	r20, r18
     51e:	44 0f       	add	r20, r20
     520:	55 1f       	adc	r21, r21
     522:	42 95       	swap	r20
     524:	52 95       	swap	r21
     526:	50 7f       	andi	r21, 0xF0	; 240
     528:	54 27       	eor	r21, r20
     52a:	40 7f       	andi	r20, 0xF0	; 240
     52c:	54 27       	eor	r21, r20
     52e:	40 74       	andi	r20, 0x40	; 64
	flop = (flop & 0b01111111) | (0b10000000 & (byte << 7));
     530:	84 2b       	or	r24, r20
     532:	36 95       	lsr	r19
     534:	32 2f       	mov	r19, r18
     536:	22 27       	eor	r18, r18
     538:	37 95       	ror	r19
     53a:	27 95       	ror	r18
	return flop;
}
     53c:	82 2b       	or	r24, r18
     53e:	08 95       	ret

00000540 <delay_ms>:
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	61 f4       	brne	.+24     	; 0x55c <delay_ms+0x1c>
     544:	08 95       	ret
	...
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     552:	21 50       	subi	r18, 0x01	; 1
// to calibrate it.
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     554:	c1 f7       	brne	.-16     	; 0x546 <delay_ms+0x6>
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	00 97       	sbiw	r24, 0x00	; 0
     55a:	11 f0       	breq	.+4      	; 0x560 <delay_ms+0x20>
// This is not calibrated to milliseconds,
// but we had allready made to many effects using this
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
     55c:	2a e5       	ldi	r18, 0x5A	; 90
     55e:	f3 cf       	rjmp	.-26     	; 0x546 <delay_ms+0x6>
     560:	08 95       	ret

00000562 <tmp2cube>:
}

// Copies the contents of fb (temp cube buffer) into the rendering buffer
void tmp2cube (void)
{	
    memcpy(cube, fb, 64); // copy the current cube into a buffer.
     562:	80 e4       	ldi	r24, 0x40	; 64
     564:	e8 ea       	ldi	r30, 0xA8	; 168
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	a8 ee       	ldi	r26, 0xE8	; 232
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	8a 95       	dec	r24
     572:	e1 f7       	brne	.-8      	; 0x56c <tmp2cube+0xa>
     574:	08 95       	ret

00000576 <shift>:
// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
{
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	8f 92       	push	r8
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	18 2f       	mov	r17, r24
     59c:	5b 01       	movw	r10, r22
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     59e:	c1 2c       	mov	r12, r1
     5a0:	d1 2c       	mov	r13, r1
     5a2:	0f 2e       	mov	r0, r31
     5a4:	f7 e0       	ldi	r31, 0x07	; 7
     5a6:	8f 2e       	mov	r8, r31
     5a8:	91 2c       	mov	r9, r1
     5aa:	f0 2d       	mov	r31, r0
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	41 2c       	mov	r4, r1
     5b0:	50 2e       	mov	r5, r16
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
     5b2:	4f ef       	ldi	r20, 0xFF	; 255
     5b4:	a4 16       	cp	r10, r20
     5b6:	b4 06       	cpc	r11, r20
     5b8:	21 f0       	breq	.+8      	; 0x5c2 <shift+0x4c>
     5ba:	74 01       	movw	r14, r8
     5bc:	ec 18       	sub	r14, r12
     5be:	fd 08       	sbc	r15, r13
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <shift+0x4e>
     5c2:	76 01       	movw	r14, r12
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
     5c4:	97 01       	movw	r18, r14
     5c6:	2f 5f       	subi	r18, 0xFF	; 255
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
				} else
				{
					iii = ii-1;
     5ca:	c7 01       	movw	r24, r14
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	4f ef       	ldi	r20, 0xFF	; 255
     5d0:	a4 16       	cp	r10, r20
     5d2:	b4 06       	cpc	r11, r20
     5d4:	19 f4       	brne	.+6      	; 0x5dc <shift+0x66>
     5d6:	62 2e       	mov	r6, r18
     5d8:	73 2e       	mov	r7, r19
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <shift+0x6a>
     5dc:	68 2e       	mov	r6, r24
     5de:	79 2e       	mov	r7, r25
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     5e0:	21 2c       	mov	r2, r1
     5e2:	30 2e       	mov	r3, r16
     5e4:	3a c0       	rjmp	.+116    	; 0x65a <shift+0xe4>
				} else
				{
					iii = ii-1;
				}
				
				if (axis == AXIS_Z)
     5e6:	1a 37       	cpi	r17, 0x7A	; 122
     5e8:	71 f4       	brne	.+28     	; 0x606 <shift+0x90>
				{
					state = getvoxel(x,y,iii);
     5ea:	46 2d       	mov	r20, r6
     5ec:	57 2d       	mov	r21, r7
     5ee:	be 01       	movw	r22, r28
     5f0:	c1 01       	movw	r24, r2
     5f2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <getvoxel>
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
					altervoxel(x,y,ii,state);
     5fa:	a7 01       	movw	r20, r14
     5fc:	be 01       	movw	r22, r28
     5fe:	c1 01       	movw	r24, r2
     600:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <altervoxel>
     604:	1f c0       	rjmp	.+62     	; 0x644 <shift+0xce>
				}
				
				if (axis == AXIS_Y)
     606:	19 37       	cpi	r17, 0x79	; 121
     608:	71 f4       	brne	.+28     	; 0x626 <shift+0xb0>
				{
					state = getvoxel(x,iii,y);
     60a:	ae 01       	movw	r20, r28
     60c:	66 2d       	mov	r22, r6
     60e:	77 2d       	mov	r23, r7
     610:	c1 01       	movw	r24, r2
     612:	0e 94 d6 00 	call	0x1ac	; 0x1ac <getvoxel>
     616:	28 2f       	mov	r18, r24
     618:	30 e0       	ldi	r19, 0x00	; 0
					altervoxel(x,ii,y,state);
     61a:	ae 01       	movw	r20, r28
     61c:	b7 01       	movw	r22, r14
     61e:	c1 01       	movw	r24, r2
     620:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <altervoxel>
     624:	0f c0       	rjmp	.+30     	; 0x644 <shift+0xce>
				}
				
				if (axis == AXIS_X)
     626:	18 37       	cpi	r17, 0x78	; 120
     628:	69 f4       	brne	.+26     	; 0x644 <shift+0xce>
				{
					state = getvoxel(iii,y,x);
     62a:	a1 01       	movw	r20, r2
     62c:	be 01       	movw	r22, r28
     62e:	86 2d       	mov	r24, r6
     630:	97 2d       	mov	r25, r7
     632:	0e 94 d6 00 	call	0x1ac	; 0x1ac <getvoxel>
     636:	28 2f       	mov	r18, r24
     638:	30 e0       	ldi	r19, 0x00	; 0
					altervoxel(ii,y,x,state);
     63a:	a1 01       	movw	r20, r2
     63c:	be 01       	movw	r22, r28
     63e:	c7 01       	movw	r24, r14
     640:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <altervoxel>
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
     644:	21 96       	adiw	r28, 0x01	; 1
     646:	c8 30       	cpi	r28, 0x08	; 8
     648:	d1 05       	cpc	r29, r1
     64a:	69 f6       	brne	.-102    	; 0x5e6 <shift+0x70>
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	28 1a       	sub	r2, r24
     650:	38 0a       	sbc	r3, r24
     652:	48 e0       	ldi	r20, 0x08	; 8
     654:	24 16       	cp	r2, r20
     656:	31 04       	cpc	r3, r1
     658:	19 f0       	breq	.+6      	; 0x660 <shift+0xea>
     65a:	c4 2d       	mov	r28, r4
     65c:	d5 2d       	mov	r29, r5
     65e:	c3 cf       	rjmp	.-122    	; 0x5e6 <shift+0x70>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	c8 1a       	sub	r12, r24
     664:	d8 0a       	sbc	r13, r24
     666:	48 e0       	ldi	r20, 0x08	; 8
     668:	c4 16       	cp	r12, r20
     66a:	d1 04       	cpc	r13, r1
     66c:	09 f0       	breq	.+2      	; 0x670 <shift+0xfa>
     66e:	a1 cf       	rjmp	.-190    	; 0x5b2 <shift+0x3c>
				}
			}
		}
	}
	
	if (direction == -1)
     670:	ab 20       	and	r10, r11
     672:	a0 94       	com	r10
     674:	31 f4       	brne	.+12     	; 0x682 <shift+0x10c>
	{
		i = 7;
     676:	0f 2e       	mov	r0, r31
     678:	f7 e0       	ldi	r31, 0x07	; 7
     67a:	ef 2e       	mov	r14, r31
     67c:	f1 2c       	mov	r15, r1
     67e:	f0 2d       	mov	r31, r0
     680:	02 c0       	rjmp	.+4      	; 0x686 <shift+0x110>
	} else
	{
		i = 0;
     682:	e1 2c       	mov	r14, r1
     684:	f1 2c       	mov	r15, r1
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
     686:	a1 2c       	mov	r10, r1
     688:	b1 2c       	mov	r11, r1
	if (direction == -1)
	{
		i = 7;
	} else
	{
		i = 0;
     68a:	c1 2c       	mov	r12, r1
     68c:	d1 2c       	mov	r13, r1
     68e:	22 c0       	rjmp	.+68     	; 0x6d4 <shift+0x15e>
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
     690:	1a 37       	cpi	r17, 0x7A	; 122
     692:	31 f4       	brne	.+12     	; 0x6a0 <shift+0x12a>
				clrvoxel(x,y,i);
     694:	a7 01       	movw	r20, r14
     696:	be 01       	movw	r22, r28
     698:	c5 01       	movw	r24, r10
     69a:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
     69e:	0f c0       	rjmp	.+30     	; 0x6be <shift+0x148>
				
			if (axis == AXIS_Y)
     6a0:	19 37       	cpi	r17, 0x79	; 121
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <shift+0x13a>
				clrvoxel(x,i,y);
     6a4:	ae 01       	movw	r20, r28
     6a6:	b7 01       	movw	r22, r14
     6a8:	c5 01       	movw	r24, r10
     6aa:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
     6ae:	07 c0       	rjmp	.+14     	; 0x6be <shift+0x148>
			
			if (axis == AXIS_X)
     6b0:	18 37       	cpi	r17, 0x78	; 120
     6b2:	29 f4       	brne	.+10     	; 0x6be <shift+0x148>
				clrvoxel(i,y,x);
     6b4:	a5 01       	movw	r20, r10
     6b6:	be 01       	movw	r22, r28
     6b8:	c7 01       	movw	r24, r14
     6ba:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
     6be:	21 96       	adiw	r28, 0x01	; 1
     6c0:	c8 30       	cpi	r28, 0x08	; 8
     6c2:	d1 05       	cpc	r29, r1
     6c4:	29 f7       	brne	.-54     	; 0x690 <shift+0x11a>
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
     6c6:	4f ef       	ldi	r20, 0xFF	; 255
     6c8:	a4 1a       	sub	r10, r20
     6ca:	b4 0a       	sbc	r11, r20
     6cc:	88 e0       	ldi	r24, 0x08	; 8
     6ce:	a8 16       	cp	r10, r24
     6d0:	b1 04       	cpc	r11, r1
     6d2:	19 f0       	breq	.+6      	; 0x6da <shift+0x164>
	if (direction == -1)
	{
		i = 7;
	} else
	{
		i = 0;
     6d4:	cc 2d       	mov	r28, r12
     6d6:	dd 2d       	mov	r29, r13
     6d8:	db cf       	rjmp	.-74     	; 0x690 <shift+0x11a>
			
			if (axis == AXIS_X)
				clrvoxel(i,y,x);
		}
	}
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	3f 90       	pop	r3
     6fc:	2f 90       	pop	r2
     6fe:	08 95       	ret

00000700 <mirror_y>:

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     700:	4f 92       	push	r4
     702:	5f 92       	push	r5
     704:	6f 92       	push	r6
     706:	7f 92       	push	r7
     708:	8f 92       	push	r8
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	c0 54       	subi	r28, 0x40	; 64
     726:	d1 09       	sbc	r29, r1
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
     732:	80 e4       	ldi	r24, 0x40	; 64
     734:	e8 ee       	ldi	r30, 0xE8	; 232
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	de 01       	movw	r26, r28
     73a:	11 96       	adiw	r26, 0x01	; 1
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <mirror_y+0x3c>

    fill(0x00);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 99 01 	call	0x332	; 0x332 <fill>
     74a:	ce 01       	movw	r24, r28
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	4c 01       	movw	r8, r24
     750:	a1 2c       	mov	r10, r1
     752:	b1 2c       	mov	r11, r1
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     754:	0f 2e       	mov	r0, r31
     756:	f7 e0       	ldi	r31, 0x07	; 7
     758:	4f 2e       	mov	r4, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	51 2c       	mov	r5, r1
     75e:	61 2c       	mov	r6, r1
     760:	71 2c       	mov	r7, r1
     762:	2a c0       	rjmp	.+84     	; 0x7b8 <mirror_y+0xb8>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
            {
                if (buffer[z][y] & (0x01 << x))
     764:	f7 01       	movw	r30, r14
     766:	80 81       	ld	r24, Z
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	00 2e       	mov	r0, r16
     76c:	02 c0       	rjmp	.+4      	; 0x772 <mirror_y+0x72>
     76e:	95 95       	asr	r25
     770:	87 95       	ror	r24
     772:	0a 94       	dec	r0
     774:	e2 f7       	brpl	.-8      	; 0x76e <mirror_y+0x6e>
     776:	80 ff       	sbrs	r24, 0
     778:	06 c0       	rjmp	.+12     	; 0x786 <mirror_y+0x86>
                    setvoxel(x,CUBE_SIZE-1-y,z);
     77a:	a5 01       	movw	r20, r10
     77c:	b6 01       	movw	r22, r12
     77e:	80 2f       	mov	r24, r16
     780:	91 2f       	mov	r25, r17
     782:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
     786:	0f 5f       	subi	r16, 0xFF	; 255
     788:	1f 4f       	sbci	r17, 0xFF	; 255
    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
     78a:	08 30       	cpi	r16, 0x08	; 8
     78c:	11 05       	cpc	r17, r1
     78e:	51 f7       	brne	.-44     	; 0x764 <mirror_y+0x64>
     790:	ff ef       	ldi	r31, 0xFF	; 255
     792:	ef 1a       	sub	r14, r31
     794:	ff 0a       	sbc	r15, r31
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	c8 1a       	sub	r12, r24
     79a:	d1 08       	sbc	r13, r1
     79c:	18 f0       	brcs	.+6      	; 0x7a4 <mirror_y+0xa4>
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     79e:	06 2d       	mov	r16, r6
     7a0:	17 2d       	mov	r17, r7
     7a2:	e0 cf       	rjmp	.-64     	; 0x764 <mirror_y+0x64>
     7a4:	ef ef       	ldi	r30, 0xFF	; 255
     7a6:	ae 1a       	sub	r10, r30
     7a8:	be 0a       	sbc	r11, r30
     7aa:	f8 e0       	ldi	r31, 0x08	; 8
     7ac:	8f 0e       	add	r8, r31
     7ae:	91 1c       	adc	r9, r1
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
     7b0:	88 e0       	ldi	r24, 0x08	; 8
     7b2:	a8 16       	cp	r10, r24
     7b4:	b1 04       	cpc	r11, r1
     7b6:	21 f0       	breq	.+8      	; 0x7c0 <mirror_y+0xc0>
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     7b8:	74 01       	movw	r14, r8
     7ba:	c4 2c       	mov	r12, r4
     7bc:	d5 2c       	mov	r13, r5
     7be:	ef cf       	rjmp	.-34     	; 0x79e <mirror_y+0x9e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
            }
        }
    }

}
     7c0:	c0 5c       	subi	r28, 0xC0	; 192
     7c2:	df 4f       	sbci	r29, 0xFF	; 255
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	bf 90       	pop	r11
     7e0:	af 90       	pop	r10
     7e2:	9f 90       	pop	r9
     7e4:	8f 90       	pop	r8
     7e6:	7f 90       	pop	r7
     7e8:	6f 90       	pop	r6
     7ea:	5f 90       	pop	r5
     7ec:	4f 90       	pop	r4
     7ee:	08 95       	ret

000007f0 <mirror_x>:

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
     7f0:	6f 92       	push	r6
     7f2:	7f 92       	push	r7
     7f4:	8f 92       	push	r8
     7f6:	9f 92       	push	r9
     7f8:	af 92       	push	r10
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	c0 54       	subi	r28, 0x40	; 64
     812:	d1 09       	sbc	r29, r1
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
     81e:	80 e4       	ldi	r24, 0x40	; 64
     820:	e8 ee       	ldi	r30, 0xE8	; 232
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	de 01       	movw	r26, r28
     826:	11 96       	adiw	r26, 0x01	; 1
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	8a 95       	dec	r24
     82e:	e1 f7       	brne	.-8      	; 0x828 <mirror_x+0x38>

    fill(0x00);
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 99 01 	call	0x332	; 0x332 <fill>
     836:	ce 01       	movw	r24, r28
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	4c 01       	movw	r8, r24
     83c:	a1 2c       	mov	r10, r1
     83e:	b1 2c       	mov	r11, r1

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
     840:	61 2c       	mov	r6, r1
     842:	71 2c       	mov	r7, r1
     844:	1a c0       	rjmp	.+52     	; 0x87a <__stack+0x1b>
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
     846:	f7 01       	movw	r30, r14
     848:	81 91       	ld	r24, Z+
     84a:	7f 01       	movw	r14, r30
     84c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <flipbyte>
     850:	f6 01       	movw	r30, r12
     852:	e0 0f       	add	r30, r16
     854:	f1 1f       	adc	r31, r17
     856:	e8 51       	subi	r30, 0x18	; 24
     858:	ff 4f       	sbci	r31, 0xFF	; 255
     85a:	80 83       	st	Z, r24
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
     860:	08 30       	cpi	r16, 0x08	; 8
     862:	11 05       	cpc	r17, r1
     864:	81 f7       	brne	.-32     	; 0x846 <mirror_x+0x56>
     866:	ff ef       	ldi	r31, 0xFF	; 255
     868:	af 1a       	sub	r10, r31
     86a:	bf 0a       	sbc	r11, r31
     86c:	88 e0       	ldi	r24, 0x08	; 8
     86e:	88 0e       	add	r8, r24
     870:	91 1c       	adc	r9, r1

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
     872:	98 e0       	ldi	r25, 0x08	; 8
     874:	a9 16       	cp	r10, r25
     876:	b1 04       	cpc	r11, r1
     878:	59 f0       	breq	.+22     	; 0x890 <__stack+0x31>

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
     87a:	74 01       	movw	r14, r8
     87c:	06 2d       	mov	r16, r6
     87e:	17 2d       	mov	r17, r7
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
     880:	65 01       	movw	r12, r10
     882:	cc 0c       	add	r12, r12
     884:	dd 1c       	adc	r13, r13
     886:	cc 0c       	add	r12, r12
     888:	dd 1c       	adc	r13, r13
     88a:	cc 0c       	add	r12, r12
     88c:	dd 1c       	adc	r13, r13
     88e:	db cf       	rjmp	.-74     	; 0x846 <mirror_x+0x56>
        }
    }
}
     890:	c0 5c       	subi	r28, 0xC0	; 192
     892:	df 4f       	sbci	r29, 0xFF	; 255
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	8f 90       	pop	r8
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	08 95       	ret

000008bc <mirror_z>:

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	c0 54       	subi	r28, 0x40	; 64
     8c6:	d1 09       	sbc	r29, r1
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
     8d2:	80 e4       	ldi	r24, 0x40	; 64
     8d4:	e8 ee       	ldi	r30, 0xE8	; 232
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	de 01       	movw	r26, r28
     8da:	11 96       	adiw	r26, 0x01	; 1
     8dc:	01 90       	ld	r0, Z+
     8de:	0d 92       	st	X+, r0
     8e0:	8a 95       	dec	r24
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <mirror_z+0x20>
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
     8e8:	67 e0       	ldi	r22, 0x07	; 7
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	15 c0       	rjmp	.+42     	; 0x918 <mirror_z+0x5c>

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
     8ee:	40 81       	ld	r20, Z
     8f0:	dc 01       	movw	r26, r24
     8f2:	aa 0f       	add	r26, r26
     8f4:	bb 1f       	adc	r27, r27
     8f6:	aa 0f       	add	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	aa 0f       	add	r26, r26
     8fc:	bb 1f       	adc	r27, r27
     8fe:	a2 0f       	add	r26, r18
     900:	b3 1f       	adc	r27, r19
     902:	a8 51       	subi	r26, 0x18	; 24
     904:	bf 4f       	sbci	r27, 0xFF	; 255
     906:	4c 93       	st	X, r20
     908:	38 96       	adiw	r30, 0x08	; 8
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	80 f7       	brcc	.-32     	; 0x8ee <mirror_z+0x32>
     90e:	2f 5f       	subi	r18, 0xFF	; 255
     910:	3f 4f       	sbci	r19, 0xFF	; 255
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
     912:	28 30       	cpi	r18, 0x08	; 8
     914:	31 05       	cpc	r19, r1
     916:	49 f0       	breq	.+18     	; 0x92a <mirror_z+0x6e>
     918:	e1 e0       	ldi	r30, 0x01	; 1
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	ec 0f       	add	r30, r28
     91e:	fd 1f       	adc	r31, r29
     920:	e2 0f       	add	r30, r18
     922:	f3 1f       	adc	r31, r19
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
     924:	86 2f       	mov	r24, r22
     926:	95 2f       	mov	r25, r21
     928:	e2 cf       	rjmp	.-60     	; 0x8ee <mirror_z+0x32>
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
        }
    }
}
     92a:	c0 5c       	subi	r28, 0xC0	; 192
     92c:	df 4f       	sbci	r29, 0xFF	; 255
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <effect_stringfly2>:

}


void effect_stringfly2(char * str)
{
     93e:	2f 92       	push	r2
     940:	3f 92       	push	r3
     942:	4f 92       	push	r4
     944:	5f 92       	push	r5
     946:	6f 92       	push	r6
     948:	7f 92       	push	r7
     94a:	8f 92       	push	r8
     94c:	9f 92       	push	r9
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <effect_stringfly2+0x26>
     964:	00 d0       	rcall	.+0      	; 0x966 <effect_stringfly2+0x28>
     966:	1f 92       	push	r1
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	4c 01       	movw	r8, r24
	int x,y,i;
	unsigned char chr[5];
	
	while (*str)
	{
		font_getchar(*str++, chr);
     96e:	68 94       	set
     970:	44 24       	eor	r4, r4
     972:	41 f8       	bld	r4, 1
     974:	51 2c       	mov	r5, r1
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
     976:	68 94       	set
     978:	cc 24       	eor	r12, r12
     97a:	c7 f8       	bld	r12, 7
     97c:	d1 2c       	mov	r13, r1

}


void effect_stringfly2(char * str)
{
     97e:	61 2c       	mov	r6, r1
     980:	71 2c       	mov	r7, r1
	while (*str)
	{
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
     982:	0f 2e       	mov	r0, r31
     984:	f6 e0       	ldi	r31, 0x06	; 6
     986:	3f 2e       	mov	r3, r31
     988:	f0 2d       	mov	r31, r0
     98a:	21 2c       	mov	r2, r1
void effect_stringfly2(char * str)
{
	int x,y,i;
	unsigned char chr[5];
	
	while (*str)
     98c:	41 c0       	rjmp	.+130    	; 0xa10 <effect_stringfly2+0xd2>
	{
		font_getchar(*str++, chr);
     98e:	be 01       	movw	r22, r28
     990:	6f 5f       	subi	r22, 0xFF	; 255
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <font_getchar>
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	7c 01       	movw	r14, r24
     99e:	a4 2c       	mov	r10, r4
     9a0:	b5 2c       	mov	r11, r5
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <effect_stringfly2+0xac>
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
     9a4:	f7 01       	movw	r30, r14
     9a6:	80 81       	ld	r24, Z
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	96 01       	movw	r18, r12
     9ac:	00 2e       	mov	r0, r16
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <effect_stringfly2+0x76>
     9b0:	35 95       	asr	r19
     9b2:	27 95       	ror	r18
     9b4:	0a 94       	dec	r0
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <effect_stringfly2+0x72>
     9b8:	82 23       	and	r24, r18
     9ba:	93 23       	and	r25, r19
     9bc:	89 2b       	or	r24, r25
     9be:	31 f0       	breq	.+12     	; 0x9cc <effect_stringfly2+0x8e>
				{
					setvoxel(7,x+2,y);
     9c0:	a8 01       	movw	r20, r16
     9c2:	b5 01       	movw	r22, r10
     9c4:	87 e0       	ldi	r24, 0x07	; 7
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	08 30       	cpi	r16, 0x08	; 8
     9d2:	11 05       	cpc	r17, r1
     9d4:	39 f7       	brne	.-50     	; 0x9a4 <effect_stringfly2+0x66>
     9d6:	ff ef       	ldi	r31, 0xFF	; 255
     9d8:	ef 1a       	sub	r14, r31
     9da:	ff 0a       	sbc	r15, r31
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	a8 1a       	sub	r10, r24
     9e0:	b8 0a       	sbc	r11, r24
	while (*str)
	{
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
     9e2:	97 e0       	ldi	r25, 0x07	; 7
     9e4:	a9 16       	cp	r10, r25
     9e6:	b1 04       	cpc	r11, r1
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <effect_stringfly2+0xb2>

}


void effect_stringfly2(char * str)
{
     9ea:	06 2d       	mov	r16, r6
     9ec:	17 2d       	mov	r17, r7
     9ee:	da cf       	rjmp	.-76     	; 0x9a4 <effect_stringfly2+0x66>
	while (*str)
	{
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
     9f0:	03 2d       	mov	r16, r3
     9f2:	12 2d       	mov	r17, r2
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i<6; i++)
		{
			delay_ms(1500);
     9f4:	8c ed       	ldi	r24, 0xDC	; 220
     9f6:	95 e0       	ldi	r25, 0x05	; 5
     9f8:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
            shift(AXIS_X,-1);
     9fc:	6f ef       	ldi	r22, 0xFF	; 255
     9fe:	7f ef       	ldi	r23, 0xFF	; 255
     a00:	88 e7       	ldi	r24, 0x78	; 120
     a02:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
     a06:	01 50       	subi	r16, 0x01	; 1
     a08:	11 09       	sbc	r17, r1
			}
		}
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i<6; i++)
     a0a:	01 15       	cp	r16, r1
     a0c:	11 05       	cpc	r17, r1
     a0e:	91 f7       	brne	.-28     	; 0x9f4 <effect_stringfly2+0xb6>
void effect_stringfly2(char * str)
{
	int x,y,i;
	unsigned char chr[5];
	
	while (*str)
     a10:	f4 01       	movw	r30, r8
     a12:	81 91       	ld	r24, Z+
     a14:	4f 01       	movw	r8, r30
     a16:	81 11       	cpse	r24, r1
     a18:	ba cf       	rjmp	.-140    	; 0x98e <effect_stringfly2+0x50>
     a1a:	08 e0       	ldi	r16, 0x08	; 8
     a1c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
    // Shift the last character out of the cube.
	for (i = 0; i<8; i++)
	{
		delay_ms(1000);
     a1e:	88 ee       	ldi	r24, 0xE8	; 232
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
        shift(AXIS_X,-1);
     a26:	6f ef       	ldi	r22, 0xFF	; 255
     a28:	7f ef       	ldi	r23, 0xFF	; 255
     a2a:	88 e7       	ldi	r24, 0x78	; 120
     a2c:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
     a30:	01 50       	subi	r16, 0x01	; 1
     a32:	11 09       	sbc	r17, r1
			delay_ms(1500);
            shift(AXIS_X,-1);
		}
	}
    // Shift the last character out of the cube.
	for (i = 0; i<8; i++)
     a34:	01 15       	cp	r16, r1
     a36:	11 05       	cpc	r17, r1
     a38:	91 f7       	brne	.-28     	; 0xa1e <effect_stringfly2+0xe0>
	{
		delay_ms(1000);
        shift(AXIS_X,-1);
	}
	
}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	08 95       	ret

00000a6a <effect_planboing>:

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	e8 2e       	mov	r14, r24
     a78:	c0 e0       	ldi	r28, 0x00	; 0
	int i;
	for (i=0;i<8;i++)
	{
		fill(0x00);
        setplane(plane, i);
		delay_ms(speed);
     a7a:	16 2f       	mov	r17, r22
     a7c:	d7 2f       	mov	r29, r23
void effect_planboing (int plane, int speed)
{
	int i;
	for (i=0;i<8;i++)
	{
		fill(0x00);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 99 01 	call	0x332	; 0x332 <fill>
        setplane(plane, i);
     a84:	6c 2f       	mov	r22, r28
     a86:	8e 2d       	mov	r24, r14
     a88:	0e 94 84 01 	call	0x308	; 0x308 <setplane>
		delay_ms(speed);
     a8c:	01 2f       	mov	r16, r17
     a8e:	fd 2e       	mov	r15, r29
     a90:	81 2f       	mov	r24, r17
     a92:	9d 2f       	mov	r25, r29
     a94:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     a98:	cf 5f       	subi	r28, 0xFF	; 255

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
	int i;
	for (i=0;i<8;i++)
     a9a:	c8 30       	cpi	r28, 0x08	; 8
     a9c:	81 f7       	brne	.-32     	; 0xa7e <effect_planboing+0x14>
     a9e:	c7 e0       	ldi	r28, 0x07	; 7
		delay_ms(speed);
	}
	
	for (i=7;i>=0;i--)
	{
		fill(0x00);
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 99 01 	call	0x332	; 0x332 <fill>
        setplane(plane,i);
     aa6:	6c 2f       	mov	r22, r28
     aa8:	8e 2d       	mov	r24, r14
     aaa:	0e 94 84 01 	call	0x308	; 0x308 <setplane>
		delay_ms(speed);
     aae:	80 2f       	mov	r24, r16
     ab0:	9f 2d       	mov	r25, r15
     ab2:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     ab6:	c1 50       	subi	r28, 0x01	; 1
     ab8:	98 f7       	brcc	.-26     	; 0xaa0 <effect_planboing+0x36>
	}
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	08 95       	ret

00000ac8 <fill_cube>:


void fill_cube(int iterations, int delay)
{
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	5c 01       	movw	r10, r24
	int i, x;
	for (x = 0; x<iterations; x++)
     ae2:	18 16       	cp	r1, r24
     ae4:	19 06       	cpc	r1, r25
     ae6:	0c f0       	brlt	.+2      	; 0xaea <fill_cube+0x22>
     ae8:	c7 c0       	rjmp	.+398    	; 0xc78 <fill_cube+0x1b0>
     aea:	c1 2c       	mov	r12, r1
     aec:	d1 2c       	mov	r13, r1
		box_wireframe(4,4,4,7,7,7);
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Y,-1);
				delay_ms(delay);
     aee:	86 2e       	mov	r8, r22
     af0:	97 2e       	mov	r9, r23
void fill_cube(int iterations, int delay)
{
	int i, x;
	for (x = 0; x<iterations; x++)
	{
		fill(0x00);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 99 01 	call	0x332	; 0x332 <fill>
		box_wireframe(4,4,4,7,7,7);
     af8:	0f 2e       	mov	r0, r31
     afa:	f7 e0       	ldi	r31, 0x07	; 7
     afc:	ef 2e       	mov	r14, r31
     afe:	f1 2c       	mov	r15, r1
     b00:	f0 2d       	mov	r31, r0
     b02:	07 e0       	ldi	r16, 0x07	; 7
     b04:	10 e0       	ldi	r17, 0x00	; 0
     b06:	27 e0       	ldi	r18, 0x07	; 7
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	44 e0       	ldi	r20, 0x04	; 4
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	64 e0       	ldi	r22, 0x04	; 4
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 ce 01 	call	0x39c	; 0x39c <box_wireframe>
     b1a:	c4 e0       	ldi	r28, 0x04	; 4
     b1c:	d0 e0       	ldi	r29, 0x00	; 0
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Y,-1);
     b1e:	6f ef       	ldi	r22, 0xFF	; 255
     b20:	7f ef       	ldi	r23, 0xFF	; 255
     b22:	89 e7       	ldi	r24, 0x79	; 121
     b24:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     b28:	88 2d       	mov	r24, r8
     b2a:	99 2d       	mov	r25, r9
     b2c:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     b30:	21 97       	sbiw	r28, 0x01	; 1
	for (x = 0; x<iterations; x++)
	{
		fill(0x00);
		box_wireframe(4,4,4,7,7,7);
		
			for (i = 0; i<4; i++)
     b32:	20 97       	sbiw	r28, 0x00	; 0
     b34:	a1 f7       	brne	.-24     	; 0xb1e <fill_cube+0x56>
     b36:	c4 e0       	ldi	r28, 0x04	; 4
     b38:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_X,-1);
     b3a:	6f ef       	ldi	r22, 0xFF	; 255
     b3c:	7f ef       	ldi	r23, 0xFF	; 255
     b3e:	88 e7       	ldi	r24, 0x78	; 120
     b40:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     b44:	88 2d       	mov	r24, r8
     b46:	99 2d       	mov	r25, r9
     b48:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     b4c:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_Y,-1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     b4e:	20 97       	sbiw	r28, 0x00	; 0
     b50:	a1 f7       	brne	.-24     	; 0xb3a <fill_cube+0x72>
     b52:	c4 e0       	ldi	r28, 0x04	; 4
     b54:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Y,1);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	89 e7       	ldi	r24, 0x79	; 121
     b5c:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     b60:	88 2d       	mov	r24, r8
     b62:	99 2d       	mov	r25, r9
     b64:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     b68:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_X,-1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     b6a:	20 97       	sbiw	r28, 0x00	; 0
     b6c:	a1 f7       	brne	.-24     	; 0xb56 <fill_cube+0x8e>
     b6e:	c4 e0       	ldi	r28, 0x04	; 4
     b70:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_X,1);
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	88 e7       	ldi	r24, 0x78	; 120
     b78:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     b7c:	88 2d       	mov	r24, r8
     b7e:	99 2d       	mov	r25, r9
     b80:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     b84:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_Y,1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     b86:	20 97       	sbiw	r28, 0x00	; 0
     b88:	a1 f7       	brne	.-24     	; 0xb72 <fill_cube+0xaa>
     b8a:	c4 e0       	ldi	r28, 0x04	; 4
     b8c:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Y,-1);
     b8e:	6f ef       	ldi	r22, 0xFF	; 255
     b90:	7f ef       	ldi	r23, 0xFF	; 255
     b92:	89 e7       	ldi	r24, 0x79	; 121
     b94:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     b98:	88 2d       	mov	r24, r8
     b9a:	99 2d       	mov	r25, r9
     b9c:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     ba0:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_X,1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     ba2:	20 97       	sbiw	r28, 0x00	; 0
     ba4:	a1 f7       	brne	.-24     	; 0xb8e <fill_cube+0xc6>
     ba6:	c4 e0       	ldi	r28, 0x04	; 4
     ba8:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Z,-1);
     baa:	6f ef       	ldi	r22, 0xFF	; 255
     bac:	7f ef       	ldi	r23, 0xFF	; 255
     bae:	8a e7       	ldi	r24, 0x7A	; 122
     bb0:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     bb4:	88 2d       	mov	r24, r8
     bb6:	99 2d       	mov	r25, r9
     bb8:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     bbc:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_Y,-1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     bbe:	20 97       	sbiw	r28, 0x00	; 0
     bc0:	a1 f7       	brne	.-24     	; 0xbaa <fill_cube+0xe2>
     bc2:	c4 e0       	ldi	r28, 0x04	; 4
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Y,1);
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	89 e7       	ldi	r24, 0x79	; 121
     bcc:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     bd0:	88 2d       	mov	r24, r8
     bd2:	99 2d       	mov	r25, r9
     bd4:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     bd8:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_Z,-1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     bda:	20 97       	sbiw	r28, 0x00	; 0
     bdc:	a1 f7       	brne	.-24     	; 0xbc6 <fill_cube+0xfe>
     bde:	c4 e0       	ldi	r28, 0x04	; 4
     be0:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_X,-1);
     be2:	6f ef       	ldi	r22, 0xFF	; 255
     be4:	7f ef       	ldi	r23, 0xFF	; 255
     be6:	88 e7       	ldi	r24, 0x78	; 120
     be8:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     bec:	88 2d       	mov	r24, r8
     bee:	99 2d       	mov	r25, r9
     bf0:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     bf4:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_Y,1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     bf6:	20 97       	sbiw	r28, 0x00	; 0
     bf8:	a1 f7       	brne	.-24     	; 0xbe2 <fill_cube+0x11a>
     bfa:	c4 e0       	ldi	r28, 0x04	; 4
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Y,-1);
     bfe:	6f ef       	ldi	r22, 0xFF	; 255
     c00:	7f ef       	ldi	r23, 0xFF	; 255
     c02:	89 e7       	ldi	r24, 0x79	; 121
     c04:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     c08:	88 2d       	mov	r24, r8
     c0a:	99 2d       	mov	r25, r9
     c0c:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     c10:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_X,-1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     c12:	20 97       	sbiw	r28, 0x00	; 0
     c14:	a1 f7       	brne	.-24     	; 0xbfe <fill_cube+0x136>
     c16:	c4 e0       	ldi	r28, 0x04	; 4
     c18:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_X,1);
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	88 e7       	ldi	r24, 0x78	; 120
     c20:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     c24:	88 2d       	mov	r24, r8
     c26:	99 2d       	mov	r25, r9
     c28:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     c2c:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_Y,-1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     c2e:	20 97       	sbiw	r28, 0x00	; 0
     c30:	a1 f7       	brne	.-24     	; 0xc1a <fill_cube+0x152>
     c32:	c4 e0       	ldi	r28, 0x04	; 4
     c34:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Y,1);
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	89 e7       	ldi	r24, 0x79	; 121
     c3c:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     c40:	88 2d       	mov	r24, r8
     c42:	99 2d       	mov	r25, r9
     c44:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     c48:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_X,1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     c4a:	20 97       	sbiw	r28, 0x00	; 0
     c4c:	a1 f7       	brne	.-24     	; 0xc36 <fill_cube+0x16e>
     c4e:	c4 e0       	ldi	r28, 0x04	; 4
     c50:	d0 e0       	ldi	r29, 0x00	; 0
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
			{
				shift(AXIS_Z,1);
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	8a e7       	ldi	r24, 0x7A	; 122
     c58:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
				delay_ms(delay);
     c5c:	88 2d       	mov	r24, r8
     c5e:	99 2d       	mov	r25, r9
     c60:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
     c64:	21 97       	sbiw	r28, 0x01	; 1
			{
				shift(AXIS_Y,1);
				delay_ms(delay);
			}
		
			for (i = 0; i<4; i++)
     c66:	20 97       	sbiw	r28, 0x00	; 0
     c68:	a1 f7       	brne	.-24     	; 0xc52 <fill_cube+0x18a>


void fill_cube(int iterations, int delay)
{
	int i, x;
	for (x = 0; x<iterations; x++)
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	c8 1a       	sub	r12, r24
     c6e:	d8 0a       	sbc	r13, r24
     c70:	ca 14       	cp	r12, r10
     c72:	db 04       	cpc	r13, r11
     c74:	09 f0       	breq	.+2      	; 0xc78 <fill_cube+0x1b0>
     c76:	3d cf       	rjmp	.-390    	; 0xaf2 <fill_cube+0x2a>
		
	

	}
	
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	9f 90       	pop	r9
     c8e:	8f 90       	pop	r8
     c90:	08 95       	ret

00000c92 <effect_blinky2>:

void effect_blinky2()
{
     c92:	6f 92       	push	r6
     c94:	7f 92       	push	r7
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
	int i,r;
	fill(0x00);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 99 01 	call	0x332	; 0x332 <fill>
     cb4:	68 94       	set
     cb6:	aa 24       	eor	r10, r10
     cb8:	a1 f8       	bld	r10, 1
     cba:	b1 2c       	mov	r11, r1
	}
	
}

void effect_blinky2()
{
     cbc:	0f 2e       	mov	r0, r31
     cbe:	fe ee       	ldi	r31, 0xEE	; 238
     cc0:	6f 2e       	mov	r6, r31
     cc2:	f0 2d       	mov	r31, r0
     cc4:	68 94       	set
     cc6:	77 24       	eor	r7, r7
     cc8:	71 f8       	bld	r7, 1
			delay_ms(i);
			
			fill(0xff);
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
     cca:	0f 2e       	mov	r0, r31
     ccc:	fa e0       	ldi	r31, 0x0A	; 10
     cce:	ef 2e       	mov	r14, r31
     cd0:	f1 2c       	mov	r15, r1
     cd2:	f0 2d       	mov	r31, r0
     cd4:	08 ee       	ldi	r16, 0xE8	; 232
     cd6:	13 e0       	ldi	r17, 0x03	; 3
     cd8:	0f 2e       	mov	r0, r31
     cda:	f1 ef       	ldi	r31, 0xF1	; 241
     cdc:	8f 2e       	mov	r8, r31
     cde:	99 24       	eor	r9, r9
     ce0:	9a 94       	dec	r9
     ce2:	f0 2d       	mov	r31, r0
		
		i = 750;
		while (i>0)
		{
			fill(0x00);
			delay_ms(751-i);
     ce4:	0f 2e       	mov	r0, r31
     ce6:	ff ee       	ldi	r31, 0xEF	; 239
     ce8:	cf 2e       	mov	r12, r31
     cea:	f2 e0       	ldi	r31, 0x02	; 2
     cec:	df 2e       	mov	r13, r31
     cee:	f0 2d       	mov	r31, r0
     cf0:	45 c0       	rjmp	.+138    	; 0xd7c <effect_blinky2+0xea>
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
		{
			fill(0x00);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 99 01 	call	0x332	; 0x332 <fill>
			delay_ms(i);
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			
			fill(0xff);
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	0e 94 99 01 	call	0x332	; 0x332 <fill>
			delay_ms(100);
     d04:	84 e6       	ldi	r24, 0x64	; 100
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			
			i = i - (15+(1000/(i/10)));
     d0c:	ce 01       	movw	r24, r28
     d0e:	b7 01       	movw	r22, r14
     d10:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
     d14:	c8 01       	movw	r24, r16
     d16:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
     d1a:	c4 01       	movw	r24, r8
     d1c:	86 1b       	sub	r24, r22
     d1e:	97 0b       	sbc	r25, r23
     d20:	c8 0f       	add	r28, r24
     d22:	d9 1f       	adc	r29, r25
	fill(0x00);
	
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
     d24:	1c 16       	cp	r1, r28
     d26:	1d 06       	cpc	r1, r29
     d28:	24 f3       	brlt	.-56     	; 0xcf2 <effect_blinky2+0x60>
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
		}
		
		delay_ms(1000);
     d2a:	c8 01       	movw	r24, r16
     d2c:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		
		i = 750;
     d30:	c6 2d       	mov	r28, r6
     d32:	d7 2d       	mov	r29, r7
		while (i>0)
		{
			fill(0x00);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 99 01 	call	0x332	; 0x332 <fill>
			delay_ms(751-i);
     d3a:	c6 01       	movw	r24, r12
     d3c:	8c 1b       	sub	r24, r28
     d3e:	9d 0b       	sbc	r25, r29
     d40:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			
			fill(0xff);
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	0e 94 99 01 	call	0x332	; 0x332 <fill>
			delay_ms(100);
     d4a:	84 e6       	ldi	r24, 0x64	; 100
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			
			i = i - (15+(1000/(i/10)));
     d52:	ce 01       	movw	r24, r28
     d54:	b7 01       	movw	r22, r14
     d56:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
     d5a:	c8 01       	movw	r24, r16
     d5c:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
     d60:	c4 01       	movw	r24, r8
     d62:	86 1b       	sub	r24, r22
     d64:	97 0b       	sbc	r25, r23
     d66:	c8 0f       	add	r28, r24
     d68:	d9 1f       	adc	r29, r25
		}
		
		delay_ms(1000);
		
		i = 750;
		while (i>0)
     d6a:	1c 16       	cp	r1, r28
     d6c:	1d 06       	cpc	r1, r29
     d6e:	14 f3       	brlt	.-60     	; 0xd34 <effect_blinky2+0xa2>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	a8 1a       	sub	r10, r24
     d74:	b1 08       	sbc	r11, r1
void effect_blinky2()
{
	int i,r;
	fill(0x00);
	
	for (r=0;r<2;r++)
     d76:	a1 14       	cp	r10, r1
     d78:	b1 04       	cpc	r11, r1
     d7a:	19 f0       	breq	.+6      	; 0xd82 <effect_blinky2+0xf0>
	}
	
}

void effect_blinky2()
{
     d7c:	c6 2d       	mov	r28, r6
     d7e:	d7 2d       	mov	r29, r7
     d80:	b8 cf       	rjmp	.-144    	; 0xcf2 <effect_blinky2+0x60>
			
			i = i - (15+(1000/(i/10)));
		}
	}

}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	7f 90       	pop	r7
     d9c:	6f 90       	pop	r6
     d9e:	08 95       	ret

00000da0 <effect_box_shrink_grow>:

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
     da0:	2f 92       	push	r2
     da2:	3f 92       	push	r3
     da4:	4f 92       	push	r4
     da6:	5f 92       	push	r5
     da8:	6f 92       	push	r6
     daa:	7f 92       	push	r7
     dac:	8f 92       	push	r8
     dae:	9f 92       	push	r9
     db0:	af 92       	push	r10
     db2:	bf 92       	push	r11
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	28 97       	sbiw	r28, 0x08	; 8
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
     dd8:	6a 01       	movw	r12, r20
     dda:	59 01       	movw	r10, r18
	int x, i, xyz;
	for (x=0;x<iterations;x++)
     ddc:	18 16       	cp	r1, r24
     dde:	19 06       	cpc	r1, r25
     de0:	0c f0       	brlt	.+2      	; 0xde4 <effect_box_shrink_grow+0x44>
     de2:	62 c0       	rjmp	.+196    	; 0xea8 <effect_box_shrink_grow+0x108>
     de4:	1c 82       	std	Y+4, r1	; 0x04
     de6:	1b 82       	std	Y+3, r1	; 0x03
	}

}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
     de8:	21 2c       	mov	r2, r1
     dea:	31 2c       	mov	r3, r1
	int x, i, xyz;
	for (x=0;x<iterations;x++)
	{
		for (i=0;i<16;i++)
		{
            xyz = 7-i; // This reverses counter i between 0 and 7.
     dec:	0f 2e       	mov	r0, r31
     dee:	f7 e0       	ldi	r31, 0x07	; 7
     df0:	8f 2e       	mov	r8, r31
     df2:	91 2c       	mov	r9, r1
     df4:	f0 2d       	mov	r31, r0
			box_wireframe(0,0,0,xyz,xyz,xyz);

            if (flip > 0) // upside-down
                mirror_z();

            if (rot == 1 || rot == 3)
     df6:	2b 01       	movw	r4, r22
     df8:	e8 94       	clt
     dfa:	41 f8       	bld	r4, 1
                mirror_y();

            if (rot == 2 || rot == 3)
     dfc:	9b 01       	movw	r18, r22
     dfe:	22 50       	subi	r18, 0x02	; 2
     e00:	31 09       	sbc	r19, r1
     e02:	3a 83       	std	Y+2, r19	; 0x02
     e04:	29 83       	std	Y+1, r18	; 0x01
     e06:	4c c0       	rjmp	.+152    	; 0xea0 <effect_box_shrink_grow+0x100>
	for (x=0;x<iterations;x++)
	{
		for (i=0;i<16;i++)
		{
            xyz = 7-i; // This reverses counter i between 0 and 7.
            if (i > 7) 
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	98 85       	ldd	r25, Y+8	; 0x08
     e0c:	88 30       	cpi	r24, 0x08	; 8
     e0e:	91 05       	cpc	r25, r1
     e10:	24 f4       	brge	.+8      	; 0xe1a <effect_box_shrink_grow+0x7a>
     e12:	34 01       	movw	r6, r8
     e14:	68 1a       	sub	r6, r24
     e16:	79 0a       	sbc	r7, r25
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <effect_box_shrink_grow+0x84>
     e1a:	6f 80       	ldd	r6, Y+7	; 0x07
     e1c:	78 84       	ldd	r7, Y+8	; 0x08
     e1e:	98 e0       	ldi	r25, 0x08	; 8
     e20:	69 1a       	sub	r6, r25
     e22:	71 08       	sbc	r7, r1
                xyz = i-8; // at i > 7, i 8-15 becomes xyz 0-7.
            
            fill(0x00); delay_ms(1);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 99 01 	call	0x332	; 0x332 <fill>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
            cli(); // disable interrupts while the cube is being rotated
     e32:	f8 94       	cli
			box_wireframe(0,0,0,xyz,xyz,xyz);
     e34:	73 01       	movw	r14, r6
     e36:	83 01       	movw	r16, r6
     e38:	93 01       	movw	r18, r6
     e3a:	42 2d       	mov	r20, r2
     e3c:	53 2d       	mov	r21, r3
     e3e:	62 2d       	mov	r22, r2
     e40:	73 2d       	mov	r23, r3
     e42:	82 2d       	mov	r24, r2
     e44:	93 2d       	mov	r25, r3
     e46:	0e 94 ce 01 	call	0x39c	; 0x39c <box_wireframe>

            if (flip > 0) // upside-down
     e4a:	1c 14       	cp	r1, r12
     e4c:	1d 04       	cpc	r1, r13
     e4e:	14 f4       	brge	.+4      	; 0xe54 <effect_box_shrink_grow+0xb4>
                mirror_z();
     e50:	0e 94 5e 04 	call	0x8bc	; 0x8bc <mirror_z>

            if (rot == 1 || rot == 3)
     e54:	e1 e0       	ldi	r30, 0x01	; 1
     e56:	4e 16       	cp	r4, r30
     e58:	51 04       	cpc	r5, r1
     e5a:	11 f4       	brne	.+4      	; 0xe60 <effect_box_shrink_grow+0xc0>
                mirror_y();
     e5c:	0e 94 80 03 	call	0x700	; 0x700 <mirror_y>

            if (rot == 2 || rot == 3)
     e60:	29 81       	ldd	r18, Y+1	; 0x01
     e62:	3a 81       	ldd	r19, Y+2	; 0x02
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	10 f4       	brcc	.+4      	; 0xe6e <effect_box_shrink_grow+0xce>
                mirror_x();
     e6a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <mirror_x>
            
            sei(); // enable interrupts
     e6e:	78 94       	sei
			delay_ms(delay);
     e70:	c5 01       	movw	r24, r10
     e72:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
	        fill(0x00);
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	0e 94 99 01 	call	0x332	; 0x332 <fill>
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
	{
		for (i=0;i<16;i++)
     e7c:	8f 81       	ldd	r24, Y+7	; 0x07
     e7e:	98 85       	ldd	r25, Y+8	; 0x08
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	98 87       	std	Y+8, r25	; 0x08
     e84:	8f 83       	std	Y+7, r24	; 0x07
     e86:	40 97       	sbiw	r24, 0x10	; 16
     e88:	09 f0       	breq	.+2      	; 0xe8c <effect_box_shrink_grow+0xec>
     e8a:	be cf       	rjmp	.-132    	; 0xe08 <effect_box_shrink_grow+0x68>
}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	31 96       	adiw	r30, 0x01	; 1
     e92:	fc 83       	std	Y+4, r31	; 0x04
     e94:	eb 83       	std	Y+3, r30	; 0x03
     e96:	2d 81       	ldd	r18, Y+5	; 0x05
     e98:	3e 81       	ldd	r19, Y+6	; 0x06
     e9a:	e2 17       	cp	r30, r18
     e9c:	f3 07       	cpc	r31, r19
     e9e:	21 f0       	breq	.+8      	; 0xea8 <effect_box_shrink_grow+0x108>
	}

}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
     ea0:	2f 82       	std	Y+7, r2	; 0x07
     ea2:	38 86       	std	Y+8, r3	; 0x08
	int x, i, xyz;
	for (x=0;x<iterations;x++)
	{
		for (i=0;i<16;i++)
		{
            xyz = 7-i; // This reverses counter i between 0 and 7.
     ea4:	34 01       	movw	r6, r8
     ea6:	be cf       	rjmp	.-132    	; 0xe24 <effect_box_shrink_grow+0x84>
            sei(); // enable interrupts
			delay_ms(delay);
	        fill(0x00);
        }
    }
}
     ea8:	28 96       	adiw	r28, 0x08	; 8
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	9f 90       	pop	r9
     eca:	8f 90       	pop	r8
     ecc:	7f 90       	pop	r7
     ece:	6f 90       	pop	r6
     ed0:	5f 90       	pop	r5
     ed2:	4f 90       	pop	r4
     ed4:	3f 90       	pop	r3
     ed6:	2f 90       	pop	r2
     ed8:	08 95       	ret

00000eda <effect_box_woopwoop>:

// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow)
{
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	5c 01       	movw	r10, r24
     ef4:	6b 01       	movw	r12, r22
	int i,ii;
	
	fill(0x00);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	0e 94 99 01 	call	0x332	; 0x332 <fill>
	for (i=0;i<4;i++)
     efc:	c0 e0       	ldi	r28, 0x00	; 0
     efe:	d0 e0       	ldi	r29, 0x00	; 0
     f00:	0f 2e       	mov	r0, r31
     f02:	f3 e0       	ldi	r31, 0x03	; 3
     f04:	8f 2e       	mov	r8, r31
     f06:	91 2c       	mov	r9, r1
     f08:	f0 2d       	mov	r31, r0
	{
        ii = i;
        if (grow > 0)
     f0a:	1c 14       	cp	r1, r12
     f0c:	1d 04       	cpc	r1, r13
     f0e:	24 f4       	brge	.+8      	; 0xf18 <effect_box_woopwoop+0x3e>
     f10:	c4 01       	movw	r24, r8
     f12:	8c 1b       	sub	r24, r28
     f14:	9d 0b       	sbc	r25, r29
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <effect_box_woopwoop+0x40>
     f18:	ce 01       	movw	r24, r28
            ii = 3-i;

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
     f1a:	94 01       	movw	r18, r8
     f1c:	28 1b       	sub	r18, r24
     f1e:	39 0b       	sbc	r19, r25
     f20:	04 96       	adiw	r24, 0x04	; 4
     f22:	79 01       	movw	r14, r18
     f24:	89 01       	movw	r16, r18
     f26:	ac 01       	movw	r20, r24
     f28:	bc 01       	movw	r22, r24
     f2a:	0e 94 ce 01 	call	0x39c	; 0x39c <box_wireframe>
		delay_ms(delay);
     f2e:	c5 01       	movw	r24, r10
     f30:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		fill(0x00);
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	0e 94 99 01 	call	0x332	; 0x332 <fill>
void effect_box_woopwoop (int delay, int grow)
{
	int i,ii;
	
	fill(0x00);
	for (i=0;i<4;i++)
     f3a:	21 96       	adiw	r28, 0x01	; 1
     f3c:	c4 30       	cpi	r28, 0x04	; 4
     f3e:	d1 05       	cpc	r29, r1
     f40:	21 f7       	brne	.-56     	; 0xf0a <effect_box_woopwoop+0x30>

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
		delay_ms(delay);
		fill(0x00);
	}
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	08 95       	ret

00000f5c <sendvoxel_z>:


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
     f5c:	5f 92       	push	r5
     f5e:	6f 92       	push	r6
     f60:	7f 92       	push	r7
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	54 2e       	mov	r5, r20
     f7c:	69 01       	movw	r12, r18
	int i, ii;
	for (i=0; i<8; i++)
     f7e:	c0 e0       	ldi	r28, 0x00	; 0
     f80:	d0 e0       	ldi	r29, 0x00	; 0
			ii = 7-i;
			clrvoxel(x,y,ii+1);
		} else
		{
			ii = i;
			clrvoxel(x,y,ii-1);
     f82:	e6 2e       	mov	r14, r22
     f84:	f1 2c       	mov	r15, r1
     f86:	08 2f       	mov	r16, r24
     f88:	10 e0       	ldi	r17, 0x00	; 0
     f8a:	0f 2e       	mov	r0, r31
     f8c:	f7 e0       	ldi	r31, 0x07	; 7
     f8e:	af 2e       	mov	r10, r31
     f90:	b1 2c       	mov	r11, r1
     f92:	f0 2d       	mov	r31, r0
     f94:	68 94       	set
     f96:	88 24       	eor	r8, r8
     f98:	83 f8       	bld	r8, 3
     f9a:	91 2c       	mov	r9, r1
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<8; i++)
	{
		if (z == 7)
     f9c:	87 e0       	ldi	r24, 0x07	; 7
     f9e:	58 12       	cpse	r5, r24
     fa0:	0b c0       	rjmp	.+22     	; 0xfb8 <sendvoxel_z+0x5c>
     fa2:	35 01       	movw	r6, r10
     fa4:	6c 1a       	sub	r6, r28
     fa6:	7d 0a       	sbc	r7, r29
     fa8:	a4 01       	movw	r20, r8
     faa:	4c 1b       	sub	r20, r28
     fac:	5d 0b       	sbc	r21, r29
		{
			ii = 7-i;
			clrvoxel(x,y,ii+1);
     fae:	b7 01       	movw	r22, r14
     fb0:	c8 01       	movw	r24, r16
     fb2:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
     fb6:	08 c0       	rjmp	.+16     	; 0xfc8 <sendvoxel_z+0x6c>
     fb8:	ae 01       	movw	r20, r28
     fba:	41 50       	subi	r20, 0x01	; 1
     fbc:	51 09       	sbc	r21, r1
		} else
		{
			ii = i;
			clrvoxel(x,y,ii-1);
     fbe:	b7 01       	movw	r22, r14
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
     fc6:	3e 01       	movw	r6, r28
		}
		setvoxel(x,y,ii);
     fc8:	a3 01       	movw	r20, r6
     fca:	b7 01       	movw	r22, r14
     fcc:	c8 01       	movw	r24, r16
     fce:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		delay_ms(delay);
     fd2:	c6 01       	movw	r24, r12
     fd4:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<8; i++)
     fd8:	21 96       	adiw	r28, 0x01	; 1
     fda:	c8 30       	cpi	r28, 0x08	; 8
     fdc:	d1 05       	cpc	r29, r1
     fde:	f1 f6       	brne	.-68     	; 0xf9c <sendvoxel_z+0x40>
			clrvoxel(x,y,ii-1);
		}
		setvoxel(x,y,ii);
		delay_ms(delay);
	}
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	08 95       	ret

00001000 <sendvoxels_rand_z>:
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    1000:	8f 92       	push	r8
    1002:	9f 92       	push	r9
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	7c 01       	movw	r14, r24
    101a:	5b 01       	movw	r10, r22
    101c:	6a 01       	movw	r12, r20
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    1024:	00 e0       	ldi	r16, 0x00	; 0
    1026:	10 e0       	ldi	r17, 0x00	; 0
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    1028:	81 2c       	mov	r8, r1
    102a:	91 2c       	mov	r9, r1
    102c:	20 c0       	rjmp	.+64     	; 0x106e <sendvoxels_rand_z+0x6e>
	{
		for (y=0;y<8;y++)
		{
			// Then set a voxel either at the top or at the bottom
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
    102e:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1032:	81 70       	andi	r24, 0x01	; 1
    1034:	90 78       	andi	r25, 0x80	; 128
    1036:	99 23       	and	r25, r25
    1038:	24 f4       	brge	.+8      	; 0x1042 <sendvoxels_rand_z+0x42>
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	8e 6f       	ori	r24, 0xFE	; 254
    103e:	9f 6f       	ori	r25, 0xFF	; 255
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	ac 01       	movw	r20, r24
    1044:	44 0f       	add	r20, r20
    1046:	55 1f       	adc	r21, r21
    1048:	44 0f       	add	r20, r20
    104a:	55 1f       	adc	r21, r21
    104c:	44 0f       	add	r20, r20
    104e:	55 1f       	adc	r21, r21
    1050:	48 1b       	sub	r20, r24
    1052:	59 0b       	sbc	r21, r25
    1054:	be 01       	movw	r22, r28
    1056:	c8 01       	movw	r24, r16
    1058:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    105c:	21 96       	adiw	r28, 0x01	; 1
	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
	{
		for (y=0;y<8;y++)
    105e:	c8 30       	cpi	r28, 0x08	; 8
    1060:	d1 05       	cpc	r29, r1
    1062:	29 f7       	brne	.-54     	; 0x102e <sendvoxels_rand_z+0x2e>
    1064:	0f 5f       	subi	r16, 0xFF	; 255
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
    1068:	08 30       	cpi	r16, 0x08	; 8
    106a:	11 05       	cpc	r17, r1
    106c:	19 f0       	breq	.+6      	; 0x1074 <sendvoxels_rand_z+0x74>
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    106e:	c8 2d       	mov	r28, r8
    1070:	d9 2d       	mov	r29, r9
    1072:	dd cf       	rjmp	.-70     	; 0x102e <sendvoxels_rand_z+0x2e>
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    1074:	1e 14       	cp	r1, r14
    1076:	1f 04       	cpc	r1, r15
    1078:	0c f0       	brlt	.+2      	; 0x107c <sendvoxels_rand_z+0x7c>
    107a:	41 c0       	rjmp	.+130    	; 0x10fe <sendvoxels_rand_z+0xfe>
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	00 e0       	ldi	r16, 0x00	; 0
    1080:	91 2c       	mov	r9, r1
	{
		// Pick a random x,y position
		x = rand()%8;
    1082:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1086:	ec 01       	movw	r28, r24
		y = rand()%8;
    1088:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    108c:	87 70       	andi	r24, 0x07	; 7
    108e:	90 78       	andi	r25, 0x80	; 128
    1090:	99 23       	and	r25, r25
    1092:	24 f4       	brge	.+8      	; 0x109c <sendvoxels_rand_z+0x9c>
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	88 6f       	ori	r24, 0xF8	; 248
    1098:	9f 6f       	ori	r25, 0xFF	; 255
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	ac 01       	movw	r20, r24
    109e:	88 2e       	mov	r8, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    10a0:	80 17       	cp	r24, r16
    10a2:	39 f1       	breq	.+78     	; 0x10f2 <sendvoxels_rand_z+0xf2>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    10a4:	ce 01       	movw	r24, r28
    10a6:	87 70       	andi	r24, 0x07	; 7
    10a8:	90 78       	andi	r25, 0x80	; 128
    10aa:	99 23       	and	r25, r25
    10ac:	24 f4       	brge	.+8      	; 0x10b6 <sendvoxels_rand_z+0xb6>
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	88 6f       	ori	r24, 0xF8	; 248
    10b2:	9f 6f       	ori	r25, 0xFF	; 255
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	c8 2f       	mov	r28, r24
		y = rand()%8;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    10b8:	89 15       	cp	r24, r9
    10ba:	d9 f0       	breq	.+54     	; 0x10f2 <sendvoxels_rand_z+0xf2>
		{
			// If the voxel at this x,y is at the bottom
			if (getvoxel(x,y,0))
    10bc:	ba 01       	movw	r22, r20
    10be:	77 27       	eor	r23, r23
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <getvoxel>
    10ca:	88 23       	and	r24, r24
    10cc:	39 f0       	breq	.+14     	; 0x10dc <sendvoxels_rand_z+0xdc>
			{
				// send it to the top
				sendvoxel_z(x,y,0,delay);
    10ce:	95 01       	movw	r18, r10
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	68 2d       	mov	r22, r8
    10d4:	8c 2f       	mov	r24, r28
    10d6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <sendvoxel_z>
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <sendvoxels_rand_z+0xe8>
			} else
			{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,7,delay);
    10dc:	95 01       	movw	r18, r10
    10de:	47 e0       	ldi	r20, 0x07	; 7
    10e0:	68 2d       	mov	r22, r8
    10e2:	8c 2f       	mov	r24, r28
    10e4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <sendvoxel_z>
			}
			delay_ms(wait);
    10e8:	c6 01       	movw	r24, r12
    10ea:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			
			// Remember the last move
			last_y = y;
    10ee:	08 2d       	mov	r16, r8
			last_x = x;
    10f0:	9c 2e       	mov	r9, r28
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    10f2:	1f 5f       	subi	r17, 0xFF	; 255
    10f4:	81 2f       	mov	r24, r17
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	8e 15       	cp	r24, r14
    10fa:	9f 05       	cpc	r25, r15
    10fc:	14 f2       	brlt	.-124    	; 0x1082 <sendvoxels_rand_z+0x82>
			last_y = y;
			last_x = x;
		}
	}

}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	bf 90       	pop	r11
    1110:	af 90       	pop	r10
    1112:	9f 90       	pop	r9
    1114:	8f 90       	pop	r8
    1116:	08 95       	ret

00001118 <boingboing>:


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    1118:	2f 92       	push	r2
    111a:	3f 92       	push	r3
    111c:	4f 92       	push	r4
    111e:	5f 92       	push	r5
    1120:	6f 92       	push	r6
    1122:	7f 92       	push	r7
    1124:	8f 92       	push	r8
    1126:	9f 92       	push	r9
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	ea 97       	sbiw	r28, 0x3a	; 58
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	9a ab       	std	Y+50, r25	; 0x32
    114e:	89 ab       	std	Y+49, r24	; 0x31
    1150:	78 af       	std	Y+56, r23	; 0x38
    1152:	6f ab       	std	Y+55, r22	; 0x37
    1154:	2b ab       	std	Y+51, r18	; 0x33
	fill(0x00);		// Blank the cube
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 99 01 	call	0x332	; 0x332 <fill>
	int x, y, z;		// Current coordinates for the point
	int dx, dy, dz;	// Direction of movement
	int lol, i;		// lol?
	unsigned char crash_x, crash_y, crash_z;

	y = rand()%8;
    115c:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1160:	87 70       	andi	r24, 0x07	; 7
    1162:	90 78       	andi	r25, 0x80	; 128
    1164:	99 23       	and	r25, r25
    1166:	24 f4       	brge	.+8      	; 0x1170 <boingboing+0x58>
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	88 6f       	ori	r24, 0xF8	; 248
    116c:	9f 6f       	ori	r25, 0xFF	; 255
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	7c 01       	movw	r14, r24
	x = rand()%8;
    1172:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1176:	87 70       	andi	r24, 0x07	; 7
    1178:	90 78       	andi	r25, 0x80	; 128
    117a:	99 23       	and	r25, r25
    117c:	24 f4       	brge	.+8      	; 0x1186 <boingboing+0x6e>
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	88 6f       	ori	r24, 0xF8	; 248
    1182:	9f 6f       	ori	r25, 0xFF	; 255
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	4c 01       	movw	r8, r24
	z = rand()%8;
    1188:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	90 78       	andi	r25, 0x80	; 128
    1190:	99 23       	and	r25, r25
    1192:	24 f4       	brge	.+8      	; 0x119c <boingboing+0x84>
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	88 6f       	ori	r24, 0xF8	; 248
    1198:	9f 6f       	ori	r25, 0xFF	; 255
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	5c 01       	movw	r10, r24
    119e:	fe 01       	movw	r30, r28
    11a0:	31 96       	adiw	r30, 0x01	; 1
    11a2:	cf 01       	movw	r24, r30
    11a4:	1e 01       	movw	r2, r28
    11a6:	21 e3       	ldi	r18, 0x31	; 49
    11a8:	22 0e       	add	r2, r18
    11aa:	31 1c       	adc	r3, r1

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
	{
		snake[i][0] = x;
    11ac:	91 82       	std	Z+1, r9	; 0x01
    11ae:	80 82       	st	Z, r8
		snake[i][1] = y;
    11b0:	f3 82       	std	Z+3, r15	; 0x03
    11b2:	e2 82       	std	Z+2, r14	; 0x02
		snake[i][2] = z;
    11b4:	b5 82       	std	Z+5, r11	; 0x05
    11b6:	a4 82       	std	Z+4, r10	; 0x04
    11b8:	36 96       	adiw	r30, 0x06	; 6
	x = rand()%8;
	z = rand()%8;

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
    11ba:	e2 15       	cp	r30, r2
    11bc:	f3 05       	cpc	r31, r3
    11be:	b1 f7       	brne	.-20     	; 0x11ac <boingboing+0x94>
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    11c0:	e9 a9       	ldd	r30, Y+49	; 0x31
    11c2:	fa a9       	ldd	r31, Y+50	; 0x32
    11c4:	ef 2b       	or	r30, r31
    11c6:	09 f4       	brne	.+2      	; 0x11ca <boingboing+0xb2>
    11c8:	99 c2       	rjmp	.+1330   	; 0x16fc <boingboing+0x5e4>
    11ca:	44 24       	eor	r4, r4
    11cc:	43 94       	inc	r4
    11ce:	51 2c       	mov	r5, r1
    11d0:	66 24       	eor	r6, r6
    11d2:	63 94       	inc	r6
    11d4:	71 2c       	mov	r7, r1
    11d6:	cc 24       	eor	r12, r12
    11d8:	c3 94       	inc	r12
    11da:	d1 2c       	mov	r13, r1
    11dc:	9c 01       	movw	r18, r24
    11de:	2c 50       	subi	r18, 0x0C	; 12
    11e0:	31 09       	sbc	r19, r1
    11e2:	3a af       	std	Y+58, r19	; 0x3a
    11e4:	29 af       	std	Y+57, r18	; 0x39
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
    11e6:	8d ab       	std	Y+53, r24	; 0x35
    11e8:	9e ab       	std	Y+54, r25	; 0x36
		crash_y = 0;
		crash_z = 0;
	

		// Let's mix things up a little:
		if (rand()%3 == 0)
    11ea:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    11ee:	63 e0       	ldi	r22, 0x03	; 3
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    11f6:	89 2b       	or	r24, r25
    11f8:	69 f5       	brne	.+90     	; 0x1254 <boingboing+0x13c>
		{
			// Pick a random axis, and set the speed to a random number.
			lol = rand()%3;
    11fa:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    11fe:	63 e0       	ldi	r22, 0x03	; 3
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
			if (lol == 0)
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	59 f4       	brne	.+22     	; 0x1220 <boingboing+0x108>
				dx = rand()%3 - 1;
    120a:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    120e:	63 e0       	ldi	r22, 0x03	; 3
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    1216:	6c 01       	movw	r12, r24
    1218:	31 e0       	ldi	r19, 0x01	; 1
    121a:	c3 1a       	sub	r12, r19
    121c:	d1 08       	sbc	r13, r1
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <boingboing+0x13c>
			
			if (lol == 1)
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	59 f4       	brne	.+22     	; 0x123c <boingboing+0x124>
				dy = rand()%3 - 1;
    1226:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    122a:	63 e0       	ldi	r22, 0x03	; 3
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    1232:	3c 01       	movw	r6, r24
    1234:	e1 e0       	ldi	r30, 0x01	; 1
    1236:	6e 1a       	sub	r6, r30
    1238:	71 08       	sbc	r7, r1
    123a:	0c c0       	rjmp	.+24     	; 0x1254 <boingboing+0x13c>
				
			if (lol == 2)
    123c:	02 97       	sbiw	r24, 0x02	; 2
    123e:	51 f4       	brne	.+20     	; 0x1254 <boingboing+0x13c>
				dz = rand()%3 - 1;
    1240:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1244:	63 e0       	ldi	r22, 0x03	; 3
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    124c:	2c 01       	movw	r4, r24
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	4f 1a       	sub	r4, r31
    1252:	51 08       	sbc	r5, r1
		}

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
    1254:	2f ef       	ldi	r18, 0xFF	; 255
    1256:	c2 16       	cp	r12, r18
    1258:	d2 06       	cpc	r13, r18
    125a:	99 f4       	brne	.+38     	; 0x1282 <boingboing+0x16a>
    125c:	81 14       	cp	r8, r1
    125e:	91 04       	cpc	r9, r1
    1260:	91 f4       	brne	.+36     	; 0x1286 <boingboing+0x16e>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    1262:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1266:	63 e0       	ldi	r22, 0x03	; 3
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    126e:	31 e0       	ldi	r19, 0x01	; 1
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	09 f0       	breq	.+2      	; 0x1278 <boingboing+0x160>
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	c3 2e       	mov	r12, r19
    127a:	d2 2e       	mov	r13, r18

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
		{
			crash_x = 0x01;
    127c:	31 e0       	ldi	r19, 0x01	; 1
    127e:	3c ab       	std	Y+52, r19	; 0x34
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <boingboing+0x170>
	dy = 1;
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
    1282:	1c aa       	std	Y+52, r1	; 0x34
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <boingboing+0x170>
    1286:	1c aa       	std	Y+52, r1	; 0x34
				dx = 0;
			}
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	68 16       	cp	r6, r24
    128c:	78 06       	cpc	r7, r24
    128e:	91 f4       	brne	.+36     	; 0x12b4 <boingboing+0x19c>
    1290:	e1 14       	cp	r14, r1
    1292:	f1 04       	cpc	r15, r1
    1294:	89 f4       	brne	.+34     	; 0x12b8 <boingboing+0x1a0>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    1296:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    129a:	63 e0       	ldi	r22, 0x03	; 3
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    12a2:	31 e0       	ldi	r19, 0x01	; 1
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <boingboing+0x194>
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	63 2e       	mov	r6, r19
    12ae:	72 2e       	mov	r7, r18
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
		{
			crash_y = 0x01;
    12b0:	01 e0       	ldi	r16, 0x01	; 1
    12b2:	03 c0       	rjmp	.+6      	; 0x12ba <boingboing+0x1a2>
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
    12b4:	00 e0       	ldi	r16, 0x00	; 0
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <boingboing+0x1a2>
    12b8:	00 e0       	ldi	r16, 0x00	; 0
				dy = 0;
			}
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
    12ba:	9f ef       	ldi	r25, 0xFF	; 255
    12bc:	49 16       	cp	r4, r25
    12be:	59 06       	cpc	r5, r25
    12c0:	91 f4       	brne	.+36     	; 0x12e6 <boingboing+0x1ce>
    12c2:	a1 14       	cp	r10, r1
    12c4:	b1 04       	cpc	r11, r1
    12c6:	89 f4       	brne	.+34     	; 0x12ea <boingboing+0x1d2>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    12c8:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    12cc:	63 e0       	ldi	r22, 0x03	; 3
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    12d4:	31 e0       	ldi	r19, 0x01	; 1
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	09 f0       	breq	.+2      	; 0x12de <boingboing+0x1c6>
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	43 2e       	mov	r4, r19
    12e0:	52 2e       	mov	r5, r18
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
		{
			crash_z = 0x01;
    12e2:	11 e0       	ldi	r17, 0x01	; 1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <boingboing+0x1d4>
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
		crash_z = 0;
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <boingboing+0x1d4>
    12ea:	10 e0       	ldi	r17, 0x00	; 0
				dz = 0;
			}
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
    12ec:	e1 e0       	ldi	r30, 0x01	; 1
    12ee:	ce 16       	cp	r12, r30
    12f0:	d1 04       	cpc	r13, r1
    12f2:	a9 f4       	brne	.+42     	; 0x131e <boingboing+0x206>
    12f4:	f7 e0       	ldi	r31, 0x07	; 7
    12f6:	8f 16       	cp	r8, r31
    12f8:	91 04       	cpc	r9, r1
    12fa:	89 f4       	brne	.+34     	; 0x131e <boingboing+0x206>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    12fc:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    1308:	cc 24       	eor	r12, r12
    130a:	c3 94       	inc	r12
    130c:	d1 2c       	mov	r13, r1
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	09 f0       	breq	.+2      	; 0x1314 <boingboing+0x1fc>
    1312:	c1 2c       	mov	r12, r1
    1314:	d1 94       	neg	r13
    1316:	c1 94       	neg	r12
    1318:	d1 08       	sbc	r13, r1
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
		{
			crash_x = 0x01;
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	2c ab       	std	Y+52, r18	; 0x34
				dx = 0;
			}
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
    131e:	31 e0       	ldi	r19, 0x01	; 1
    1320:	63 16       	cp	r6, r19
    1322:	71 04       	cpc	r7, r1
    1324:	a1 f4       	brne	.+40     	; 0x134e <boingboing+0x236>
    1326:	87 e0       	ldi	r24, 0x07	; 7
    1328:	e8 16       	cp	r14, r24
    132a:	f1 04       	cpc	r15, r1
    132c:	81 f4       	brne	.+32     	; 0x134e <boingboing+0x236>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    132e:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1332:	63 e0       	ldi	r22, 0x03	; 3
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    133a:	66 24       	eor	r6, r6
    133c:	63 94       	inc	r6
    133e:	71 2c       	mov	r7, r1
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <boingboing+0x22e>
    1344:	61 2c       	mov	r6, r1
    1346:	71 94       	neg	r7
    1348:	61 94       	neg	r6
    134a:	71 08       	sbc	r7, r1
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
		{
			crash_y = 0x01;
    134c:	01 e0       	ldi	r16, 0x01	; 1
				dy = 0;
			}
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	49 16       	cp	r4, r25
    1352:	51 04       	cpc	r5, r1
    1354:	a1 f4       	brne	.+40     	; 0x137e <boingboing+0x266>
    1356:	e7 e0       	ldi	r30, 0x07	; 7
    1358:	ae 16       	cp	r10, r30
    135a:	b1 04       	cpc	r11, r1
    135c:	81 f4       	brne	.+32     	; 0x137e <boingboing+0x266>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    135e:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1362:	63 e0       	ldi	r22, 0x03	; 3
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    136a:	44 24       	eor	r4, r4
    136c:	43 94       	inc	r4
    136e:	51 2c       	mov	r5, r1
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	09 f0       	breq	.+2      	; 0x1376 <boingboing+0x25e>
    1374:	41 2c       	mov	r4, r1
    1376:	51 94       	neg	r5
    1378:	41 94       	neg	r4
    137a:	51 08       	sbc	r5, r1
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
		{
			crash_z = 0x01;
    137c:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		// mode bit 0 sets crash action enable
		if (mode | 0x01)
		{
			if (crash_x)
    137e:	fc a9       	ldd	r31, Y+52	; 0x34
    1380:	ff 23       	and	r31, r31
    1382:	f1 f1       	breq	.+124    	; 0x1400 <boingboing+0x2e8>
			{
				if (dy == 0)
    1384:	61 14       	cp	r6, r1
    1386:	71 04       	cpc	r7, r1
    1388:	e1 f4       	brne	.+56     	; 0x13c2 <boingboing+0x2aa>
				{
					if (y == 7)
    138a:	27 e0       	ldi	r18, 0x07	; 7
    138c:	e2 16       	cp	r14, r18
    138e:	f1 04       	cpc	r15, r1
    1390:	61 f0       	breq	.+24     	; 0x13aa <boingboing+0x292>
					{
						dy = -1;
					} else if (y == 0)
    1392:	e1 14       	cp	r14, r1
    1394:	f1 04       	cpc	r15, r1
    1396:	71 f0       	breq	.+28     	; 0x13b4 <boingboing+0x29c>
					{
						dy = +1;
					} else
					{
						if (rand()%2 == 0)
    1398:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    139c:	80 fd       	sbrc	r24, 0
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <boingboing+0x2a4>
						{
							dy = -1;
    13a0:	66 24       	eor	r6, r6
    13a2:	6a 94       	dec	r6
    13a4:	77 24       	eor	r7, r7
    13a6:	7a 94       	dec	r7
    13a8:	0c c0       	rjmp	.+24     	; 0x13c2 <boingboing+0x2aa>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    13aa:	66 24       	eor	r6, r6
    13ac:	6a 94       	dec	r6
    13ae:	77 24       	eor	r7, r7
    13b0:	7a 94       	dec	r7
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <boingboing+0x2aa>
					} else if (y == 0)
					{
						dy = +1;
    13b4:	66 24       	eor	r6, r6
    13b6:	63 94       	inc	r6
    13b8:	71 2c       	mov	r7, r1
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <boingboing+0x2aa>
						if (rand()%2 == 0)
						{
							dy = -1;
						} else
						{
							dy = 1;
    13bc:	66 24       	eor	r6, r6
    13be:	63 94       	inc	r6
    13c0:	71 2c       	mov	r7, r1
						}
					}
				}
				if (dz == 0)
    13c2:	41 14       	cp	r4, r1
    13c4:	51 04       	cpc	r5, r1
    13c6:	e1 f4       	brne	.+56     	; 0x1400 <boingboing+0x2e8>
				{
					if (z == 7)
    13c8:	37 e0       	ldi	r19, 0x07	; 7
    13ca:	a3 16       	cp	r10, r19
    13cc:	b1 04       	cpc	r11, r1
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <boingboing+0x2d0>
					{
						dz = -1;
					} else if (z == 0)
    13d0:	a1 14       	cp	r10, r1
    13d2:	b1 04       	cpc	r11, r1
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <boingboing+0x2da>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    13d6:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    13da:	80 fd       	sbrc	r24, 0
    13dc:	0e c0       	rjmp	.+28     	; 0x13fa <boingboing+0x2e2>
						{
							dz = -1;
    13de:	44 24       	eor	r4, r4
    13e0:	4a 94       	dec	r4
    13e2:	55 24       	eor	r5, r5
    13e4:	5a 94       	dec	r5
    13e6:	0c c0       	rjmp	.+24     	; 0x1400 <boingboing+0x2e8>
				}
				if (dz == 0)
				{
					if (z == 7)
					{
						dz = -1;
    13e8:	44 24       	eor	r4, r4
    13ea:	4a 94       	dec	r4
    13ec:	55 24       	eor	r5, r5
    13ee:	5a 94       	dec	r5
    13f0:	07 c0       	rjmp	.+14     	; 0x1400 <boingboing+0x2e8>
					} else if (z == 0)
					{
						dz = 1;
    13f2:	44 24       	eor	r4, r4
    13f4:	43 94       	inc	r4
    13f6:	51 2c       	mov	r5, r1
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <boingboing+0x2e8>
						if (rand()%2 == 0)
						{
							dz = -1;
						} else
						{
							dz = 1;
    13fa:	44 24       	eor	r4, r4
    13fc:	43 94       	inc	r4
    13fe:	51 2c       	mov	r5, r1
						}
					}	
				}
			}
			
			if (crash_y)
    1400:	00 23       	and	r16, r16
    1402:	f1 f1       	breq	.+124    	; 0x1480 <boingboing+0x368>
			{
				if (dx == 0)
    1404:	c1 14       	cp	r12, r1
    1406:	d1 04       	cpc	r13, r1
    1408:	e1 f4       	brne	.+56     	; 0x1442 <boingboing+0x32a>
				{
					if (x == 7)
    140a:	87 e0       	ldi	r24, 0x07	; 7
    140c:	88 16       	cp	r8, r24
    140e:	91 04       	cpc	r9, r1
    1410:	61 f0       	breq	.+24     	; 0x142a <boingboing+0x312>
					{
						dx = -1;
					} else if (x == 0)
    1412:	81 14       	cp	r8, r1
    1414:	91 04       	cpc	r9, r1
    1416:	71 f0       	breq	.+28     	; 0x1434 <boingboing+0x31c>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    1418:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    141c:	80 fd       	sbrc	r24, 0
    141e:	0e c0       	rjmp	.+28     	; 0x143c <boingboing+0x324>
						{
							dx = -1;
    1420:	cc 24       	eor	r12, r12
    1422:	ca 94       	dec	r12
    1424:	dd 24       	eor	r13, r13
    1426:	da 94       	dec	r13
    1428:	0c c0       	rjmp	.+24     	; 0x1442 <boingboing+0x32a>
			{
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    142a:	cc 24       	eor	r12, r12
    142c:	ca 94       	dec	r12
    142e:	dd 24       	eor	r13, r13
    1430:	da 94       	dec	r13
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <boingboing+0x32a>
					} else if (x == 0)
					{
						dx = 1;
    1434:	cc 24       	eor	r12, r12
    1436:	c3 94       	inc	r12
    1438:	d1 2c       	mov	r13, r1
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <boingboing+0x32a>
						if (rand()%2 == 0)
						{
							dx = -1;
						} else
						{
							dx = 1;
    143c:	cc 24       	eor	r12, r12
    143e:	c3 94       	inc	r12
    1440:	d1 2c       	mov	r13, r1
						}
					}
				}
				if (dz == 0)
    1442:	41 14       	cp	r4, r1
    1444:	51 04       	cpc	r5, r1
    1446:	e1 f4       	brne	.+56     	; 0x1480 <boingboing+0x368>
				{
					if (z == 3)
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	a9 16       	cp	r10, r25
    144c:	b1 04       	cpc	r11, r1
    144e:	61 f0       	breq	.+24     	; 0x1468 <boingboing+0x350>
					{
						dz = -1;
					} else if (z == 0)
    1450:	a1 14       	cp	r10, r1
    1452:	b1 04       	cpc	r11, r1
    1454:	71 f0       	breq	.+28     	; 0x1472 <boingboing+0x35a>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    1456:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    145a:	80 fd       	sbrc	r24, 0
    145c:	0e c0       	rjmp	.+28     	; 0x147a <boingboing+0x362>
						{
							dz = -1;
    145e:	44 24       	eor	r4, r4
    1460:	4a 94       	dec	r4
    1462:	55 24       	eor	r5, r5
    1464:	5a 94       	dec	r5
    1466:	0c c0       	rjmp	.+24     	; 0x1480 <boingboing+0x368>
				}
				if (dz == 0)
				{
					if (z == 3)
					{
						dz = -1;
    1468:	44 24       	eor	r4, r4
    146a:	4a 94       	dec	r4
    146c:	55 24       	eor	r5, r5
    146e:	5a 94       	dec	r5
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <boingboing+0x368>
					} else if (z == 0)
					{
						dz = 1;
    1472:	44 24       	eor	r4, r4
    1474:	43 94       	inc	r4
    1476:	51 2c       	mov	r5, r1
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <boingboing+0x368>
						if (rand()%2 == 0)
						{
							dz = -1;
						} else
						{
							dz = 1;
    147a:	44 24       	eor	r4, r4
    147c:	43 94       	inc	r4
    147e:	51 2c       	mov	r5, r1
						}
					}	
				}
			}
			
			if (crash_z)
    1480:	11 23       	and	r17, r17
    1482:	99 f1       	breq	.+102    	; 0x14ea <boingboing+0x3d2>
			{
				if (dy == 0)
    1484:	61 14       	cp	r6, r1
    1486:	71 04       	cpc	r7, r1
    1488:	e1 f4       	brne	.+56     	; 0x14c2 <boingboing+0x3aa>
				{
					if (y == 7)
    148a:	e7 e0       	ldi	r30, 0x07	; 7
    148c:	ee 16       	cp	r14, r30
    148e:	f1 04       	cpc	r15, r1
    1490:	61 f0       	breq	.+24     	; 0x14aa <boingboing+0x392>
					{
						dy = -1;
					} else if (y == 0)
    1492:	e1 14       	cp	r14, r1
    1494:	f1 04       	cpc	r15, r1
    1496:	71 f0       	breq	.+28     	; 0x14b4 <boingboing+0x39c>
					{
						dy = 1;
					} else
					{
						if (rand()%2 == 0)
    1498:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    149c:	80 fd       	sbrc	r24, 0
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <boingboing+0x3a4>
						{
							dy = -1;
    14a0:	66 24       	eor	r6, r6
    14a2:	6a 94       	dec	r6
    14a4:	77 24       	eor	r7, r7
    14a6:	7a 94       	dec	r7
    14a8:	0c c0       	rjmp	.+24     	; 0x14c2 <boingboing+0x3aa>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    14aa:	66 24       	eor	r6, r6
    14ac:	6a 94       	dec	r6
    14ae:	77 24       	eor	r7, r7
    14b0:	7a 94       	dec	r7
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <boingboing+0x3aa>
					} else if (y == 0)
					{
						dy = 1;
    14b4:	66 24       	eor	r6, r6
    14b6:	63 94       	inc	r6
    14b8:	71 2c       	mov	r7, r1
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <boingboing+0x3aa>
						if (rand()%2 == 0)
						{
							dy = -1;
						} else
						{
							dy = 1;
    14bc:	66 24       	eor	r6, r6
    14be:	63 94       	inc	r6
    14c0:	71 2c       	mov	r7, r1
						}
					}	
				}
				if (dx == 0)
    14c2:	c1 14       	cp	r12, r1
    14c4:	d1 04       	cpc	r13, r1
    14c6:	89 f4       	brne	.+34     	; 0x14ea <boingboing+0x3d2>
				{
					if (x == 7)
    14c8:	f7 e0       	ldi	r31, 0x07	; 7
    14ca:	8f 16       	cp	r8, r31
    14cc:	91 04       	cpc	r9, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <boingboing+0x3ba>
    14d0:	0c c1       	rjmp	.+536    	; 0x16ea <boingboing+0x5d2>
					{
						dx = -1;
					} else if (x == 0)
    14d2:	81 14       	cp	r8, r1
    14d4:	91 04       	cpc	r9, r1
    14d6:	69 f0       	breq	.+26     	; 0x14f2 <boingboing+0x3da>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    14d8:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    14dc:	80 fd       	sbrc	r24, 0
    14de:	0a c1       	rjmp	.+532    	; 0x16f4 <boingboing+0x5dc>
						{
							dx = -1;
    14e0:	cc 24       	eor	r12, r12
    14e2:	ca 94       	dec	r12
    14e4:	dd 24       	eor	r13, r13
    14e6:	da 94       	dec	r13
    14e8:	1e c0       	rjmp	.+60     	; 0x1526 <boingboing+0x40e>
		}
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
    14ea:	81 14       	cp	r8, r1
    14ec:	91 04       	cpc	r9, r1
    14ee:	d9 f4       	brne	.+54     	; 0x1526 <boingboing+0x40e>
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <boingboing+0x3e0>
					if (x == 7)
					{
						dx = -1;
					} else if (x == 0)
					{
						dx = 1;
    14f2:	cc 24       	eor	r12, r12
    14f4:	c3 94       	inc	r12
    14f6:	d1 2c       	mov	r13, r1
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
				(x == 0 && y == 0 && z == 0) ||
    14f8:	e1 14       	cp	r14, r1
    14fa:	f1 04       	cpc	r15, r1
    14fc:	41 f4       	brne	.+16     	; 0x150e <boingboing+0x3f6>
    14fe:	a1 14       	cp	r10, r1
    1500:	b1 04       	cpc	r11, r1
    1502:	59 f1       	breq	.+86     	; 0x155a <boingboing+0x442>
    1504:	27 e0       	ldi	r18, 0x07	; 7
    1506:	a2 16       	cp	r10, r18
    1508:	b1 04       	cpc	r11, r1
    150a:	e9 f5       	brne	.+122    	; 0x1586 <boingboing+0x46e>
    150c:	26 c0       	rjmp	.+76     	; 0x155a <boingboing+0x442>
				(x == 0 && y == 0 && z == 7) ||
				(x == 0 && y == 7 && z == 0) ||
    150e:	37 e0       	ldi	r19, 0x07	; 7
    1510:	e3 16       	cp	r14, r19
    1512:	f1 04       	cpc	r15, r1
    1514:	c1 f5       	brne	.+112    	; 0x1586 <boingboing+0x46e>
    1516:	a1 14       	cp	r10, r1
    1518:	b1 04       	cpc	r11, r1
    151a:	f9 f0       	breq	.+62     	; 0x155a <boingboing+0x442>
				(x == 0 && y == 7 && z == 7) ||
    151c:	87 e0       	ldi	r24, 0x07	; 7
    151e:	a8 16       	cp	r10, r24
    1520:	b1 04       	cpc	r11, r1
    1522:	89 f5       	brne	.+98     	; 0x1586 <boingboing+0x46e>
    1524:	1a c0       	rjmp	.+52     	; 0x155a <boingboing+0x442>
    1526:	97 e0       	ldi	r25, 0x07	; 7
    1528:	89 16       	cp	r8, r25
    152a:	91 04       	cpc	r9, r1
    152c:	61 f5       	brne	.+88     	; 0x1586 <boingboing+0x46e>
				(x == 7 && y == 0 && z == 0) ||
    152e:	e1 14       	cp	r14, r1
    1530:	f1 04       	cpc	r15, r1
    1532:	41 f4       	brne	.+16     	; 0x1544 <boingboing+0x42c>
    1534:	a1 14       	cp	r10, r1
    1536:	b1 04       	cpc	r11, r1
    1538:	81 f0       	breq	.+32     	; 0x155a <boingboing+0x442>
				(x == 7 && y == 0 && z == 7) ||
    153a:	e7 e0       	ldi	r30, 0x07	; 7
    153c:	ae 16       	cp	r10, r30
    153e:	b1 04       	cpc	r11, r1
    1540:	79 f5       	brne	.+94     	; 0x15a0 <boingboing+0x488>
    1542:	0b c0       	rjmp	.+22     	; 0x155a <boingboing+0x442>
				(x == 7 && y == 7 && z == 0) ||
    1544:	f7 e0       	ldi	r31, 0x07	; 7
    1546:	ef 16       	cp	r14, r31
    1548:	f1 04       	cpc	r15, r1
    154a:	89 f5       	brne	.+98     	; 0x15ae <boingboing+0x496>
    154c:	a1 14       	cp	r10, r1
    154e:	b1 04       	cpc	r11, r1
    1550:	21 f0       	breq	.+8      	; 0x155a <boingboing+0x442>
				(x == 7 && y == 7 && z == 7)
    1552:	27 e0       	ldi	r18, 0x07	; 7
    1554:	a2 16       	cp	r10, r18
    1556:	b1 04       	cpc	r11, r1
    1558:	51 f5       	brne	.+84     	; 0x15ae <boingboing+0x496>
				// and the exact opposite corner
				// We don't want that!
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
    155a:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    155e:	63 e0       	ldi	r22, 0x03	; 3
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
				if (lol == 0)
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	31 f0       	breq	.+12     	; 0x1576 <boingboing+0x45e>
					dx = 0;
				
				if (lol == 1)
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	31 f0       	breq	.+12     	; 0x157c <boingboing+0x464>
					dy = 0;
					
				if (lol == 2)
    1570:	02 97       	sbiw	r24, 0x02	; 2
    1572:	39 f0       	breq	.+14     	; 0x1582 <boingboing+0x46a>
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <boingboing+0x46e>
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
				if (lol == 0)
					dx = 0;
    1576:	c1 2c       	mov	r12, r1
    1578:	d1 2c       	mov	r13, r1
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <boingboing+0x46e>
				
				if (lol == 1)
					dy = 0;
    157c:	61 2c       	mov	r6, r1
    157e:	71 2c       	mov	r7, r1
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <boingboing+0x46e>
					
				if (lol == 2)
					dz = 0;
    1582:	41 2c       	mov	r4, r1
    1584:	51 2c       	mov	r5, r1
			}
		}

        // one last sanity check
        if (x == 0 && dx == -1)
    1586:	81 14       	cp	r8, r1
    1588:	91 04       	cpc	r9, r1
    158a:	39 f4       	brne	.+14     	; 0x159a <boingboing+0x482>
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	c3 16       	cp	r12, r19
    1590:	d3 06       	cpc	r13, r19
    1592:	19 f4       	brne	.+6      	; 0x159a <boingboing+0x482>
            dx = 1;
    1594:	cc 24       	eor	r12, r12
    1596:	c3 94       	inc	r12
    1598:	d1 2c       	mov	r13, r1
	
        if (y == 0 && dy == -1)
    159a:	e1 14       	cp	r14, r1
    159c:	f1 04       	cpc	r15, r1
    159e:	39 f4       	brne	.+14     	; 0x15ae <boingboing+0x496>
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	68 16       	cp	r6, r24
    15a4:	78 06       	cpc	r7, r24
    15a6:	19 f4       	brne	.+6      	; 0x15ae <boingboing+0x496>
            dy = 1;
    15a8:	66 24       	eor	r6, r6
    15aa:	63 94       	inc	r6
    15ac:	71 2c       	mov	r7, r1
	
        if (z == 0 && dz == -1)
    15ae:	a1 14       	cp	r10, r1
    15b0:	b1 04       	cpc	r11, r1
    15b2:	39 f4       	brne	.+14     	; 0x15c2 <boingboing+0x4aa>
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	49 16       	cp	r4, r25
    15b8:	59 06       	cpc	r5, r25
    15ba:	19 f4       	brne	.+6      	; 0x15c2 <boingboing+0x4aa>
            dz = 1;
    15bc:	44 24       	eor	r4, r4
    15be:	43 94       	inc	r4
    15c0:	51 2c       	mov	r5, r1
	
        if (x == 7 && dx == 1)
    15c2:	e7 e0       	ldi	r30, 0x07	; 7
    15c4:	8e 16       	cp	r8, r30
    15c6:	91 04       	cpc	r9, r1
    15c8:	41 f4       	brne	.+16     	; 0x15da <boingboing+0x4c2>
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	cf 16       	cp	r12, r31
    15ce:	d1 04       	cpc	r13, r1
    15d0:	21 f4       	brne	.+8      	; 0x15da <boingboing+0x4c2>
            dx = -1;
    15d2:	cc 24       	eor	r12, r12
    15d4:	ca 94       	dec	r12
    15d6:	dd 24       	eor	r13, r13
    15d8:	da 94       	dec	r13
	
        if (y == 7 && dy == 1)
    15da:	27 e0       	ldi	r18, 0x07	; 7
    15dc:	e2 16       	cp	r14, r18
    15de:	f1 04       	cpc	r15, r1
    15e0:	41 f4       	brne	.+16     	; 0x15f2 <boingboing+0x4da>
    15e2:	31 e0       	ldi	r19, 0x01	; 1
    15e4:	63 16       	cp	r6, r19
    15e6:	71 04       	cpc	r7, r1
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <boingboing+0x4da>
            dy = -1;
    15ea:	66 24       	eor	r6, r6
    15ec:	6a 94       	dec	r6
    15ee:	77 24       	eor	r7, r7
    15f0:	7a 94       	dec	r7
	
        if (z == 7 && dz == 1)
    15f2:	87 e0       	ldi	r24, 0x07	; 7
    15f4:	a8 16       	cp	r10, r24
    15f6:	b1 04       	cpc	r11, r1
    15f8:	41 f4       	brne	.+16     	; 0x160a <boingboing+0x4f2>
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	49 16       	cp	r4, r25
    15fe:	51 04       	cpc	r5, r1
    1600:	21 f4       	brne	.+8      	; 0x160a <boingboing+0x4f2>
            dz = -1;
    1602:	44 24       	eor	r4, r4
    1604:	4a 94       	dec	r4
    1606:	55 24       	eor	r5, r5
    1608:	5a 94       	dec	r5
	
	
		// Finally, move the voxel.
		x = x + dx;
    160a:	8c 0c       	add	r8, r12
    160c:	9d 1c       	adc	r9, r13
		y = y + dy;
    160e:	e6 0c       	add	r14, r6
    1610:	f7 1c       	adc	r15, r7
		z = z + dz;
    1612:	a4 0c       	add	r10, r4
    1614:	b5 1c       	adc	r11, r5
		
		if (drawmode == 0x01) // show one voxel at time
    1616:	eb a9       	ldd	r30, Y+51	; 0x33
    1618:	e1 30       	cpi	r30, 0x01	; 1
    161a:	79 f4       	brne	.+30     	; 0x163a <boingboing+0x522>
		{
			setvoxel(x,y,z);
    161c:	a5 01       	movw	r20, r10
    161e:	b7 01       	movw	r22, r14
    1620:	c4 01       	movw	r24, r8
    1622:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
			delay_ms(delay);
    1626:	8f a9       	ldd	r24, Y+55	; 0x37
    1628:	98 ad       	ldd	r25, Y+56	; 0x38
    162a:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			clrvoxel(x,y,z);	
    162e:	a5 01       	movw	r20, r10
    1630:	b7 01       	movw	r22, r14
    1632:	c4 01       	movw	r24, r8
    1634:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
    1638:	4e c0       	rjmp	.+156    	; 0x16d6 <boingboing+0x5be>
		} else if (drawmode == 0x02) // flip the voxel in question
    163a:	fb a9       	ldd	r31, Y+51	; 0x33
    163c:	f2 30       	cpi	r31, 0x02	; 2
    163e:	51 f4       	brne	.+20     	; 0x1654 <boingboing+0x53c>
		{
			flpvoxel(x,y,z);
    1640:	a5 01       	movw	r20, r10
    1642:	b7 01       	movw	r22, r14
    1644:	c4 01       	movw	r24, r8
    1646:	0e 94 04 01 	call	0x208	; 0x208 <flpvoxel>
			delay_ms(delay);
    164a:	8f a9       	ldd	r24, Y+55	; 0x37
    164c:	98 ad       	ldd	r25, Y+56	; 0x38
    164e:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
    1652:	41 c0       	rjmp	.+130    	; 0x16d6 <boingboing+0x5be>
		} if (drawmode == 0x03) // draw a snake
    1654:	2b a9       	ldd	r18, Y+51	; 0x33
    1656:	23 30       	cpi	r18, 0x03	; 3
    1658:	f1 f5       	brne	.+124    	; 0x16d6 <boingboing+0x5be>
    165a:	fe 01       	movw	r30, r28
    165c:	b5 96       	adiw	r30, 0x25	; 37
    165e:	29 ad       	ldd	r18, Y+57	; 0x39
    1660:	3a ad       	ldd	r19, Y+58	; 0x3a
		{
			for (i=7;i>=0;i--)
			{
				snake[i][0] = snake[i-1][0];
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	97 83       	std	Z+7, r25	; 0x07
    1668:	86 83       	std	Z+6, r24	; 0x06
				snake[i][1] = snake[i-1][1];
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	91 87       	std	Z+9, r25	; 0x09
    1670:	80 87       	std	Z+8, r24	; 0x08
				snake[i][2] = snake[i-1][2];
    1672:	84 81       	ldd	r24, Z+4	; 0x04
    1674:	95 81       	ldd	r25, Z+5	; 0x05
    1676:	93 87       	std	Z+11, r25	; 0x0b
    1678:	82 87       	std	Z+10, r24	; 0x0a
    167a:	36 97       	sbiw	r30, 0x06	; 6
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
    167c:	e2 17       	cp	r30, r18
    167e:	f3 07       	cpc	r31, r19
    1680:	81 f7       	brne	.-32     	; 0x1662 <boingboing+0x54a>
			{
				snake[i][0] = snake[i-1][0];
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
    1682:	9a 82       	std	Y+2, r9	; 0x02
    1684:	89 82       	std	Y+1, r8	; 0x01
			snake[0][1] = y;
    1686:	fc 82       	std	Y+4, r15	; 0x04
    1688:	eb 82       	std	Y+3, r14	; 0x03
			snake[0][2] = z;
    168a:	be 82       	std	Y+6, r11	; 0x06
    168c:	ad 82       	std	Y+5, r10	; 0x05
    168e:	0d a9       	ldd	r16, Y+53	; 0x35
    1690:	1e a9       	ldd	r17, Y+54	; 0x36
				
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
    1692:	f8 01       	movw	r30, r16
    1694:	44 81       	ldd	r20, Z+4	; 0x04
    1696:	55 81       	ldd	r21, Z+5	; 0x05
    1698:	62 81       	ldd	r22, Z+2	; 0x02
    169a:	73 81       	ldd	r23, Z+3	; 0x03
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    16a4:	0a 5f       	subi	r16, 0xFA	; 250
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
				
			for (i=0;i<8;i++)
    16a8:	20 16       	cp	r2, r16
    16aa:	31 06       	cpc	r3, r17
    16ac:	91 f7       	brne	.-28     	; 0x1692 <boingboing+0x57a>
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
    16ae:	8f a9       	ldd	r24, Y+55	; 0x37
    16b0:	98 ad       	ldd	r25, Y+56	; 0x38
    16b2:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
    16b6:	0d a9       	ldd	r16, Y+53	; 0x35
    16b8:	1e a9       	ldd	r17, Y+54	; 0x36
			for (i=0;i<8;i++)
			{
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
    16ba:	f8 01       	movw	r30, r16
    16bc:	44 81       	ldd	r20, Z+4	; 0x04
    16be:	55 81       	ldd	r21, Z+5	; 0x05
    16c0:	62 81       	ldd	r22, Z+2	; 0x02
    16c2:	73 81       	ldd	r23, Z+3	; 0x03
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
    16cc:	0a 5f       	subi	r16, 0xFA	; 250
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
			for (i=0;i<8;i++)
    16d0:	02 15       	cp	r16, r2
    16d2:	13 05       	cpc	r17, r3
    16d4:	91 f7       	brne	.-28     	; 0x16ba <boingboing+0x5a2>
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
		}
		
	
		iterations--;
    16d6:	29 a9       	ldd	r18, Y+49	; 0x31
    16d8:	3a a9       	ldd	r19, Y+50	; 0x32
    16da:	21 50       	subi	r18, 0x01	; 1
    16dc:	31 09       	sbc	r19, r1
    16de:	3a ab       	std	Y+50, r19	; 0x32
    16e0:	29 ab       	std	Y+49, r18	; 0x31
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    16e2:	23 2b       	or	r18, r19
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <boingboing+0x5d0>
    16e6:	81 cd       	rjmp	.-1278   	; 0x11ea <boingboing+0xd2>
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <boingboing+0x5e4>
				}
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    16ea:	cc 24       	eor	r12, r12
    16ec:	ca 94       	dec	r12
    16ee:	dd 24       	eor	r13, r13
    16f0:	da 94       	dec	r13
    16f2:	19 cf       	rjmp	.-462    	; 0x1526 <boingboing+0x40e>
						if (rand()%2 == 0)
						{
							dx = -1;
						} else
						{
							dx = 1;
    16f4:	cc 24       	eor	r12, r12
    16f6:	c3 94       	inc	r12
    16f8:	d1 2c       	mov	r13, r1
    16fa:	15 cf       	rjmp	.-470    	; 0x1526 <boingboing+0x40e>
		}
		
	
		iterations--;
	}
}
    16fc:	ea 96       	adiw	r28, 0x3a	; 58
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	6f 90       	pop	r6
    1724:	5f 90       	pop	r5
    1726:	4f 90       	pop	r4
    1728:	3f 90       	pop	r3
    172a:	2f 90       	pop	r2
    172c:	08 95       	ret

0000172e <effect_random_filler>:

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    172e:	8f 92       	push	r8
    1730:	9f 92       	push	r9
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	7c 01       	movw	r14, r24
    1748:	eb 01       	movw	r28, r22
	int x,y,z;
	int loop = 0;
	
	
	if (state == 1)
    174a:	61 30       	cpi	r22, 0x01	; 1
    174c:	71 05       	cpc	r23, r1
    174e:	21 f4       	brne	.+8      	; 0x1758 <effect_random_filler+0x2a>
	{
		fill(0x00);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    1756:	55 c0       	rjmp	.+170    	; 0x1802 <effect_random_filler+0xd4>
	} else
	{
		fill(0xff);
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    175e:	51 c0       	rjmp	.+162    	; 0x1802 <effect_random_filler+0xd4>
	}
	
	while (loop<511)
	{
		x = rand()%8;
    1760:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1764:	87 70       	andi	r24, 0x07	; 7
    1766:	90 78       	andi	r25, 0x80	; 128
    1768:	99 23       	and	r25, r25
    176a:	24 f4       	brge	.+8      	; 0x1774 <effect_random_filler+0x46>
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	88 6f       	ori	r24, 0xF8	; 248
    1770:	9f 6f       	ori	r25, 0xFF	; 255
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	c8 2e       	mov	r12, r24
    1776:	d9 2e       	mov	r13, r25
		y = rand()%8;
    1778:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    177c:	87 70       	andi	r24, 0x07	; 7
    177e:	90 78       	andi	r25, 0x80	; 128
    1780:	99 23       	and	r25, r25
    1782:	24 f4       	brge	.+8      	; 0x178c <effect_random_filler+0x5e>
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	88 6f       	ori	r24, 0xF8	; 248
    1788:	9f 6f       	ori	r25, 0xFF	; 255
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	a8 2e       	mov	r10, r24
    178e:	b9 2e       	mov	r11, r25
		z = rand()%8;
    1790:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1794:	87 70       	andi	r24, 0x07	; 7
    1796:	90 78       	andi	r25, 0x80	; 128
    1798:	99 23       	and	r25, r25
    179a:	24 f4       	brge	.+8      	; 0x17a4 <effect_random_filler+0x76>
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	88 6f       	ori	r24, 0xF8	; 248
    17a0:	9f 6f       	ori	r25, 0xFF	; 255
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	88 2e       	mov	r8, r24
    17a6:	99 2e       	mov	r9, r25

		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00))
    17a8:	20 97       	sbiw	r28, 0x00	; 0
    17aa:	51 f4       	brne	.+20     	; 0x17c0 <effect_random_filler+0x92>
    17ac:	ac 01       	movw	r20, r24
    17ae:	6a 2d       	mov	r22, r10
    17b0:	7b 2d       	mov	r23, r11
    17b2:	8c 2d       	mov	r24, r12
    17b4:	9d 2d       	mov	r25, r13
    17b6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <getvoxel>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	e1 f4       	brne	.+56     	; 0x17f6 <effect_random_filler+0xc8>
    17be:	0d c0       	rjmp	.+26     	; 0x17da <effect_random_filler+0xac>
    17c0:	c1 30       	cpi	r28, 0x01	; 1
    17c2:	d1 05       	cpc	r29, r1
    17c4:	c1 f4       	brne	.+48     	; 0x17f6 <effect_random_filler+0xc8>
    17c6:	48 2f       	mov	r20, r24
    17c8:	59 2f       	mov	r21, r25
    17ca:	6a 2d       	mov	r22, r10
    17cc:	7b 2d       	mov	r23, r11
    17ce:	8c 2d       	mov	r24, r12
    17d0:	9d 2d       	mov	r25, r13
    17d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <getvoxel>
    17d6:	81 11       	cpse	r24, r1
    17d8:	0e c0       	rjmp	.+28     	; 0x17f6 <effect_random_filler+0xc8>
		{
			altervoxel(x,y,z,state);
    17da:	9e 01       	movw	r18, r28
    17dc:	48 2d       	mov	r20, r8
    17de:	59 2d       	mov	r21, r9
    17e0:	6a 2d       	mov	r22, r10
    17e2:	7b 2d       	mov	r23, r11
    17e4:	8c 2d       	mov	r24, r12
    17e6:	9d 2d       	mov	r25, r13
    17e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <altervoxel>
			delay_ms(delay);
    17ec:	c7 01       	movw	r24, r14
    17ee:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			loop++;
    17f2:	0f 5f       	subi	r16, 0xFF	; 255
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
	} else
	{
		fill(0xff);
	}
	
	while (loop<511)
    17f6:	0f 3f       	cpi	r16, 0xFF	; 255
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	18 07       	cpc	r17, r24
    17fc:	0c f4       	brge	.+2      	; 0x1800 <effect_random_filler+0xd2>
    17fe:	b0 cf       	rjmp	.-160    	; 0x1760 <effect_random_filler+0x32>
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <effect_random_filler+0xda>
	}
}

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    1802:	00 e0       	ldi	r16, 0x00	; 0
    1804:	10 e0       	ldi	r17, 0x00	; 0
    1806:	ac cf       	rjmp	.-168    	; 0x1760 <effect_random_filler+0x32>
			altervoxel(x,y,z,state);
			delay_ms(delay);
			loop++;
		}	
	}
}
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	08 95       	ret

00001822 <effect_rain>:


void effect_rain (int iterations)
{
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	bf 92       	push	r11
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	6c 01       	movw	r12, r24
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    183c:	18 16       	cp	r1, r24
    183e:	19 06       	cpc	r1, r25
    1840:	0c f0       	brlt	.+2      	; 0x1844 <effect_rain+0x22>
    1842:	45 c0       	rjmp	.+138    	; 0x18ce <effect_rain+0xac>
    1844:	e1 2c       	mov	r14, r1
    1846:	f1 2c       	mov	r15, r1
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    1848:	81 2c       	mov	r8, r1
    184a:	91 2c       	mov	r9, r1
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
    184c:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1850:	83 70       	andi	r24, 0x03	; 3
    1852:	90 78       	andi	r25, 0x80	; 128
    1854:	99 23       	and	r25, r25
    1856:	24 f4       	brge	.+8      	; 0x1860 <effect_rain+0x3e>
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	8c 6f       	ori	r24, 0xFC	; 252
    185c:	9f 6f       	ori	r25, 0xFF	; 255
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	8c 01       	movw	r16, r24
		
		for (i=0; i < rnd_num;i++)
    1862:	18 16       	cp	r1, r24
    1864:	19 06       	cpc	r1, r25
    1866:	1c f5       	brge	.+70     	; 0x18ae <effect_rain+0x8c>
    1868:	c8 2d       	mov	r28, r8
    186a:	d9 2d       	mov	r29, r9
		{
			rnd_x = rand()%8;
    186c:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1870:	5c 01       	movw	r10, r24
			rnd_y = rand()%8;
    1872:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1876:	bc 01       	movw	r22, r24
    1878:	67 70       	andi	r22, 0x07	; 7
    187a:	70 78       	andi	r23, 0x80	; 128
    187c:	77 23       	and	r23, r23
    187e:	34 f4       	brge	.+12     	; 0x188c <effect_rain+0x6a>
    1880:	61 50       	subi	r22, 0x01	; 1
    1882:	71 09       	sbc	r23, r1
    1884:	68 6f       	ori	r22, 0xF8	; 248
    1886:	7f 6f       	ori	r23, 0xFF	; 255
    1888:	6f 5f       	subi	r22, 0xFF	; 255
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%8;
    188c:	c5 01       	movw	r24, r10
    188e:	87 70       	andi	r24, 0x07	; 7
    1890:	90 78       	andi	r25, 0x80	; 128
    1892:	99 23       	and	r25, r25
    1894:	24 f4       	brge	.+8      	; 0x189e <effect_rain+0x7c>
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	88 6f       	ori	r24, 0xF8	; 248
    189a:	9f 6f       	ori	r25, 0xFF	; 255
    189c:	01 96       	adiw	r24, 0x01	; 1
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
    189e:	47 e0       	ldi	r20, 0x07	; 7
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	c0 17       	cp	r28, r16
    18aa:	d1 07       	cpc	r29, r17
    18ac:	f9 f6       	brne	.-66     	; 0x186c <effect_rain+0x4a>
			rnd_x = rand()%8;
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
		}
		
		delay_ms(1000);
    18ae:	88 ee       	ldi	r24, 0xE8	; 232
    18b0:	93 e0       	ldi	r25, 0x03	; 3
    18b2:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		shift(AXIS_Z,-1);
    18b6:	6f ef       	ldi	r22, 0xFF	; 255
    18b8:	7f ef       	ldi	r23, 0xFF	; 255
    18ba:	8a e7       	ldi	r24, 0x7A	; 122
    18bc:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	e8 1a       	sub	r14, r24
    18c4:	f8 0a       	sbc	r15, r24
    18c6:	ec 14       	cp	r14, r12
    18c8:	fd 04       	cpc	r15, r13
    18ca:	09 f0       	breq	.+2      	; 0x18ce <effect_rain+0xac>
    18cc:	bf cf       	rjmp	.-130    	; 0x184c <effect_rain+0x2a>
		}
		
		delay_ms(1000);
		shift(AXIS_Z,-1);
	}
}
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	bf 90       	pop	r11
    18e0:	af 90       	pop	r10
    18e2:	9f 90       	pop	r9
    18e4:	8f 90       	pop	r8
    18e6:	08 95       	ret

000018e8 <draw_positions_axis>:
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    18e8:	4f 92       	push	r4
    18ea:	5f 92       	push	r5
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	18 2f       	mov	r17, r24
    1904:	d6 2f       	mov	r29, r22
    1906:	c7 2f       	mov	r28, r23
    1908:	2a 01       	movw	r4, r20
	int x, y, p;
	
	fill(0x00);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    1910:	ad 2e       	mov	r10, r29
    1912:	bc 2e       	mov	r11, r28
	
	for (x=0; x<8; x++)
    1914:	e1 2c       	mov	r14, r1
    1916:	f1 2c       	mov	r15, r1
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    1918:	71 2c       	mov	r7, r1
    191a:	81 2c       	mov	r8, r1
	{
		for (y=0; y<8; y++)
		{
			if (invert)
			{
				p = (7-positions[(x*8)+y]);
    191c:	0f 2e       	mov	r0, r31
    191e:	f7 e0       	ldi	r31, 0x07	; 7
    1920:	cf 2e       	mov	r12, r31
    1922:	d1 2c       	mov	r13, r1
    1924:	f0 2d       	mov	r31, r0
    1926:	36 c0       	rjmp	.+108    	; 0x1994 <draw_positions_axis+0xac>
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
		{
			if (invert)
    1928:	41 14       	cp	r4, r1
    192a:	51 04       	cpc	r5, r1
    192c:	49 f0       	breq	.+18     	; 0x1940 <draw_positions_axis+0x58>
    192e:	f5 01       	movw	r30, r10
    1930:	ec 0f       	add	r30, r28
    1932:	fd 1f       	adc	r31, r29
			{
				p = (7-positions[(x*8)+y]);
    1934:	80 81       	ld	r24, Z
    1936:	96 01       	movw	r18, r12
    1938:	28 1b       	sub	r18, r24
    193a:	31 09       	sbc	r19, r1
    193c:	c9 01       	movw	r24, r18
    193e:	06 c0       	rjmp	.+12     	; 0x194c <draw_positions_axis+0x64>
    1940:	f5 01       	movw	r30, r10
    1942:	ec 0f       	add	r30, r28
    1944:	fd 1f       	adc	r31, r29
			} else
			{
				p = positions[(x*8)+y];
    1946:	20 81       	ld	r18, Z
    1948:	82 2f       	mov	r24, r18
    194a:	90 e0       	ldi	r25, 0x00	; 0
			}
		
			if (axis == AXIS_Z)
    194c:	1a 37       	cpi	r17, 0x7A	; 122
    194e:	31 f4       	brne	.+12     	; 0x195c <draw_positions_axis+0x74>
				setvoxel(x,y,p);
    1950:	ac 01       	movw	r20, r24
    1952:	be 01       	movw	r22, r28
    1954:	c7 01       	movw	r24, r14
    1956:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    195a:	0e c0       	rjmp	.+28     	; 0x1978 <draw_positions_axis+0x90>
				
			if (axis == AXIS_Y)
    195c:	19 37       	cpi	r17, 0x79	; 121
    195e:	31 f4       	brne	.+12     	; 0x196c <draw_positions_axis+0x84>
				setvoxel(x,p,y);
    1960:	ae 01       	movw	r20, r28
    1962:	bc 01       	movw	r22, r24
    1964:	c7 01       	movw	r24, r14
    1966:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <draw_positions_axis+0x90>
				
			if (axis == AXIS_X)
    196c:	18 37       	cpi	r17, 0x78	; 120
    196e:	21 f4       	brne	.+8      	; 0x1978 <draw_positions_axis+0x90>
				setvoxel(p,y,x);
    1970:	a7 01       	movw	r20, r14
    1972:	be 01       	movw	r22, r28
    1974:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
	
	fill(0x00);
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
    1978:	21 96       	adiw	r28, 0x01	; 1
    197a:	c8 30       	cpi	r28, 0x08	; 8
    197c:	d1 05       	cpc	r29, r1
    197e:	a1 f6       	brne	.-88     	; 0x1928 <draw_positions_axis+0x40>
{
	int x, y, p;
	
	fill(0x00);
	
	for (x=0; x<8; x++)
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	e3 1a       	sub	r14, r19
    1984:	f3 0a       	sbc	r15, r19
    1986:	88 e0       	ldi	r24, 0x08	; 8
    1988:	a8 0e       	add	r10, r24
    198a:	b1 1c       	adc	r11, r1
    198c:	28 e0       	ldi	r18, 0x08	; 8
    198e:	e2 16       	cp	r14, r18
    1990:	f1 04       	cpc	r15, r1
    1992:	19 f0       	breq	.+6      	; 0x199a <draw_positions_axis+0xb2>
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    1994:	c7 2d       	mov	r28, r7
    1996:	d8 2d       	mov	r29, r8
    1998:	c7 cf       	rjmp	.-114    	; 0x1928 <draw_positions_axis+0x40>
			if (axis == AXIS_X)
				setvoxel(p,y,x);
		}
	}
	
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	df 90       	pop	r13
    19a6:	cf 90       	pop	r12
    19a8:	bf 90       	pop	r11
    19aa:	af 90       	pop	r10
    19ac:	8f 90       	pop	r8
    19ae:	7f 90       	pop	r7
    19b0:	5f 90       	pop	r5
    19b2:	4f 90       	pop	r4
    19b4:	08 95       	ret

000019b6 <effect_axis_updown_randsuspend>:
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    19b6:	3f 92       	push	r3
    19b8:	4f 92       	push	r4
    19ba:	5f 92       	push	r5
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	8f 92       	push	r8
    19c2:	9f 92       	push	r9
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	c6 58       	subi	r28, 0x86	; 134
    19de:	d1 09       	sbc	r29, r1
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	98 2e       	mov	r9, r24
    19ec:	86 2e       	mov	r8, r22
    19ee:	77 2e       	mov	r7, r23
    19f0:	cb 57       	subi	r28, 0x7B	; 123
    19f2:	df 4f       	sbci	r29, 0xFF	; 255
    19f4:	59 83       	std	Y+1, r21	; 0x01
    19f6:	48 83       	st	Y, r20
    19f8:	c5 58       	subi	r28, 0x85	; 133
    19fa:	d0 40       	sbci	r29, 0x00	; 0
    19fc:	59 01       	movw	r10, r18
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	cd 57       	subi	r28, 0x7D	; 125
    1a04:	df 4f       	sbci	r29, 0xFF	; 255
    1a06:	99 83       	std	Y+1, r25	; 0x01
    1a08:	88 83       	st	Y, r24
    1a0a:	c3 58       	subi	r28, 0x83	; 131
    1a0c:	d0 40       	sbci	r29, 0x00	; 0
    1a0e:	de 01       	movw	r26, r28
    1a10:	af 5b       	subi	r26, 0xBF	; 191
    1a12:	bf 4f       	sbci	r27, 0xFF	; 255
    1a14:	cf 57       	subi	r28, 0x7F	; 127
    1a16:	df 4f       	sbci	r29, 0xFF	; 255
    1a18:	b9 83       	std	Y+1, r27	; 0x01
    1a1a:	a8 83       	st	Y, r26
    1a1c:	c1 58       	subi	r28, 0x81	; 129
    1a1e:	d0 40       	sbci	r29, 0x00	; 0
    1a20:	8d 01       	movw	r16, r26
    1a22:	6d 01       	movw	r12, r26
    1a24:	7c 01       	movw	r14, r24
	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    1a26:	d7 01       	movw	r26, r14
    1a28:	1d 92       	st	X+, r1
    1a2a:	7d 01       	movw	r14, r26
		destinations[i] = rand()%8;
    1a2c:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1a30:	87 70       	andi	r24, 0x07	; 7
    1a32:	90 78       	andi	r25, 0x80	; 128
    1a34:	99 23       	and	r25, r25
    1a36:	24 f4       	brge	.+8      	; 0x1a40 <effect_axis_updown_randsuspend+0x8a>
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	88 6f       	ori	r24, 0xF8	; 248
    1a3c:	9f 6f       	ori	r25, 0xFF	; 255
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	f6 01       	movw	r30, r12
    1a42:	81 93       	st	Z+, r24
    1a44:	6f 01       	movw	r12, r30
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    1a46:	e0 16       	cp	r14, r16
    1a48:	f1 06       	cpc	r15, r17
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <effect_axis_updown_randsuspend+0x70>
    1a4c:	68 94       	set
    1a4e:	ee 24       	eor	r14, r14
    1a50:	e3 f8       	bld	r14, 3
    1a52:	f1 2c       	mov	r15, r1
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    1a54:	cf 57       	subi	r28, 0x7F	; 127
    1a56:	df 4f       	sbci	r29, 0xFF	; 255
    1a58:	38 80       	ld	r3, Y
    1a5a:	c1 58       	subi	r28, 0x81	; 129
    1a5c:	d0 40       	sbci	r29, 0x00	; 0
    1a5e:	ce 57       	subi	r28, 0x7E	; 126
    1a60:	df 4f       	sbci	r29, 0xFF	; 255
    1a62:	48 80       	ld	r4, Y
    1a64:	c2 58       	subi	r28, 0x82	; 130
    1a66:	d0 40       	sbci	r29, 0x00	; 0
    1a68:	cd 57       	subi	r28, 0x7D	; 125
    1a6a:	df 4f       	sbci	r29, 0xFF	; 255
    1a6c:	58 80       	ld	r5, Y
    1a6e:	c3 58       	subi	r28, 0x83	; 131
    1a70:	d0 40       	sbci	r29, 0x00	; 0
    1a72:	cc 57       	subi	r28, 0x7C	; 124
    1a74:	df 4f       	sbci	r29, 0xFF	; 255
    1a76:	68 80       	ld	r6, Y
    1a78:	c4 58       	subi	r28, 0x84	; 132
    1a7a:	d0 40       	sbci	r29, 0x00	; 0
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
    1a7c:	c8 2c       	mov	r12, r8
    1a7e:	d7 2c       	mov	r13, r7
    1a80:	1d c0       	rjmp	.+58     	; 0x1abc <effect_axis_updown_randsuspend+0x106>
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    1a82:	80 81       	ld	r24, Z
    1a84:	9d 91       	ld	r25, X+
    1a86:	89 17       	cp	r24, r25
    1a88:	10 f4       	brcc	.+4      	; 0x1a8e <effect_axis_updown_randsuspend+0xd8>
			{
				positions[px]++;
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	80 83       	st	Z, r24
    1a8e:	31 96       	adiw	r30, 0x01	; 1

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
    1a90:	e0 17       	cp	r30, r16
    1a92:	f1 07       	cpc	r31, r17
    1a94:	b1 f7       	brne	.-20     	; 0x1a82 <effect_axis_updown_randsuspend+0xcc>
			{
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
    1a96:	a5 01       	movw	r20, r10
    1a98:	be 01       	movw	r22, r28
    1a9a:	6f 5f       	subi	r22, 0xFF	; 255
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	89 2d       	mov	r24, r9
    1aa0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <draw_positions_axis>
		delay_ms(delay);
    1aa4:	8c 2c       	mov	r8, r12
    1aa6:	7d 2c       	mov	r7, r13
    1aa8:	8c 2d       	mov	r24, r12
    1aaa:	9d 2d       	mov	r25, r13
    1aac:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
    1ab0:	f1 e0       	ldi	r31, 0x01	; 1
    1ab2:	ef 1a       	sub	r14, r31
    1ab4:	f1 08       	sbc	r15, r1
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1ab6:	e1 14       	cp	r14, r1
    1ab8:	f1 04       	cpc	r15, r1
    1aba:	29 f0       	breq	.+10     	; 0x1ac6 <effect_axis_updown_randsuspend+0x110>
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    1abc:	a3 2d       	mov	r26, r3
    1abe:	b4 2d       	mov	r27, r4
    1ac0:	e5 2d       	mov	r30, r5
    1ac2:	f6 2d       	mov	r31, r6
    1ac4:	de cf       	rjmp	.-68     	; 0x1a82 <effect_axis_updown_randsuspend+0xcc>
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	8f 57       	subi	r24, 0x7F	; 127
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1acc:	fe 01       	movw	r30, r28
    1ace:	ef 5b       	subi	r30, 0xBF	; 191
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
	{
		destinations[i] = 7;
    1ad2:	27 e0       	ldi	r18, 0x07	; 7
    1ad4:	21 93       	st	Z+, r18
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    1ad6:	e8 17       	cp	r30, r24
    1ad8:	f9 07       	cpc	r31, r25
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <effect_axis_updown_randsuspend+0x11e>
	{
		destinations[i] = 7;
	}
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
    1adc:	cb 57       	subi	r28, 0x7B	; 123
    1ade:	df 4f       	sbci	r29, 0xFF	; 255
    1ae0:	88 81       	ld	r24, Y
    1ae2:	99 81       	ldd	r25, Y+1	; 0x01
    1ae4:	c5 58       	subi	r28, 0x85	; 133
    1ae6:	d0 40       	sbci	r29, 0x00	; 0
    1ae8:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
    1aec:	68 94       	set
    1aee:	ee 24       	eor	r14, r14
    1af0:	e3 f8       	bld	r14, 3
    1af2:	f1 2c       	mov	r15, r1
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1af4:	cf 57       	subi	r28, 0x7F	; 127
    1af6:	df 4f       	sbci	r29, 0xFF	; 255
    1af8:	c8 80       	ld	r12, Y
    1afa:	c1 58       	subi	r28, 0x81	; 129
    1afc:	d0 40       	sbci	r29, 0x00	; 0
    1afe:	ce 57       	subi	r28, 0x7E	; 126
    1b00:	df 4f       	sbci	r29, 0xFF	; 255
    1b02:	68 80       	ld	r6, Y
    1b04:	c2 58       	subi	r28, 0x82	; 130
    1b06:	d0 40       	sbci	r29, 0x00	; 0
    1b08:	cd 57       	subi	r28, 0x7D	; 125
    1b0a:	df 4f       	sbci	r29, 0xFF	; 255
    1b0c:	58 80       	ld	r5, Y
    1b0e:	c3 58       	subi	r28, 0x83	; 131
    1b10:	d0 40       	sbci	r29, 0x00	; 0
    1b12:	cc 57       	subi	r28, 0x7C	; 124
    1b14:	df 4f       	sbci	r29, 0xFF	; 255
    1b16:	d8 80       	ld	r13, Y
    1b18:	c4 58       	subi	r28, 0x84	; 132
    1b1a:	d0 40       	sbci	r29, 0x00	; 0
    1b1c:	24 c0       	rjmp	.+72     	; 0x1b66 <effect_axis_updown_randsuspend+0x1b0>
    1b1e:	af 01       	movw	r20, r30
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    1b20:	30 81       	ld	r19, Z
    1b22:	dc 01       	movw	r26, r24
    1b24:	2d 91       	ld	r18, X+
    1b26:	cd 01       	movw	r24, r26
    1b28:	32 17       	cp	r19, r18
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <effect_axis_updown_randsuspend+0x17a>
			{
				positions[px]++;
    1b2c:	3f 5f       	subi	r19, 0xFF	; 255
    1b2e:	30 83       	st	Z, r19
			}
			if (positions[px]>destinations[px])
    1b30:	da 01       	movw	r26, r20
    1b32:	3c 91       	ld	r19, X
    1b34:	23 17       	cp	r18, r19
    1b36:	10 f4       	brcc	.+4      	; 0x1b3c <effect_axis_updown_randsuspend+0x186>
			{
				positions[px]--;
    1b38:	31 50       	subi	r19, 0x01	; 1
    1b3a:	3c 93       	st	X, r19
    1b3c:	31 96       	adiw	r30, 0x01	; 1
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
    1b3e:	e0 17       	cp	r30, r16
    1b40:	f1 07       	cpc	r31, r17
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <effect_axis_updown_randsuspend+0x168>
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    1b44:	a5 01       	movw	r20, r10
    1b46:	be 01       	movw	r22, r28
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	89 2d       	mov	r24, r9
    1b4e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <draw_positions_axis>
		delay_ms(delay);
    1b52:	88 2d       	mov	r24, r8
    1b54:	97 2d       	mov	r25, r7
    1b56:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
    1b5a:	b1 e0       	ldi	r27, 0x01	; 1
    1b5c:	eb 1a       	sub	r14, r27
    1b5e:	f1 08       	sbc	r15, r1
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
    1b60:	e1 14       	cp	r14, r1
    1b62:	f1 04       	cpc	r15, r1
    1b64:	29 f0       	breq	.+10     	; 0x1b70 <effect_axis_updown_randsuspend+0x1ba>
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1b66:	8c 2d       	mov	r24, r12
    1b68:	96 2d       	mov	r25, r6
    1b6a:	e5 2d       	mov	r30, r5
    1b6c:	fd 2d       	mov	r31, r13
    1b6e:	d7 cf       	rjmp	.-82     	; 0x1b1e <effect_axis_updown_randsuspend+0x168>
			}
		}
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
}
    1b70:	ca 57       	subi	r28, 0x7A	; 122
    1b72:	df 4f       	sbci	r29, 0xFF	; 255
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	bf 90       	pop	r11
    1b90:	af 90       	pop	r10
    1b92:	9f 90       	pop	r9
    1b94:	8f 90       	pop	r8
    1b96:	7f 90       	pop	r7
    1b98:	6f 90       	pop	r6
    1b9a:	5f 90       	pop	r5
    1b9c:	4f 90       	pop	r4
    1b9e:	3f 90       	pop	r3
    1ba0:	08 95       	ret

00001ba2 <effect_boxside_randsend_parallel>:
	
}


void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
{
    1ba2:	2f 92       	push	r2
    1ba4:	3f 92       	push	r3
    1ba6:	4f 92       	push	r4
    1ba8:	5f 92       	push	r5
    1baa:	6f 92       	push	r6
    1bac:	7f 92       	push	r7
    1bae:	8f 92       	push	r8
    1bb0:	9f 92       	push	r9
    1bb2:	af 92       	push	r10
    1bb4:	bf 92       	push	r11
    1bb6:	cf 92       	push	r12
    1bb8:	df 92       	push	r13
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	c2 58       	subi	r28, 0x82	; 130
    1bcc:	d1 09       	sbc	r29, r1
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	28 2e       	mov	r2, r24
    1bda:	7b 01       	movw	r14, r22
    1bdc:	4a 01       	movw	r8, r20
    1bde:	59 01       	movw	r10, r18
    1be0:	ce 01       	movw	r24, r28
    1be2:	8f 5b       	subi	r24, 0xBF	; 191
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	8e 01       	movw	r16, r28
    1be8:	0f 57       	subi	r16, 0x7F	; 127
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	fc 01       	movw	r30, r24
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
    1bee:	11 92       	st	Z+, r1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    1bf0:	e0 17       	cp	r30, r16
    1bf2:	f1 07       	cpc	r31, r17
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <effect_boxside_randsend_parallel+0x4c>
    1bf6:	cf 57       	subi	r28, 0x7F	; 127
    1bf8:	df 4f       	sbci	r29, 0xFF	; 255
    1bfa:	19 82       	std	Y+1, r1	; 0x01
    1bfc:	18 82       	st	Y, r1
    1bfe:	c1 58       	subi	r28, 0x81	; 129
    1c00:	d0 40       	sbci	r29, 0x00	; 0
    1c02:	cc 24       	eor	r12, r12
    1c04:	c3 94       	inc	r12
    1c06:	d1 2c       	mov	r13, r1
    1c08:	38 2e       	mov	r3, r24
    1c0a:	49 2e       	mov	r4, r25
				pos[sent] += 1;
				sent++;
			}
		}
		
		done = 0;
    1c0c:	51 2c       	mov	r5, r1
    1c0e:	61 2c       	mov	r6, r1
			if (origin == 0)
			{
				cubepos[i] = pos[i];
			} else
			{
				cubepos[i] = (7-pos[i]);
    1c10:	0f 2e       	mov	r0, r31
    1c12:	f7 e0       	ldi	r31, 0x07	; 7
    1c14:	7f 2e       	mov	r7, r31
    1c16:	f0 2d       	mov	r31, r0
		pos[i] = 0;
	}
	
	while (notdone)
	{
		if (mode == 1)
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	a8 16       	cp	r10, r24
    1c1c:	b1 04       	cpc	r11, r1
    1c1e:	59 f5       	brne	.+86     	; 0x1c76 <effect_boxside_randsend_parallel+0xd4>
    1c20:	8d c0       	rjmp	.+282    	; 0x1d3c <effect_boxside_randsend_parallel+0x19a>
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
			{
				i = rand()%64;
    1c22:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1c26:	8f 73       	andi	r24, 0x3F	; 63
    1c28:	90 78       	andi	r25, 0x80	; 128
    1c2a:	99 23       	and	r25, r25
    1c2c:	24 f4       	brge	.+8      	; 0x1c36 <effect_boxside_randsend_parallel+0x94>
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	80 6c       	ori	r24, 0xC0	; 192
    1c32:	9f 6f       	ori	r25, 0xFF	; 255
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	9c 01       	movw	r18, r24
				if (pos[i] == 0)
    1c38:	e1 e4       	ldi	r30, 0x41	; 65
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	ec 0f       	add	r30, r28
    1c3e:	fd 1f       	adc	r31, r29
    1c40:	e8 0f       	add	r30, r24
    1c42:	f9 1f       	adc	r31, r25
    1c44:	80 81       	ld	r24, Z
    1c46:	81 11       	cpse	r24, r1
    1c48:	ec cf       	rjmp	.-40     	; 0x1c22 <effect_boxside_randsend_parallel+0x80>
				{
					sent++;
    1c4a:	cf 57       	subi	r28, 0x7F	; 127
    1c4c:	df 4f       	sbci	r29, 0xFF	; 255
    1c4e:	88 81       	ld	r24, Y
    1c50:	99 81       	ldd	r25, Y+1	; 0x01
    1c52:	c1 58       	subi	r28, 0x81	; 129
    1c54:	d0 40       	sbci	r29, 0x00	; 0
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	cf 57       	subi	r28, 0x7F	; 127
    1c5a:	df 4f       	sbci	r29, 0xFF	; 255
    1c5c:	99 83       	std	Y+1, r25	; 0x01
    1c5e:	88 83       	st	Y, r24
    1c60:	c1 58       	subi	r28, 0x81	; 129
    1c62:	d0 40       	sbci	r29, 0x00	; 0
					pos[i] += 1;
    1c64:	e1 e4       	ldi	r30, 0x41	; 65
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	ec 0f       	add	r30, r28
    1c6a:	fd 1f       	adc	r31, r29
    1c6c:	e2 0f       	add	r30, r18
    1c6e:	f3 1f       	adc	r31, r19
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	90 83       	st	Z, r25
    1c74:	23 c0       	rjmp	.+70     	; 0x1cbc <effect_boxside_randsend_parallel+0x11a>
					notdone2 = 0;
				}
			}
		} else if (mode == 2)
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	a8 16       	cp	r10, r24
    1c7a:	b1 04       	cpc	r11, r1
    1c7c:	f9 f4       	brne	.+62     	; 0x1cbc <effect_boxside_randsend_parallel+0x11a>
		{
			if (sent<64)
    1c7e:	cf 57       	subi	r28, 0x7F	; 127
    1c80:	df 4f       	sbci	r29, 0xFF	; 255
    1c82:	88 81       	ld	r24, Y
    1c84:	99 81       	ldd	r25, Y+1	; 0x01
    1c86:	c1 58       	subi	r28, 0x81	; 129
    1c88:	d0 40       	sbci	r29, 0x00	; 0
    1c8a:	80 34       	cpi	r24, 0x40	; 64
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	b4 f4       	brge	.+44     	; 0x1cbc <effect_boxside_randsend_parallel+0x11a>
			{
				pos[sent] += 1;
    1c90:	e1 e4       	ldi	r30, 0x41	; 65
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	ec 0f       	add	r30, r28
    1c96:	fd 1f       	adc	r31, r29
    1c98:	e8 0f       	add	r30, r24
    1c9a:	f9 1f       	adc	r31, r25
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ca0:	80 83       	st	Z, r24
				sent++;
    1ca2:	cf 57       	subi	r28, 0x7F	; 127
    1ca4:	df 4f       	sbci	r29, 0xFF	; 255
    1ca6:	88 81       	ld	r24, Y
    1ca8:	99 81       	ldd	r25, Y+1	; 0x01
    1caa:	c1 58       	subi	r28, 0x81	; 129
    1cac:	d0 40       	sbci	r29, 0x00	; 0
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	cf 57       	subi	r28, 0x7F	; 127
    1cb2:	df 4f       	sbci	r29, 0xFF	; 255
    1cb4:	99 83       	std	Y+1, r25	; 0x01
    1cb6:	88 83       	st	Y, r24
    1cb8:	c1 58       	subi	r28, 0x81	; 129
    1cba:	d0 40       	sbci	r29, 0x00	; 0
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    1cbc:	e3 2d       	mov	r30, r3
    1cbe:	f4 2d       	mov	r31, r4
				pos[sent] += 1;
				sent++;
			}
		}
		
		done = 0;
    1cc0:	85 2d       	mov	r24, r5
    1cc2:	96 2d       	mov	r25, r6
    1cc4:	df 01       	movw	r26, r30
		for (i=0;i<64;i++)
		{
			if (pos[i] > 0 && pos[i] <7)
    1cc6:	20 81       	ld	r18, Z
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	32 0f       	add	r19, r18
    1ccc:	36 30       	cpi	r19, 0x06	; 6
    1cce:	10 f4       	brcc	.+4      	; 0x1cd4 <effect_boxside_randsend_parallel+0x132>
			{
				pos[i] += 1;
    1cd0:	2f 5f       	subi	r18, 0xFF	; 255
    1cd2:	20 83       	st	Z, r18
    1cd4:	31 96       	adiw	r30, 0x01	; 1
			}
				
			if (pos[i] == 7)
    1cd6:	2c 91       	ld	r18, X
    1cd8:	27 30       	cpi	r18, 0x07	; 7
    1cda:	09 f4       	brne	.+2      	; 0x1cde <effect_boxside_randsend_parallel+0x13c>
				done++;
    1cdc:	01 96       	adiw	r24, 0x01	; 1
				sent++;
			}
		}
		
		done = 0;
		for (i=0;i<64;i++)
    1cde:	0e 17       	cp	r16, r30
    1ce0:	1f 07       	cpc	r17, r31
    1ce2:	81 f7       	brne	.-32     	; 0x1cc4 <effect_boxside_randsend_parallel+0x122>
				
			if (pos[i] == 7)
				done++;
		}
		
		if (done == 64)
    1ce4:	80 34       	cpi	r24, 0x40	; 64
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	11 f4       	brne	.+4      	; 0x1cee <effect_boxside_randsend_parallel+0x14c>
			notdone = 0;
    1cea:	c5 2c       	mov	r12, r5
    1cec:	d6 2c       	mov	r13, r6
    1cee:	de 01       	movw	r26, r28
    1cf0:	11 96       	adiw	r26, 0x01	; 1
    1cf2:	e3 2d       	mov	r30, r3
    1cf4:	f4 2d       	mov	r31, r4
		
		for (i=0;i<64;i++)
		{
			if (origin == 0)
    1cf6:	e1 14       	cp	r14, r1
    1cf8:	f1 04       	cpc	r15, r1
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <effect_boxside_randsend_parallel+0x160>
			{
				cubepos[i] = pos[i];
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8c 93       	st	X, r24
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <effect_boxside_randsend_parallel+0x168>
			} else
			{
				cubepos[i] = (7-pos[i]);
    1d02:	80 81       	ld	r24, Z
    1d04:	97 2d       	mov	r25, r7
    1d06:	98 1b       	sub	r25, r24
    1d08:	9c 93       	st	X, r25
    1d0a:	31 96       	adiw	r30, 0x01	; 1
    1d0c:	11 96       	adiw	r26, 0x01	; 1
		}
		
		if (done == 64)
			notdone = 0;
		
		for (i=0;i<64;i++)
    1d0e:	0e 17       	cp	r16, r30
    1d10:	1f 07       	cpc	r17, r31
    1d12:	89 f7       	brne	.-30     	; 0x1cf6 <effect_boxside_randsend_parallel+0x154>
				cubepos[i] = (7-pos[i]);
			}
		}
		
		
		delay_ms(delay);
    1d14:	c4 01       	movw	r24, r8
    1d16:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		draw_positions_axis(axis,cubepos,0);
    1d1a:	45 2d       	mov	r20, r5
    1d1c:	56 2d       	mov	r21, r6
    1d1e:	be 01       	movw	r22, r28
    1d20:	6f 5f       	subi	r22, 0xFF	; 255
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	82 2d       	mov	r24, r2
    1d26:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <draw_positions_axis>
		LED_PORT ^= LED_RED;
    1d2a:	82 b3       	in	r24, 0x12	; 18
    1d2c:	94 e0       	ldi	r25, 0x04	; 4
    1d2e:	89 27       	eor	r24, r25
    1d30:	82 bb       	out	0x12, r24	; 18
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
	}
	
	while (notdone)
    1d32:	c1 14       	cp	r12, r1
    1d34:	d1 04       	cpc	r13, r1
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <effect_boxside_randsend_parallel+0x198>
    1d38:	6f cf       	rjmp	.-290    	; 0x1c18 <effect_boxside_randsend_parallel+0x76>
    1d3a:	0b c0       	rjmp	.+22     	; 0x1d52 <effect_boxside_randsend_parallel+0x1b0>
	{
		if (mode == 1)
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
    1d3c:	cf 57       	subi	r28, 0x7F	; 127
    1d3e:	df 4f       	sbci	r29, 0xFF	; 255
    1d40:	88 81       	ld	r24, Y
    1d42:	99 81       	ldd	r25, Y+1	; 0x01
    1d44:	c1 58       	subi	r28, 0x81	; 129
    1d46:	d0 40       	sbci	r29, 0x00	; 0
    1d48:	80 34       	cpi	r24, 0x40	; 64
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	0c f0       	brlt	.+2      	; 0x1d50 <effect_boxside_randsend_parallel+0x1ae>
    1d4e:	b6 cf       	rjmp	.-148    	; 0x1cbc <effect_boxside_randsend_parallel+0x11a>
    1d50:	68 cf       	rjmp	.-304    	; 0x1c22 <effect_boxside_randsend_parallel+0x80>
		delay_ms(delay);
		draw_positions_axis(axis,cubepos,0);
		LED_PORT ^= LED_RED;
	}
	
}
    1d52:	ce 57       	subi	r28, 0x7E	; 126
    1d54:	df 4f       	sbci	r29, 0xFF	; 255
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	7f 90       	pop	r7
    1d7a:	6f 90       	pop	r6
    1d7c:	5f 90       	pop	r5
    1d7e:	4f 90       	pop	r4
    1d80:	3f 90       	pop	r3
    1d82:	2f 90       	pop	r2
    1d84:	08 95       	ret

00001d86 <effect_loadbar>:


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    1d86:	9f 92       	push	r9
    1d88:	af 92       	push	r10
    1d8a:	bf 92       	push	r11
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	8c 01       	movw	r16, r24
	fill(0x00);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	0e 94 99 01 	call	0x332	; 0x332 <fill>
	
	int z,y;
	
	for (z=0;z<8;z++)
    1da4:	c0 e0       	ldi	r28, 0x00	; 0
    1da6:	d0 e0       	ldi	r29, 0x00	; 0


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    1da8:	91 2c       	mov	r9, r1
    1daa:	a1 2c       	mov	r10, r1
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1dac:	ff 24       	eor	r15, r15
    1dae:	fa 94       	dec	r15
			
		delay_ms(delay);
    1db0:	d0 2e       	mov	r13, r16
    1db2:	e1 2e       	mov	r14, r17
    1db4:	15 c0       	rjmp	.+42     	; 0x1de0 <effect_loadbar+0x5a>
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1db6:	fc 01       	movw	r30, r24
    1db8:	e2 0f       	add	r30, r18
    1dba:	f3 1f       	adc	r31, r19
    1dbc:	e8 51       	subi	r30, 0x18	; 24
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	f0 82       	st	Z, r15
	
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	28 30       	cpi	r18, 0x08	; 8
    1dc8:	31 05       	cpc	r19, r1
    1dca:	a9 f7       	brne	.-22     	; 0x1db6 <effect_loadbar+0x30>
			cube[z][y] = 0xff;
			
		delay_ms(delay);
    1dcc:	cd 2c       	mov	r12, r13
    1dce:	be 2c       	mov	r11, r14
    1dd0:	8d 2d       	mov	r24, r13
    1dd2:	9e 2d       	mov	r25, r14
    1dd4:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    1dd8:	21 96       	adiw	r28, 0x01	; 1
    1dda:	c8 30       	cpi	r28, 0x08	; 8
    1ddc:	d1 05       	cpc	r29, r1
    1dde:	51 f0       	breq	.+20     	; 0x1df4 <effect_loadbar+0x6e>


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    1de0:	29 2d       	mov	r18, r9
    1de2:	3a 2d       	mov	r19, r10
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1de4:	ce 01       	movw	r24, r28
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	e1 cf       	rjmp	.-62     	; 0x1db6 <effect_loadbar+0x30>
			
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    1df4:	c8 01       	movw	r24, r16
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	80 0f       	add	r24, r16
    1dfc:	91 1f       	adc	r25, r17
    1dfe:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
	
	for (z=0;z<8;z++)
    1e02:	c0 e0       	ldi	r28, 0x00	; 0
    1e04:	d0 e0       	ldi	r29, 0x00	; 0
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    1e06:	00 e0       	ldi	r16, 0x00	; 0
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	13 c0       	rjmp	.+38     	; 0x1e32 <effect_loadbar+0xac>
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    1e0c:	fa 01       	movw	r30, r20
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f3 1f       	adc	r31, r19
    1e12:	e8 51       	subi	r30, 0x18	; 24
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	10 82       	st	Z, r1
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    1e18:	2f 5f       	subi	r18, 0xFF	; 255
    1e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1c:	28 30       	cpi	r18, 0x08	; 8
    1e1e:	31 05       	cpc	r19, r1
    1e20:	a9 f7       	brne	.-22     	; 0x1e0c <effect_loadbar+0x86>
			cube[z][y] = 0x00;
			
		delay_ms(delay);
    1e22:	8c 2d       	mov	r24, r12
    1e24:	9b 2d       	mov	r25, r11
    1e26:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
    1e2a:	21 96       	adiw	r28, 0x01	; 1
    1e2c:	c8 30       	cpi	r28, 0x08	; 8
    1e2e:	d1 05       	cpc	r29, r1
    1e30:	51 f0       	breq	.+20     	; 0x1e46 <effect_loadbar+0xc0>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    1e32:	20 2f       	mov	r18, r16
    1e34:	31 2f       	mov	r19, r17
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    1e36:	ae 01       	movw	r20, r28
    1e38:	44 0f       	add	r20, r20
    1e3a:	55 1f       	adc	r21, r21
    1e3c:	44 0f       	add	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	44 0f       	add	r20, r20
    1e42:	55 1f       	adc	r21, r21
    1e44:	e3 cf       	rjmp	.-58     	; 0x1e0c <effect_loadbar+0x86>
			
		delay_ms(delay);
	}
}
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	bf 90       	pop	r11
    1e58:	af 90       	pop	r10
    1e5a:	9f 90       	pop	r9
    1e5c:	08 95       	ret

00001e5e <effect_random_sparkle_flash>:


// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
    1e5e:	4f 92       	push	r4
    1e60:	5f 92       	push	r5
    1e62:	6f 92       	push	r6
    1e64:	7f 92       	push	r7
    1e66:	8f 92       	push	r8
    1e68:	9f 92       	push	r9
    1e6a:	af 92       	push	r10
    1e6c:	bf 92       	push	r11
    1e6e:	cf 92       	push	r12
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	4c 01       	movw	r8, r24
    1e80:	6b 01       	movw	r12, r22
    1e82:	3a 01       	movw	r6, r20
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    1e84:	18 16       	cp	r1, r24
    1e86:	19 06       	cpc	r1, r25
    1e88:	0c f0       	brlt	.+2      	; 0x1e8c <effect_random_sparkle_flash+0x2e>
    1e8a:	42 c0       	rjmp	.+132    	; 0x1f10 <effect_random_sparkle_flash+0xb2>
    1e8c:	a1 2c       	mov	r10, r1
    1e8e:	b1 2c       	mov	r11, r1
	{
		for (v=0;v<=voxels;v++)
    1e90:	41 2c       	mov	r4, r1
    1e92:	51 2c       	mov	r5, r1
    1e94:	38 c0       	rjmp	.+112    	; 0x1f06 <effect_random_sparkle_flash+0xa8>
			setvoxel(rand()%8,rand()%8,rand()%8);
    1e96:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1e9a:	7c 01       	movw	r14, r24
    1e9c:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1ea0:	8c 01       	movw	r16, r24
    1ea2:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    1ea6:	a7 01       	movw	r20, r14
    1ea8:	47 70       	andi	r20, 0x07	; 7
    1eaa:	50 78       	andi	r21, 0x80	; 128
    1eac:	55 23       	and	r21, r21
    1eae:	34 f4       	brge	.+12     	; 0x1ebc <effect_random_sparkle_flash+0x5e>
    1eb0:	41 50       	subi	r20, 0x01	; 1
    1eb2:	51 09       	sbc	r21, r1
    1eb4:	48 6f       	ori	r20, 0xF8	; 248
    1eb6:	5f 6f       	ori	r21, 0xFF	; 255
    1eb8:	4f 5f       	subi	r20, 0xFF	; 255
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebc:	b8 01       	movw	r22, r16
    1ebe:	67 70       	andi	r22, 0x07	; 7
    1ec0:	70 78       	andi	r23, 0x80	; 128
    1ec2:	77 23       	and	r23, r23
    1ec4:	34 f4       	brge	.+12     	; 0x1ed2 <effect_random_sparkle_flash+0x74>
    1ec6:	61 50       	subi	r22, 0x01	; 1
    1ec8:	71 09       	sbc	r23, r1
    1eca:	68 6f       	ori	r22, 0xF8	; 248
    1ecc:	7f 6f       	ori	r23, 0xFF	; 255
    1ece:	6f 5f       	subi	r22, 0xFF	; 255
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	87 70       	andi	r24, 0x07	; 7
    1ed4:	90 78       	andi	r25, 0x80	; 128
    1ed6:	99 23       	and	r25, r25
    1ed8:	24 f4       	brge	.+8      	; 0x1ee2 <effect_random_sparkle_flash+0x84>
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	88 6f       	ori	r24, 0xF8	; 248
    1ede:	9f 6f       	ori	r25, 0xFF	; 255
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v=0;v<=voxels;v++)
    1ee6:	21 96       	adiw	r28, 0x01	; 1
    1ee8:	cc 16       	cp	r12, r28
    1eea:	dd 06       	cpc	r13, r29
    1eec:	a4 f6       	brge	.-88     	; 0x1e96 <effect_random_sparkle_flash+0x38>
			setvoxel(rand()%8,rand()%8,rand()%8);
			
		delay_ms(delay);
    1eee:	c3 01       	movw	r24, r6
    1ef0:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		fill(0x00);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 99 01 	call	0x332	; 0x332 <fill>
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	a8 1a       	sub	r10, r24
    1efe:	b8 0a       	sbc	r11, r24
    1f00:	a8 14       	cp	r10, r8
    1f02:	b9 04       	cpc	r11, r9
    1f04:	29 f0       	breq	.+10     	; 0x1f10 <effect_random_sparkle_flash+0xb2>
	{
		for (v=0;v<=voxels;v++)
    1f06:	dd 20       	and	r13, r13
    1f08:	94 f3       	brlt	.-28     	; 0x1eee <effect_random_sparkle_flash+0x90>
    1f0a:	c4 2d       	mov	r28, r4
    1f0c:	d5 2d       	mov	r29, r5
    1f0e:	c3 cf       	rjmp	.-122    	; 0x1e96 <effect_random_sparkle_flash+0x38>
			setvoxel(rand()%8,rand()%8,rand()%8);
			
		delay_ms(delay);
		fill(0x00);
	}
}
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	bf 90       	pop	r11
    1f22:	af 90       	pop	r10
    1f24:	9f 90       	pop	r9
    1f26:	8f 90       	pop	r8
    1f28:	7f 90       	pop	r7
    1f2a:	6f 90       	pop	r6
    1f2c:	5f 90       	pop	r5
    1f2e:	4f 90       	pop	r4
    1f30:	08 95       	ret

00001f32 <effect_random_sparkle>:

// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
void effect_random_sparkle (void)
{
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
	int i;
	
	for (i=1;i<20;i++)
    1f36:	c1 e0       	ldi	r28, 0x01	; 1
    1f38:	d0 e0       	ldi	r29, 0x00	; 0
	{
		effect_random_sparkle_flash(5,i,200);
    1f3a:	48 ec       	ldi	r20, 0xC8	; 200
    1f3c:	50 e0       	ldi	r21, 0x00	; 0
    1f3e:	be 01       	movw	r22, r28
    1f40:	85 e0       	ldi	r24, 0x05	; 5
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <effect_random_sparkle_flash>
// and back to 1 again.
void effect_random_sparkle (void)
{
	int i;
	
	for (i=1;i<20;i++)
    1f48:	21 96       	adiw	r28, 0x01	; 1
    1f4a:	c4 31       	cpi	r28, 0x14	; 20
    1f4c:	d1 05       	cpc	r29, r1
    1f4e:	a9 f7       	brne	.-22     	; 0x1f3a <effect_random_sparkle+0x8>
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
	{
		effect_random_sparkle_flash(5,i,200);
    1f50:	48 ec       	ldi	r20, 0xC8	; 200
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	be 01       	movw	r22, r28
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <effect_random_sparkle_flash>
	for (i=1;i<20;i++)
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
    1f5e:	21 97       	sbiw	r28, 0x01	; 1
    1f60:	20 97       	sbiw	r28, 0x00	; 0
    1f62:	b1 f7       	brne	.-20     	; 0x1f50 <effect_random_sparkle+0x1e>
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
}
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <effect_telcstairs_do>:

int effect_telcstairs_do(int x, int val, int delay)
{
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	ec 01       	movw	r28, r24
    1f70:	ca 01       	movw	r24, r20
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    1f72:	dd 23       	and	r29, r29
    1f74:	dc f0       	brlt	.+54     	; 0x1fac <effect_telcstairs_do+0x42>
    1f76:	fe 01       	movw	r30, r28
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(x < CUBE_SIZE && y < CUBE_SIZE)
    1f7c:	e8 30       	cpi	r30, 0x08	; 8
    1f7e:	f1 05       	cpc	r31, r1
    1f80:	7c f4       	brge	.+30     	; 0x1fa0 <effect_telcstairs_do+0x36>
    1f82:	28 30       	cpi	r18, 0x08	; 8
    1f84:	31 05       	cpc	r19, r1
    1f86:	64 f4       	brge	.+24     	; 0x1fa0 <effect_telcstairs_do+0x36>
		{
			cube[x][y] = val;
    1f88:	df 01       	movw	r26, r30
    1f8a:	aa 0f       	add	r26, r26
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	aa 0f       	add	r26, r26
    1f90:	bb 1f       	adc	r27, r27
    1f92:	aa 0f       	add	r26, r26
    1f94:	bb 1f       	adc	r27, r27
    1f96:	a2 0f       	add	r26, r18
    1f98:	b3 1f       	adc	r27, r19
    1f9a:	a8 51       	subi	r26, 0x18	; 24
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	6c 93       	st	X, r22

int effect_telcstairs_do(int x, int val, int delay)
{
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    1fa0:	2f 5f       	subi	r18, 0xFF	; 255
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	31 97       	sbiw	r30, 0x01	; 1
    1fa6:	c2 17       	cp	r28, r18
    1fa8:	d3 07       	cpc	r29, r19
    1faa:	44 f7       	brge	.-48     	; 0x1f7c <effect_telcstairs_do+0x12>
		if(x < CUBE_SIZE && y < CUBE_SIZE)
		{
			cube[x][y] = val;
		}
	}
	delay_ms(delay);
    1fac:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
	return z;
}
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	08 95       	ret

00001fb8 <effect_telcstairs>:

void effect_telcstairs (int invert, int delay, int val)
{
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	eb 01       	movw	r28, r22
    1fc2:	8a 01       	movw	r16, r20
	int x;

	if(invert)
    1fc4:	89 2b       	or	r24, r25
    1fc6:	51 f0       	breq	.+20     	; 0x1fdc <effect_telcstairs+0x24>
    1fc8:	80 e1       	ldi	r24, 0x10	; 16
    1fca:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
		{
			x = effect_telcstairs_do(x,val,delay);
    1fcc:	ae 01       	movw	r20, r28
    1fce:	b8 01       	movw	r22, r16
    1fd0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <effect_telcstairs_do>
{
	int x;

	if(invert)
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	99 23       	and	r25, r25
    1fd8:	cc f7       	brge	.-14     	; 0x1fcc <effect_telcstairs+0x14>
    1fda:	0a c0       	rjmp	.+20     	; 0x1ff0 <effect_telcstairs+0x38>

void effect_telcstairs (int invert, int delay, int val)
{
	int x;

	if(invert)
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
		{
			x = effect_telcstairs_do(x,val,delay);
    1fe0:	ae 01       	movw	r20, r28
    1fe2:	b8 01       	movw	r22, r16
    1fe4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <effect_telcstairs_do>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	80 31       	cpi	r24, 0x10	; 16
    1fec:	91 05       	cpc	r25, r1
    1fee:	c4 f3       	brlt	.-16     	; 0x1fe0 <effect_telcstairs+0x28>
		{
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	08 95       	ret

00001ffa <effect_wormsqueeze>:

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
    1ffa:	2f 92       	push	r2
    1ffc:	3f 92       	push	r3
    1ffe:	4f 92       	push	r4
    2000:	5f 92       	push	r5
    2002:	6f 92       	push	r6
    2004:	7f 92       	push	r7
    2006:	8f 92       	push	r8
    2008:	9f 92       	push	r9
    200a:	af 92       	push	r10
    200c:	bf 92       	push	r11
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	66 97       	sbiw	r28, 0x16	; 22
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	9a 87       	std	Y+10, r25	; 0x0a
    2030:	89 87       	std	Y+9, r24	; 0x09
    2032:	1b 01       	movw	r2, r22
    2034:	5e 87       	std	Y+14, r21	; 0x0e
    2036:	4d 87       	std	Y+13, r20	; 0x0d
    2038:	38 8b       	std	Y+16, r19	; 0x10
    203a:	2f 87       	std	Y+15, r18	; 0x0f
    203c:	1a 8b       	std	Y+18, r17	; 0x12
    203e:	09 8b       	std	Y+17, r16	; 0x11
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
	
	if (direction == -1)
    2040:	4f 3f       	cpi	r20, 0xFF	; 255
    2042:	5f 4f       	sbci	r21, 0xFF	; 255
    2044:	19 f0       	breq	.+6      	; 0x204c <effect_wormsqueeze+0x52>

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
    2046:	81 2c       	mov	r8, r1
    2048:	91 2c       	mov	r9, r1
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <effect_wormsqueeze+0x5c>
	
	if (direction == -1)
		origin = 7;
    204c:	0f 2e       	mov	r0, r31
    204e:	f7 e0       	ldi	r31, 0x07	; 7
    2050:	8f 2e       	mov	r8, r31
    2052:	91 2c       	mov	r9, r1
    2054:	f0 2d       	mov	r31, r0
	
	cube_size = 8-(size-1);
    2056:	89 e0       	ldi	r24, 0x09	; 9
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	ac 01       	movw	r20, r24
    205c:	a9 85       	ldd	r26, Y+9	; 0x09
    205e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2060:	4a 1b       	sub	r20, r26
    2062:	5b 0b       	sbc	r21, r27
    2064:	5c 87       	std	Y+12, r21	; 0x0c
    2066:	4b 87       	std	Y+11, r20	; 0x0b
	
	x = rand()%cube_size;
    2068:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    206c:	6b 85       	ldd	r22, Y+11	; 0x0b
    206e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2070:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	8b 83       	std	Y+3, r24	; 0x03
	y = rand()%cube_size;
    2078:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
	
	for (i=0; i<iterations; i++)
    2088:	ef 85       	ldd	r30, Y+15	; 0x0f
    208a:	f8 89       	ldd	r31, Y+16	; 0x10
    208c:	1e 16       	cp	r1, r30
    208e:	1f 06       	cpc	r1, r31
    2090:	0c f0       	brlt	.+2      	; 0x2094 <effect_wormsqueeze+0x9a>
    2092:	9c c0       	rjmp	.+312    	; 0x21cc <effect_wormsqueeze+0x1d2>
    2094:	18 86       	std	Y+8, r1	; 0x08
    2096:	1f 82       	std	Y+7, r1	; 0x07
    2098:	29 85       	ldd	r18, Y+9	; 0x09
    209a:	3a 85       	ldd	r19, Y+10	; 0x0a
    209c:	3c 8b       	std	Y+20, r19	; 0x14
    209e:	2b 8b       	std	Y+19, r18	; 0x13
	{
		dx = ((rand()%3)-1);
    20a0:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    20a4:	8c 01       	movw	r16, r24
		dy = ((rand()%3)-1);
    20a6:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    20aa:	63 e0       	ldi	r22, 0x03	; 3
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    20b2:	fc 01       	movw	r30, r24
    20b4:	31 97       	sbiw	r30, 0x01	; 1
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
	{
		dx = ((rand()%3)-1);
    20b6:	c8 01       	movw	r24, r16
    20b8:	63 e0       	ldi	r22, 0x03	; 3
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    20c0:	9c 01       	movw	r18, r24
    20c2:	21 50       	subi	r18, 0x01	; 1
    20c4:	31 09       	sbc	r19, r1
		dy = ((rand()%3)-1);
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
    20c6:	4b 81       	ldd	r20, Y+3	; 0x03
    20c8:	5c 81       	ldd	r21, Y+4	; 0x04
    20ca:	24 0f       	add	r18, r20
    20cc:	35 1f       	adc	r19, r21
    20ce:	12 16       	cp	r1, r18
    20d0:	13 06       	cpc	r1, r19
    20d2:	3c f4       	brge	.+14     	; 0x20e2 <effect_wormsqueeze+0xe8>
    20d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    20d8:	28 17       	cp	r18, r24
    20da:	39 07       	cpc	r19, r25
    20dc:	14 f4       	brge	.+4      	; 0x20e2 <effect_wormsqueeze+0xe8>
			x += dx;
    20de:	3c 83       	std	Y+4, r19	; 0x04
    20e0:	2b 83       	std	Y+3, r18	; 0x03
			
		if ((y+dy) > 0 && (y+dy) < cube_size)
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	8e 0f       	add	r24, r30
    20e8:	9f 1f       	adc	r25, r31
    20ea:	18 16       	cp	r1, r24
    20ec:	19 06       	cpc	r1, r25
    20ee:	3c f4       	brge	.+14     	; 0x20fe <effect_wormsqueeze+0x104>
    20f0:	ab 85       	ldd	r26, Y+11	; 0x0b
    20f2:	bc 85       	ldd	r27, Y+12	; 0x0c
    20f4:	8a 17       	cp	r24, r26
    20f6:	9b 07       	cpc	r25, r27
    20f8:	14 f4       	brge	.+4      	; 0x20fe <effect_wormsqueeze+0x104>
			y += dy;
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
	
		shift(axis, direction);
    20fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2100:	7e 85       	ldd	r23, Y+14	; 0x0e
    2102:	82 2d       	mov	r24, r2
    2104:	0e 94 bb 02 	call	0x576	; 0x576 <shift>
		

		for (j=0; j<size;j++)
    2108:	e9 85       	ldd	r30, Y+9	; 0x09
    210a:	fa 85       	ldd	r31, Y+10	; 0x0a
    210c:	1e 16       	cp	r1, r30
    210e:	1f 06       	cpc	r1, r31
    2110:	0c f0       	brlt	.+2      	; 0x2114 <effect_wormsqueeze+0x11a>
    2112:	4d c0       	rjmp	.+154    	; 0x21ae <effect_wormsqueeze+0x1b4>
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	2f 01       	movw	r4, r30
    211a:	48 0e       	add	r4, r24
    211c:	59 1e       	adc	r5, r25
    211e:	7c 01       	movw	r14, r24
    2120:	6d 80       	ldd	r6, Y+5	; 0x05
    2122:	7e 80       	ldd	r7, Y+6	; 0x06
    2124:	83 01       	movw	r16, r6
    2126:	2b 89       	ldd	r18, Y+19	; 0x13
    2128:	3c 89       	ldd	r19, Y+20	; 0x14
    212a:	02 0f       	add	r16, r18
    212c:	13 1f       	adc	r17, r19
    212e:	5c 01       	movw	r10, r24
    2130:	a6 18       	sub	r10, r6
    2132:	b7 08       	sbc	r11, r7
    2134:	a3 01       	movw	r20, r6
    2136:	48 1b       	sub	r20, r24
    2138:	59 0b       	sbc	r21, r25
    213a:	5a 83       	std	Y+2, r21	; 0x02
    213c:	49 83       	std	Y+1, r20	; 0x01
    213e:	30 c0       	rjmp	.+96     	; 0x21a0 <effect_wormsqueeze+0x1a6>
		{
			for (k=0; k<size;k++)
			{
				if (axis == AXIS_Z)
    2140:	5a e7       	ldi	r21, 0x7A	; 122
    2142:	25 16       	cp	r2, r21
    2144:	31 04       	cpc	r3, r1
    2146:	39 f4       	brne	.+14     	; 0x2156 <effect_wormsqueeze+0x15c>
					setvoxel(x+j,y+k,origin);
    2148:	a4 01       	movw	r20, r8
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	c7 01       	movw	r24, r14
    2150:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    2154:	17 c0       	rjmp	.+46     	; 0x2184 <effect_wormsqueeze+0x18a>
					
				if (axis == AXIS_Y)
    2156:	89 e7       	ldi	r24, 0x79	; 121
    2158:	28 16       	cp	r2, r24
    215a:	31 04       	cpc	r3, r1
    215c:	39 f4       	brne	.+14     	; 0x216c <effect_wormsqueeze+0x172>
					setvoxel(x+j,origin,y+k);
    215e:	4d 89       	ldd	r20, Y+21	; 0x15
    2160:	5e 89       	ldd	r21, Y+22	; 0x16
    2162:	b4 01       	movw	r22, r8
    2164:	c7 01       	movw	r24, r14
    2166:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    216a:	0c c0       	rjmp	.+24     	; 0x2184 <effect_wormsqueeze+0x18a>
					
				if (axis == AXIS_X)
    216c:	98 e7       	ldi	r25, 0x78	; 120
    216e:	29 16       	cp	r2, r25
    2170:	31 04       	cpc	r3, r1
    2172:	41 f4       	brne	.+16     	; 0x2184 <effect_wormsqueeze+0x18a>
    2174:	4d 89       	ldd	r20, Y+21	; 0x15
    2176:	5e 89       	ldd	r21, Y+22	; 0x16
    2178:	4a 0d       	add	r20, r10
    217a:	5b 1d       	adc	r21, r11
					setvoxel(origin,y+j,x+k);
    217c:	b6 01       	movw	r22, r12
    217e:	c4 01       	movw	r24, r8
    2180:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    2184:	ad 89       	ldd	r26, Y+21	; 0x15
    2186:	be 89       	ldd	r27, Y+22	; 0x16
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	be 8b       	std	Y+22, r27	; 0x16
    218c:	ad 8b       	std	Y+21, r26	; 0x15
		shift(axis, direction);
		

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
    218e:	a0 17       	cp	r26, r16
    2190:	b1 07       	cpc	r27, r17
    2192:	b1 f6       	brne	.-84     	; 0x2140 <effect_wormsqueeze+0x146>
    2194:	bf ef       	ldi	r27, 0xFF	; 255
    2196:	eb 1a       	sub	r14, r27
    2198:	fb 0a       	sbc	r15, r27
			y += dy;
	
		shift(axis, direction);
		

		for (j=0; j<size;j++)
    219a:	e4 14       	cp	r14, r4
    219c:	f5 04       	cpc	r15, r5
    219e:	39 f0       	breq	.+14     	; 0x21ae <effect_wormsqueeze+0x1b4>
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
			x += dx;
			
		if ((y+dy) > 0 && (y+dy) < cube_size)
			y += dy;
    21a0:	7e 8a       	std	Y+22, r7	; 0x16
    21a2:	6d 8a       	std	Y+21, r6	; 0x15
    21a4:	c9 80       	ldd	r12, Y+1	; 0x01
    21a6:	da 80       	ldd	r13, Y+2	; 0x02
    21a8:	ce 0c       	add	r12, r14
    21aa:	df 1c       	adc	r13, r15
    21ac:	c9 cf       	rjmp	.-110    	; 0x2140 <effect_wormsqueeze+0x146>
				if (axis == AXIS_X)
					setvoxel(origin,y+j,x+k);
			}
		}
		
		delay_ms(delay);
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	9a 89       	ldd	r25, Y+18	; 0x12
    21b2:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
	cube_size = 8-(size-1);
	
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
    21b6:	ef 81       	ldd	r30, Y+7	; 0x07
    21b8:	f8 85       	ldd	r31, Y+8	; 0x08
    21ba:	31 96       	adiw	r30, 0x01	; 1
    21bc:	f8 87       	std	Y+8, r31	; 0x08
    21be:	ef 83       	std	Y+7, r30	; 0x07
    21c0:	2f 85       	ldd	r18, Y+15	; 0x0f
    21c2:	38 89       	ldd	r19, Y+16	; 0x10
    21c4:	e2 17       	cp	r30, r18
    21c6:	f3 07       	cpc	r31, r19
    21c8:	09 f0       	breq	.+2      	; 0x21cc <effect_wormsqueeze+0x1d2>
    21ca:	6a cf       	rjmp	.-300    	; 0x20a0 <effect_wormsqueeze+0xa6>
			}
		}
		
		delay_ms(delay);
	}
}
    21cc:	66 96       	adiw	r28, 0x16	; 22
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	9f 90       	pop	r9
    21ee:	8f 90       	pop	r8
    21f0:	7f 90       	pop	r7
    21f2:	6f 90       	pop	r6
    21f4:	5f 90       	pop	r5
    21f6:	4f 90       	pop	r4
    21f8:	3f 90       	pop	r3
    21fa:	2f 90       	pop	r2
    21fc:	08 95       	ret

000021fe <effect_smileyspin>:

void effect_smileyspin (int count, int delay, char bitmap)
{
    21fe:	2f 92       	push	r2
    2200:	3f 92       	push	r3
    2202:	4f 92       	push	r4
    2204:	5f 92       	push	r5
    2206:	6f 92       	push	r6
    2208:	7f 92       	push	r7
    220a:	8f 92       	push	r8
    220c:	9f 92       	push	r9
    220e:	af 92       	push	r10
    2210:	bf 92       	push	r11
    2212:	cf 92       	push	r12
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	e6 97       	sbiw	r28, 0x36	; 54
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	99 ab       	std	Y+49, r25	; 0x31
    2234:	88 ab       	std	Y+48, r24	; 0x30
    2236:	54 2e       	mov	r5, r20
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
    2238:	80 e2       	ldi	r24, 0x20	; 32
    223a:	e4 e6       	ldi	r30, 0x64	; 100
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	de 01       	movw	r26, r28
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	01 90       	ld	r0, Z+
    2244:	0d 92       	st	X+, r0
    2246:	8a 95       	dec	r24
    2248:	e1 f7       	brne	.-8      	; 0x2242 <effect_smileyspin+0x44>
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    224a:	28 a9       	ldd	r18, Y+48	; 0x30
    224c:	39 a9       	ldd	r19, Y+49	; 0x31
    224e:	12 16       	cp	r1, r18
    2250:	13 06       	cpc	r1, r19
    2252:	0c f0       	brlt	.+2      	; 0x2256 <effect_smileyspin+0x58>
    2254:	4d c2       	rjmp	.+1178   	; 0x26f0 <effect_smileyspin+0x4f2>
    2256:	1f a6       	std	Y+47, r1	; 0x2f
    2258:	1e a6       	std	Y+46, r1	; 0x2e
    225a:	0f 2e       	mov	r0, r31
    225c:	f7 e0       	ldi	r31, 0x07	; 7
    225e:	2f 2e       	mov	r2, r31
    2260:	f0 2d       	mov	r31, r0
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2262:	19 a6       	std	Y+41, r1	; 0x29
    2264:	1d a6       	std	Y+45, r1	; 0x2d
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    2266:	6c a7       	std	Y+44, r22	; 0x2c
    2268:	7c ab       	std	Y+52, r23	; 0x34
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	3a ab       	std	Y+50, r19	; 0x32
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	8b ab       	std	Y+51, r24	; 0x33
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2272:	97 e0       	ldi	r25, 0x07	; 7
    2274:	9d ab       	std	Y+53, r25	; 0x35
    2276:	1e aa       	std	Y+54, r1	; 0x36
    2278:	30 c2       	rjmp	.+1120   	; 0x26da <effect_smileyspin+0x4dc>
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
    227a:	61 14       	cp	r6, r1
    227c:	71 04       	cpc	r7, r1
    227e:	41 f4       	brne	.+16     	; 0x2290 <effect_smileyspin+0x92>
				off++;
    2280:	eb a1       	ldd	r30, Y+35	; 0x23
    2282:	fc a1       	ldd	r31, Y+36	; 0x24
    2284:	31 96       	adiw	r30, 0x01	; 1
    2286:	fc a3       	std	Y+36, r31	; 0x24
    2288:	eb a3       	std	Y+35, r30	; 0x23
				if (off == 4){
    228a:	34 97       	sbiw	r30, 0x04	; 4
    228c:	79 f4       	brne	.+30     	; 0x22ac <effect_smileyspin+0xae>
    228e:	07 c0       	rjmp	.+14     	; 0x229e <effect_smileyspin+0xa0>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    2290:	2b a1       	ldd	r18, Y+35	; 0x23
    2292:	3c a1       	ldd	r19, Y+36	; 0x24
    2294:	2f 5f       	subi	r18, 0xFF	; 255
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	3c a3       	std	Y+36, r19	; 0x24
    229a:	2b a3       	std	Y+35, r18	; 0x23
    229c:	07 c0       	rjmp	.+14     	; 0x22ac <effect_smileyspin+0xae>
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
					off = 0;
    229e:	39 a5       	ldd	r19, Y+41	; 0x29
    22a0:	3b a3       	std	Y+35, r19	; 0x23
    22a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22a4:	8c a3       	std	Y+36, r24	; 0x24
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    22a6:	66 24       	eor	r6, r6
    22a8:	63 94       	inc	r6
    22aa:	71 2c       	mov	r7, r1
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	eb a1       	ldd	r30, Y+35	; 0x23
    22b2:	fc a1       	ldd	r31, Y+36	; 0x24
    22b4:	8e 1b       	sub	r24, r30
    22b6:	9f 0b       	sbc	r25, r31
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	4f 96       	adiw	r24, 0x1f	; 31
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    22c6:	c9 a4       	ldd	r12, Y+41	; 0x29
    22c8:	dd a4       	ldd	r13, Y+45	; 0x2d
    22ca:	21 e0       	ldi	r18, 0x01	; 1
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	2c 0f       	add	r18, r28
    22d0:	3d 1f       	adc	r19, r29
    22d2:	28 0f       	add	r18, r24
    22d4:	39 1f       	adc	r19, r25
    22d6:	3a a3       	std	Y+34, r19	; 0x22
    22d8:	29 a3       	std	Y+33, r18	; 0x21
    22da:	5f 01       	movw	r10, r30
    22dc:	aa 0c       	add	r10, r10
    22de:	bb 1c       	adc	r11, r11
    22e0:	aa 0c       	add	r10, r10
    22e2:	bb 1c       	adc	r11, r11
    22e4:	aa 0c       	add	r10, r10
    22e6:	bb 1c       	adc	r11, r11
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	8c 0f       	add	r24, r28
    22ee:	9d 1f       	adc	r25, r29
    22f0:	a8 0e       	add	r10, r24
    22f2:	b9 1e       	adc	r11, r25
    22f4:	2a c0       	rjmp	.+84     	; 0x234a <effect_smileyspin+0x14c>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    22f6:	40 2f       	mov	r20, r16
    22f8:	69 2d       	mov	r22, r9
    22fa:	85 2d       	mov	r24, r5
    22fc:	0e 94 56 16 	call	0x2cac	; 0x2cac <font_getbitmappixel>
    2300:	88 23       	and	r24, r24
    2302:	a1 f0       	breq	.+40     	; 0x232c <effect_smileyspin+0x12e>
						if (!flip)
    2304:	61 14       	cp	r6, r1
    2306:	71 04       	cpc	r7, r1
    2308:	51 f4       	brne	.+20     	; 0x231e <effect_smileyspin+0x120>
    230a:	f5 01       	movw	r30, r10
    230c:	e0 0f       	add	r30, r16
    230e:	f1 1f       	adc	r31, r17
							setvoxel(y,dybde[8 * off + d++],x);
    2310:	60 81       	ld	r22, Z
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	a6 01       	movw	r20, r12
    2316:	c8 01       	movw	r24, r16
    2318:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    231c:	07 c0       	rjmp	.+14     	; 0x232c <effect_smileyspin+0x12e>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    231e:	f7 01       	movw	r30, r14
    2320:	60 81       	ld	r22, Z
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	a6 01       	movw	r20, r12
    2326:	c8 01       	movw	r24, r16
    2328:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    232c:	0f 5f       	subi	r16, 0xFF	; 255
    232e:	1f 4f       	sbci	r17, 0xFF	; 255
    2330:	f1 e0       	ldi	r31, 0x01	; 1
    2332:	ef 1a       	sub	r14, r31
    2334:	f1 08       	sbc	r15, r1
    2336:	08 30       	cpi	r16, 0x08	; 8
    2338:	11 05       	cpc	r17, r1
    233a:	e9 f6       	brne	.-70     	; 0x22f6 <effect_smileyspin+0xf8>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    233c:	2f ef       	ldi	r18, 0xFF	; 255
    233e:	c2 1a       	sub	r12, r18
    2340:	d2 0a       	sbc	r13, r18
    2342:	38 e0       	ldi	r19, 0x08	; 8
    2344:	c3 16       	cp	r12, r19
    2346:	d1 04       	cpc	r13, r1
    2348:	39 f0       	breq	.+14     	; 0x2358 <effect_smileyspin+0x15a>
    234a:	e9 a0       	ldd	r14, Y+33	; 0x21
    234c:	fa a0       	ldd	r15, Y+34	; 0x22
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    234e:	08 2d       	mov	r16, r8
    2350:	14 2d       	mov	r17, r4
    2352:	92 2c       	mov	r9, r2
    2354:	9c 18       	sub	r9, r12
    2356:	cf cf       	rjmp	.-98     	; 0x22f6 <effect_smileyspin+0xf8>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    2358:	1c a5       	ldd	r17, Y+44	; 0x2c
    235a:	81 2f       	mov	r24, r17
    235c:	93 2d       	mov	r25, r3
    235e:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			fill(0x00);
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    2368:	8d a1       	ldd	r24, Y+37	; 0x25
    236a:	9e a1       	ldd	r25, Y+38	; 0x26
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9e a3       	std	Y+38, r25	; 0x26
    2370:	8d a3       	std	Y+37, r24	; 0x25
	{
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
    2372:	89 2b       	or	r24, r25
    2374:	09 f0       	breq	.+2      	; 0x2378 <effect_smileyspin+0x17a>
    2376:	81 cf       	rjmp	.-254    	; 0x227a <effect_smileyspin+0x7c>
    2378:	1a a7       	std	Y+42, r17	; 0x2a
    237a:	3b a6       	std	Y+43, r3	; 0x2b
    237c:	97 e0       	ldi	r25, 0x07	; 7
    237e:	9f a3       	std	Y+39, r25	; 0x27
    2380:	18 a6       	std	Y+40, r1	; 0x28
    2382:	1e a2       	std	Y+38, r1	; 0x26
    2384:	1d a2       	std	Y+37, r1	; 0x25
    2386:	61 2c       	mov	r6, r1
    2388:	71 2c       	mov	r7, r1
    238a:	4d a4       	ldd	r4, Y+45	; 0x2d
    238c:	8d a8       	ldd	r8, Y+53	; 0x35
    238e:	3e a8       	ldd	r3, Y+54	; 0x36
		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    2390:	61 14       	cp	r6, r1
    2392:	71 04       	cpc	r7, r1
    2394:	41 f4       	brne	.+16     	; 0x23a6 <effect_smileyspin+0x1a8>
				off++;
    2396:	ed a1       	ldd	r30, Y+37	; 0x25
    2398:	fe a1       	ldd	r31, Y+38	; 0x26
    239a:	31 96       	adiw	r30, 0x01	; 1
    239c:	fe a3       	std	Y+38, r31	; 0x26
    239e:	ed a3       	std	Y+37, r30	; 0x25
				if (off == 4){
    23a0:	34 97       	sbiw	r30, 0x04	; 4
    23a2:	71 f4       	brne	.+28     	; 0x23c0 <effect_smileyspin+0x1c2>
    23a4:	07 c0       	rjmp	.+14     	; 0x23b4 <effect_smileyspin+0x1b6>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    23a6:	2d a1       	ldd	r18, Y+37	; 0x25
    23a8:	3e a1       	ldd	r19, Y+38	; 0x26
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
    23ac:	3f 4f       	sbci	r19, 0xFF	; 255
    23ae:	3e a3       	std	Y+38, r19	; 0x26
    23b0:	2d a3       	std	Y+37, r18	; 0x25
    23b2:	06 c0       	rjmp	.+12     	; 0x23c0 <effect_smileyspin+0x1c2>
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
					off = 0;
    23b4:	39 a5       	ldd	r19, Y+41	; 0x29
    23b6:	3d a3       	std	Y+37, r19	; 0x25
    23b8:	4e a2       	std	Y+38, r4	; 0x26
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    23ba:	66 24       	eor	r6, r6
    23bc:	63 94       	inc	r6
    23be:	71 2c       	mov	r7, r1
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	ed a1       	ldd	r30, Y+37	; 0x25
    23c6:	fe a1       	ldd	r31, Y+38	; 0x26
    23c8:	8e 1b       	sub	r24, r30
    23ca:	9f 0b       	sbc	r25, r31
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	4f 96       	adiw	r24, 0x1f	; 31
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    23da:	a9 a4       	ldd	r10, Y+41	; 0x29
    23dc:	b4 2c       	mov	r11, r4
    23de:	21 e0       	ldi	r18, 0x01	; 1
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	2c 0f       	add	r18, r28
    23e4:	3d 1f       	adc	r19, r29
    23e6:	28 0f       	add	r18, r24
    23e8:	39 1f       	adc	r19, r25
    23ea:	3a a3       	std	Y+34, r19	; 0x22
    23ec:	29 a3       	std	Y+33, r18	; 0x21
    23ee:	cf 01       	movw	r24, r30
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	e1 e0       	ldi	r30, 0x01	; 1
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	ec 0f       	add	r30, r28
    2402:	fd 1f       	adc	r31, r29
    2404:	e8 0f       	add	r30, r24
    2406:	f9 1f       	adc	r31, r25
    2408:	fc a3       	std	Y+36, r31	; 0x24
    240a:	eb a3       	std	Y+35, r30	; 0x23
    240c:	2d c0       	rjmp	.+90     	; 0x2468 <effect_smileyspin+0x26a>
    240e:	42 2d       	mov	r20, r2
    2410:	40 1b       	sub	r20, r16
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    2412:	69 2d       	mov	r22, r9
    2414:	85 2d       	mov	r24, r5
    2416:	0e 94 56 16 	call	0x2cac	; 0x2cac <font_getbitmappixel>
    241a:	88 23       	and	r24, r24
    241c:	91 f0       	breq	.+36     	; 0x2442 <effect_smileyspin+0x244>
						if (!flip)
    241e:	61 14       	cp	r6, r1
    2420:	71 04       	cpc	r7, r1
    2422:	41 f4       	brne	.+16     	; 0x2434 <effect_smileyspin+0x236>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2424:	f7 01       	movw	r30, r14
    2426:	80 81       	ld	r24, Z
    2428:	a5 01       	movw	r20, r10
    242a:	b8 01       	movw	r22, r16
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    2432:	07 c0       	rjmp	.+14     	; 0x2442 <effect_smileyspin+0x244>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2434:	f6 01       	movw	r30, r12
    2436:	80 81       	ld	r24, Z
    2438:	a5 01       	movw	r20, r10
    243a:	b8 01       	movw	r22, r16
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    2442:	01 50       	subi	r16, 0x01	; 1
    2444:	11 09       	sbc	r17, r1
    2446:	f1 e0       	ldi	r31, 0x01	; 1
    2448:	cf 1a       	sub	r12, r31
    244a:	d1 08       	sbc	r13, r1
    244c:	2f ef       	ldi	r18, 0xFF	; 255
    244e:	e2 1a       	sub	r14, r18
    2450:	f2 0a       	sbc	r15, r18
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    2452:	0f 3f       	cpi	r16, 0xFF	; 255
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	13 07       	cpc	r17, r19
    2458:	d1 f6       	brne	.-76     	; 0x240e <effect_smileyspin+0x210>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    245a:	8f ef       	ldi	r24, 0xFF	; 255
    245c:	a8 1a       	sub	r10, r24
    245e:	b8 0a       	sbc	r11, r24
    2460:	98 e0       	ldi	r25, 0x08	; 8
    2462:	a9 16       	cp	r10, r25
    2464:	b1 04       	cpc	r11, r1
    2466:	49 f0       	breq	.+18     	; 0x247a <effect_smileyspin+0x27c>
    2468:	c9 a0       	ldd	r12, Y+33	; 0x21
    246a:	da a0       	ldd	r13, Y+34	; 0x22
    246c:	eb a0       	ldd	r14, Y+35	; 0x23
    246e:	fc a0       	ldd	r15, Y+36	; 0x24
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2470:	08 2d       	mov	r16, r8
    2472:	13 2d       	mov	r17, r3
    2474:	92 2c       	mov	r9, r2
    2476:	9a 18       	sub	r9, r10
    2478:	ca cf       	rjmp	.-108    	; 0x240e <effect_smileyspin+0x210>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    247a:	8a a5       	ldd	r24, Y+42	; 0x2a
    247c:	9b a5       	ldd	r25, Y+43	; 0x2b
    247e:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			fill(0x00);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    2488:	ef a1       	ldd	r30, Y+39	; 0x27
    248a:	f8 a5       	ldd	r31, Y+40	; 0x28
    248c:	31 97       	sbiw	r30, 0x01	; 1
    248e:	f8 a7       	std	Y+40, r31	; 0x28
    2490:	ef a3       	std	Y+39, r30	; 0x27

		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    2492:	ef 2b       	or	r30, r31
    2494:	09 f0       	breq	.+2      	; 0x2498 <effect_smileyspin+0x29a>
    2496:	7c cf       	rjmp	.-264    	; 0x2390 <effect_smileyspin+0x192>
    2498:	f7 e0       	ldi	r31, 0x07	; 7
    249a:	fd a3       	std	Y+37, r31	; 0x25
    249c:	1e a2       	std	Y+38, r1	; 0x26
    249e:	1c a2       	std	Y+36, r1	; 0x24
    24a0:	1b a2       	std	Y+35, r1	; 0x23
    24a2:	61 2c       	mov	r6, r1
    24a4:	71 2c       	mov	r7, r1
    24a6:	3d a4       	ldd	r3, Y+45	; 0x2d
    24a8:	8a a8       	ldd	r8, Y+50	; 0x32
    24aa:	4b a8       	ldd	r4, Y+51	; 0x33
		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
    24ac:	61 14       	cp	r6, r1
    24ae:	71 04       	cpc	r7, r1
    24b0:	51 f4       	brne	.+20     	; 0x24c6 <effect_smileyspin+0x2c8>
				off++;
    24b2:	2b a1       	ldd	r18, Y+35	; 0x23
    24b4:	3c a1       	ldd	r19, Y+36	; 0x24
    24b6:	2f 5f       	subi	r18, 0xFF	; 255
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	3c a3       	std	Y+36, r19	; 0x24
    24bc:	2b a3       	std	Y+35, r18	; 0x23
				if (off == 4){
    24be:	24 30       	cpi	r18, 0x04	; 4
    24c0:	31 05       	cpc	r19, r1
    24c2:	69 f4       	brne	.+26     	; 0x24de <effect_smileyspin+0x2e0>
    24c4:	06 c0       	rjmp	.+12     	; 0x24d2 <effect_smileyspin+0x2d4>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    24c6:	8b a1       	ldd	r24, Y+35	; 0x23
    24c8:	9c a1       	ldd	r25, Y+36	; 0x24
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	9c a3       	std	Y+36, r25	; 0x24
    24ce:	8b a3       	std	Y+35, r24	; 0x23
    24d0:	06 c0       	rjmp	.+12     	; 0x24de <effect_smileyspin+0x2e0>
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
					off = 0;
    24d2:	99 a5       	ldd	r25, Y+41	; 0x29
    24d4:	9b a3       	std	Y+35, r25	; 0x23
    24d6:	3c a2       	std	Y+36, r3	; 0x24
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    24d8:	66 24       	eor	r6, r6
    24da:	63 94       	inc	r6
    24dc:	71 2c       	mov	r7, r1
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	eb a1       	ldd	r30, Y+35	; 0x23
    24e4:	fc a1       	ldd	r31, Y+36	; 0x24
    24e6:	8e 1b       	sub	r24, r30
    24e8:	9f 0b       	sbc	r25, r31
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	4f 96       	adiw	r24, 0x1f	; 31
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    24f8:	c9 a4       	ldd	r12, Y+41	; 0x29
    24fa:	d3 2c       	mov	r13, r3
    24fc:	21 e0       	ldi	r18, 0x01	; 1
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	2c 0f       	add	r18, r28
    2502:	3d 1f       	adc	r19, r29
    2504:	28 0f       	add	r18, r24
    2506:	39 1f       	adc	r19, r25
    2508:	3a a3       	std	Y+34, r19	; 0x22
    250a:	29 a3       	std	Y+33, r18	; 0x21
    250c:	5f 01       	movw	r10, r30
    250e:	aa 0c       	add	r10, r10
    2510:	bb 1c       	adc	r11, r11
    2512:	aa 0c       	add	r10, r10
    2514:	bb 1c       	adc	r11, r11
    2516:	aa 0c       	add	r10, r10
    2518:	bb 1c       	adc	r11, r11
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	8c 0f       	add	r24, r28
    2520:	9d 1f       	adc	r25, r29
    2522:	a8 0e       	add	r10, r24
    2524:	b9 1e       	adc	r11, r25
    2526:	2b c0       	rjmp	.+86     	; 0x257e <effect_smileyspin+0x380>
    2528:	42 2d       	mov	r20, r2
    252a:	40 1b       	sub	r20, r16
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    252c:	69 2d       	mov	r22, r9
    252e:	85 2d       	mov	r24, r5
    2530:	0e 94 56 16 	call	0x2cac	; 0x2cac <font_getbitmappixel>
    2534:	88 23       	and	r24, r24
    2536:	a1 f0       	breq	.+40     	; 0x2560 <effect_smileyspin+0x362>
						if (!flip)
    2538:	61 14       	cp	r6, r1
    253a:	71 04       	cpc	r7, r1
    253c:	51 f4       	brne	.+20     	; 0x2552 <effect_smileyspin+0x354>
    253e:	f5 01       	movw	r30, r10
    2540:	e0 0f       	add	r30, r16
    2542:	f1 1f       	adc	r31, r17
							setvoxel(y,dybde[8 * off + d++],x);
    2544:	60 81       	ld	r22, Z
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	a6 01       	movw	r20, r12
    254a:	c8 01       	movw	r24, r16
    254c:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <effect_smileyspin+0x362>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2552:	f7 01       	movw	r30, r14
    2554:	60 81       	ld	r22, Z
    2556:	70 e0       	ldi	r23, 0x00	; 0
    2558:	a6 01       	movw	r20, r12
    255a:	c8 01       	movw	r24, r16
    255c:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    2560:	0f 5f       	subi	r16, 0xFF	; 255
    2562:	1f 4f       	sbci	r17, 0xFF	; 255
    2564:	f1 e0       	ldi	r31, 0x01	; 1
    2566:	ef 1a       	sub	r14, r31
    2568:	f1 08       	sbc	r15, r1
    256a:	08 30       	cpi	r16, 0x08	; 8
    256c:	11 05       	cpc	r17, r1
    256e:	e1 f6       	brne	.-72     	; 0x2528 <effect_smileyspin+0x32a>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2570:	2f ef       	ldi	r18, 0xFF	; 255
    2572:	c2 1a       	sub	r12, r18
    2574:	d2 0a       	sbc	r13, r18
    2576:	38 e0       	ldi	r19, 0x08	; 8
    2578:	c3 16       	cp	r12, r19
    257a:	d1 04       	cpc	r13, r1
    257c:	39 f0       	breq	.+14     	; 0x258c <effect_smileyspin+0x38e>
    257e:	e9 a0       	ldd	r14, Y+33	; 0x21
    2580:	fa a0       	ldd	r15, Y+34	; 0x22
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2582:	08 2d       	mov	r16, r8
    2584:	14 2d       	mov	r17, r4
    2586:	92 2c       	mov	r9, r2
    2588:	9c 18       	sub	r9, r12
    258a:	ce cf       	rjmp	.-100    	; 0x2528 <effect_smileyspin+0x32a>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    258c:	8a a5       	ldd	r24, Y+42	; 0x2a
    258e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2590:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			fill(0x00);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    259a:	8d a1       	ldd	r24, Y+37	; 0x25
    259c:	9e a1       	ldd	r25, Y+38	; 0x26
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9e a3       	std	Y+38, r25	; 0x26
    25a2:	8d a3       	std	Y+37, r24	; 0x25

		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
    25a4:	89 2b       	or	r24, r25
    25a6:	09 f0       	breq	.+2      	; 0x25aa <effect_smileyspin+0x3ac>
    25a8:	81 cf       	rjmp	.-254    	; 0x24ac <effect_smileyspin+0x2ae>
    25aa:	97 e0       	ldi	r25, 0x07	; 7
    25ac:	9f a3       	std	Y+39, r25	; 0x27
    25ae:	18 a6       	std	Y+40, r1	; 0x28
    25b0:	1e a2       	std	Y+38, r1	; 0x26
    25b2:	1d a2       	std	Y+37, r1	; 0x25
    25b4:	61 2c       	mov	r6, r1
    25b6:	71 2c       	mov	r7, r1
    25b8:	4d a4       	ldd	r4, Y+45	; 0x2d
    25ba:	8d a8       	ldd	r8, Y+53	; 0x35
    25bc:	3e a8       	ldd	r3, Y+54	; 0x36
		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    25be:	61 14       	cp	r6, r1
    25c0:	71 04       	cpc	r7, r1
    25c2:	41 f4       	brne	.+16     	; 0x25d4 <effect_smileyspin+0x3d6>
				off++;
    25c4:	ed a1       	ldd	r30, Y+37	; 0x25
    25c6:	fe a1       	ldd	r31, Y+38	; 0x26
    25c8:	31 96       	adiw	r30, 0x01	; 1
    25ca:	fe a3       	std	Y+38, r31	; 0x26
    25cc:	ed a3       	std	Y+37, r30	; 0x25
				if (off == 4){
    25ce:	34 97       	sbiw	r30, 0x04	; 4
    25d0:	71 f4       	brne	.+28     	; 0x25ee <effect_smileyspin+0x3f0>
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <effect_smileyspin+0x3e4>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    25d4:	2d a1       	ldd	r18, Y+37	; 0x25
    25d6:	3e a1       	ldd	r19, Y+38	; 0x26
    25d8:	2f 5f       	subi	r18, 0xFF	; 255
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	3e a3       	std	Y+38, r19	; 0x26
    25de:	2d a3       	std	Y+37, r18	; 0x25
    25e0:	06 c0       	rjmp	.+12     	; 0x25ee <effect_smileyspin+0x3f0>
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
					off = 0;
    25e2:	39 a5       	ldd	r19, Y+41	; 0x29
    25e4:	3d a3       	std	Y+37, r19	; 0x25
    25e6:	4e a2       	std	Y+38, r4	; 0x26
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    25e8:	66 24       	eor	r6, r6
    25ea:	63 94       	inc	r6
    25ec:	71 2c       	mov	r7, r1
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	ed a1       	ldd	r30, Y+37	; 0x25
    25f4:	fe a1       	ldd	r31, Y+38	; 0x26
    25f6:	8e 1b       	sub	r24, r30
    25f8:	9f 0b       	sbc	r25, r31
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	4f 96       	adiw	r24, 0x1f	; 31
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2608:	a9 a4       	ldd	r10, Y+41	; 0x29
    260a:	b4 2c       	mov	r11, r4
    260c:	21 e0       	ldi	r18, 0x01	; 1
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	2c 0f       	add	r18, r28
    2612:	3d 1f       	adc	r19, r29
    2614:	28 0f       	add	r18, r24
    2616:	39 1f       	adc	r19, r25
    2618:	3a a3       	std	Y+34, r19	; 0x22
    261a:	29 a3       	std	Y+33, r18	; 0x21
    261c:	cf 01       	movw	r24, r30
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	e1 e0       	ldi	r30, 0x01	; 1
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	ec 0f       	add	r30, r28
    2630:	fd 1f       	adc	r31, r29
    2632:	e8 0f       	add	r30, r24
    2634:	f9 1f       	adc	r31, r25
    2636:	fc a3       	std	Y+36, r31	; 0x24
    2638:	eb a3       	std	Y+35, r30	; 0x23
    263a:	2c c0       	rjmp	.+88     	; 0x2694 <effect_smileyspin+0x496>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    263c:	40 2f       	mov	r20, r16
    263e:	69 2d       	mov	r22, r9
    2640:	85 2d       	mov	r24, r5
    2642:	0e 94 56 16 	call	0x2cac	; 0x2cac <font_getbitmappixel>
    2646:	88 23       	and	r24, r24
    2648:	91 f0       	breq	.+36     	; 0x266e <effect_smileyspin+0x470>
						if (!flip)
    264a:	61 14       	cp	r6, r1
    264c:	71 04       	cpc	r7, r1
    264e:	41 f4       	brne	.+16     	; 0x2660 <effect_smileyspin+0x462>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2650:	f7 01       	movw	r30, r14
    2652:	80 81       	ld	r24, Z
    2654:	a5 01       	movw	r20, r10
    2656:	b8 01       	movw	r22, r16
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    265e:	07 c0       	rjmp	.+14     	; 0x266e <effect_smileyspin+0x470>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2660:	f6 01       	movw	r30, r12
    2662:	80 81       	ld	r24, Z
    2664:	a5 01       	movw	r20, r10
    2666:	b8 01       	movw	r22, r16
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    266e:	01 50       	subi	r16, 0x01	; 1
    2670:	11 09       	sbc	r17, r1
    2672:	f1 e0       	ldi	r31, 0x01	; 1
    2674:	cf 1a       	sub	r12, r31
    2676:	d1 08       	sbc	r13, r1
    2678:	2f ef       	ldi	r18, 0xFF	; 255
    267a:	e2 1a       	sub	r14, r18
    267c:	f2 0a       	sbc	r15, r18
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    267e:	0f 3f       	cpi	r16, 0xFF	; 255
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	13 07       	cpc	r17, r19
    2684:	d9 f6       	brne	.-74     	; 0x263c <effect_smileyspin+0x43e>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2686:	8f ef       	ldi	r24, 0xFF	; 255
    2688:	a8 1a       	sub	r10, r24
    268a:	b8 0a       	sbc	r11, r24
    268c:	98 e0       	ldi	r25, 0x08	; 8
    268e:	a9 16       	cp	r10, r25
    2690:	b1 04       	cpc	r11, r1
    2692:	49 f0       	breq	.+18     	; 0x26a6 <effect_smileyspin+0x4a8>
    2694:	c9 a0       	ldd	r12, Y+33	; 0x21
    2696:	da a0       	ldd	r13, Y+34	; 0x22
    2698:	eb a0       	ldd	r14, Y+35	; 0x23
    269a:	fc a0       	ldd	r15, Y+36	; 0x24
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    269c:	08 2d       	mov	r16, r8
    269e:	13 2d       	mov	r17, r3
    26a0:	92 2c       	mov	r9, r2
    26a2:	9a 18       	sub	r9, r10
    26a4:	cb cf       	rjmp	.-106    	; 0x263c <effect_smileyspin+0x43e>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    26a6:	8a a5       	ldd	r24, Y+42	; 0x2a
    26a8:	9b a5       	ldd	r25, Y+43	; 0x2b
    26aa:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			fill(0x00);
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	0e 94 99 01 	call	0x332	; 0x332 <fill>
    26b4:	ef a1       	ldd	r30, Y+39	; 0x27
    26b6:	f8 a5       	ldd	r31, Y+40	; 0x28
    26b8:	31 97       	sbiw	r30, 0x01	; 1
    26ba:	f8 a7       	std	Y+40, r31	; 0x28
    26bc:	ef a3       	std	Y+39, r30	; 0x27

		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    26be:	ef 2b       	or	r30, r31
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <effect_smileyspin+0x4c6>
    26c2:	7d cf       	rjmp	.-262    	; 0x25be <effect_smileyspin+0x3c0>
{
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    26c4:	2e a5       	ldd	r18, Y+46	; 0x2e
    26c6:	3f a5       	ldd	r19, Y+47	; 0x2f
    26c8:	2f 5f       	subi	r18, 0xFF	; 255
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	3f a7       	std	Y+47, r19	; 0x2f
    26ce:	2e a7       	std	Y+46, r18	; 0x2e
    26d0:	88 a9       	ldd	r24, Y+48	; 0x30
    26d2:	99 a9       	ldd	r25, Y+49	; 0x31
    26d4:	28 17       	cp	r18, r24
    26d6:	39 07       	cpc	r19, r25
    26d8:	59 f0       	breq	.+22     	; 0x26f0 <effect_smileyspin+0x4f2>
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
{
    26da:	97 e0       	ldi	r25, 0x07	; 7
    26dc:	9d a3       	std	Y+37, r25	; 0x25
    26de:	1e a2       	std	Y+38, r1	; 0x26
    26e0:	1c a2       	std	Y+36, r1	; 0x24
    26e2:	1b a2       	std	Y+35, r1	; 0x23
    26e4:	61 2c       	mov	r6, r1
    26e6:	71 2c       	mov	r7, r1
    26e8:	3c a8       	ldd	r3, Y+52	; 0x34
    26ea:	8a a8       	ldd	r8, Y+50	; 0x32
    26ec:	4b a8       	ldd	r4, Y+51	; 0x33
    26ee:	c5 cd       	rjmp	.-1142   	; 0x227a <effect_smileyspin+0x7c>
			delay_ms(delay);
			fill(0x00);
		}

	}
}
    26f0:	e6 96       	adiw	r28, 0x36	; 54
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	df 90       	pop	r13
    270a:	cf 90       	pop	r12
    270c:	bf 90       	pop	r11
    270e:	af 90       	pop	r10
    2710:	9f 90       	pop	r9
    2712:	8f 90       	pop	r8
    2714:	7f 90       	pop	r7
    2716:	6f 90       	pop	r6
    2718:	5f 90       	pop	r5
    271a:	4f 90       	pop	r4
    271c:	3f 90       	pop	r3
    271e:	2f 90       	pop	r2
    2720:	08 95       	ret

00002722 <effect_pathmove>:


void effect_pathmove (unsigned char *path, int length)
{
    2722:	8f 92       	push	r8
    2724:	9f 92       	push	r9
    2726:	af 92       	push	r10
    2728:	bf 92       	push	r11
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	5c 01       	movw	r10, r24
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
    273c:	6b 01       	movw	r12, r22
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	c8 1a       	sub	r12, r24
    2742:	d1 08       	sbc	r13, r1
    2744:	1c 14       	cp	r1, r12
    2746:	1d 04       	cpc	r1, r13
    2748:	0c f0       	brlt	.+2      	; 0x274c <effect_pathmove+0x2a>
    274a:	42 c0       	rjmp	.+132    	; 0x27d0 <effect_pathmove+0xae>
    274c:	85 01       	movw	r16, r10
    274e:	0c 0d       	add	r16, r12
    2750:	1d 1d       	adc	r17, r13
	}
}


void effect_pathmove (unsigned char *path, int length)
{
    2752:	81 2c       	mov	r8, r1
    2754:	91 2c       	mov	r9, r1
    2756:	25 c0       	rjmp	.+74     	; 0x27a2 <effect_pathmove+0x80>
	for (i=(length-1);i>=1;i--)
	{
		for (z=0;z<8;z++)
		{
		
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
    2758:	f7 01       	movw	r30, r14
    275a:	80 81       	ld	r24, Z
    275c:	68 2f       	mov	r22, r24
    275e:	6f 70       	andi	r22, 0x0F	; 15
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	82 95       	swap	r24
    2764:	8f 70       	andi	r24, 0x0F	; 15
    2766:	ae 01       	movw	r20, r28
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <getvoxel>
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
    276e:	f8 01       	movw	r30, r16
    2770:	90 81       	ld	r25, Z
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	69 2f       	mov	r22, r25
    2778:	6f 70       	andi	r22, 0x0F	; 15
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	89 2f       	mov	r24, r25
    277e:	82 95       	swap	r24
    2780:	8f 70       	andi	r24, 0x0F	; 15
    2782:	ae 01       	movw	r20, r28
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <altervoxel>
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
	{
		for (z=0;z<8;z++)
    278a:	21 96       	adiw	r28, 0x01	; 1
    278c:	c8 30       	cpi	r28, 0x08	; 8
    278e:	d1 05       	cpc	r29, r1
    2790:	19 f7       	brne	.-58     	; 0x2758 <effect_pathmove+0x36>
void effect_pathmove (unsigned char *path, int length)
{
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
    2792:	f1 e0       	ldi	r31, 0x01	; 1
    2794:	cf 1a       	sub	r12, r31
    2796:	d1 08       	sbc	r13, r1
    2798:	01 50       	subi	r16, 0x01	; 1
    279a:	11 09       	sbc	r17, r1
    279c:	c1 14       	cp	r12, r1
    279e:	d1 04       	cpc	r13, r1
    27a0:	b9 f0       	breq	.+46     	; 0x27d0 <effect_pathmove+0xae>
	}
}


void effect_pathmove (unsigned char *path, int length)
{
    27a2:	c8 2d       	mov	r28, r8
    27a4:	d9 2d       	mov	r29, r9
    27a6:	78 01       	movw	r14, r16
    27a8:	f1 e0       	ldi	r31, 0x01	; 1
    27aa:	ef 1a       	sub	r14, r31
    27ac:	f1 08       	sbc	r15, r1
    27ae:	d4 cf       	rjmp	.-88     	; 0x2758 <effect_pathmove+0x36>
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
    27b0:	f5 01       	movw	r30, r10
    27b2:	80 81       	ld	r24, Z
    27b4:	68 2f       	mov	r22, r24
    27b6:	6f 70       	andi	r22, 0x0F	; 15
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	82 95       	swap	r24
    27bc:	8f 70       	andi	r24, 0x0F	; 15
    27be:	ae 01       	movw	r20, r28
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
		
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
    27c6:	21 96       	adiw	r28, 0x01	; 1
    27c8:	c8 30       	cpi	r28, 0x08	; 8
    27ca:	d1 05       	cpc	r29, r1
    27cc:	89 f7       	brne	.-30     	; 0x27b0 <effect_pathmove+0x8e>
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <effect_pathmove+0xb4>
	}
}


void effect_pathmove (unsigned char *path, int length)
{
    27d0:	c0 e0       	ldi	r28, 0x00	; 0
    27d2:	d0 e0       	ldi	r29, 0x00	; 0
    27d4:	ed cf       	rjmp	.-38     	; 0x27b0 <effect_pathmove+0x8e>
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
}
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	bf 90       	pop	r11
    27e8:	af 90       	pop	r10
    27ea:	9f 90       	pop	r9
    27ec:	8f 90       	pop	r8
    27ee:	08 95       	ret

000027f0 <effect_rand_patharound>:

void effect_rand_patharound (int iterations, int delay)
{
    27f0:	4f 92       	push	r4
    27f2:	5f 92       	push	r5
    27f4:	6f 92       	push	r6
    27f6:	7f 92       	push	r7
    27f8:	8f 92       	push	r8
    27fa:	9f 92       	push	r9
    27fc:	af 92       	push	r10
    27fe:	bf 92       	push	r11
    2800:	cf 92       	push	r12
    2802:	df 92       	push	r13
    2804:	ef 92       	push	r14
    2806:	ff 92       	push	r15
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	6c 97       	sbiw	r28, 0x1c	; 28
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	6c 01       	movw	r12, r24
    2822:	5b 01       	movw	r10, r22
	int z, dz, i;
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
    2824:	4c e1       	ldi	r20, 0x1C	; 28
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	be 01       	movw	r22, r28
    282a:	6f 5f       	subi	r22, 0xFF	; 255
    282c:	7f 4f       	sbci	r23, 0xFF	; 255
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <font_getpath>
	
	for (i = 0; i < iterations; i++)
    2834:	1c 14       	cp	r1, r12
    2836:	1d 04       	cpc	r1, r13
    2838:	bc f5       	brge	.+110    	; 0x28a8 <effect_rand_patharound+0xb8>
    283a:	e1 2c       	mov	r14, r1
    283c:	f1 2c       	mov	r15, r1
}

void effect_rand_patharound (int iterations, int delay)
{
	int z, dz, i;
	z = 4;
    283e:	04 e0       	ldi	r16, 0x04	; 4
    2840:	10 e0       	ldi	r17, 0x00	; 0
	
	font_getpath(0,path,28);
	
	for (i = 0; i < iterations; i++)
	{
		dz = ((rand()%3)-1);
    2842:	0f 2e       	mov	r0, r31
    2844:	f3 e0       	ldi	r31, 0x03	; 3
    2846:	8f 2e       	mov	r8, r31
    2848:	91 2c       	mov	r9, r1
    284a:	f0 2d       	mov	r31, r0
    284c:	0f 2e       	mov	r0, r31
    284e:	f7 e0       	ldi	r31, 0x07	; 7
    2850:	6f 2e       	mov	r6, r31
    2852:	f0 2d       	mov	r31, r0
    2854:	71 2c       	mov	r7, r1
    2856:	41 2c       	mov	r4, r1
    2858:	51 2c       	mov	r5, r1
    285a:	0e 94 ae 19 	call	0x335c	; 0x335c <rand>
    285e:	b4 01       	movw	r22, r8
    2860:	0e 94 32 19 	call	0x3264	; 0x3264 <__divmodhi4>
    2864:	01 97       	sbiw	r24, 0x01	; 1
		z += dz;
    2866:	08 0f       	add	r16, r24
    2868:	19 1f       	adc	r17, r25
    286a:	08 30       	cpi	r16, 0x08	; 8
    286c:	11 05       	cpc	r17, r1
    286e:	14 f0       	brlt	.+4      	; 0x2874 <effect_rand_patharound+0x84>
    2870:	06 2d       	mov	r16, r6
    2872:	17 2d       	mov	r17, r7
    2874:	11 23       	and	r17, r17
    2876:	14 f4       	brge	.+4      	; 0x287c <effect_rand_patharound+0x8c>
    2878:	04 2d       	mov	r16, r4
    287a:	15 2d       	mov	r17, r5
			z = 7;
			
		if (z<0)
			z = 0;
		
		effect_pathmove(path, 28);
    287c:	6c e1       	ldi	r22, 0x1C	; 28
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	ce 01       	movw	r24, r28
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
		setvoxel(0,7,z);
    2888:	a8 01       	movw	r20, r16
    288a:	66 2d       	mov	r22, r6
    288c:	77 2d       	mov	r23, r7
    288e:	84 2d       	mov	r24, r4
    2890:	95 2d       	mov	r25, r5
    2892:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		delay_ms(delay);
    2896:	c5 01       	movw	r24, r10
    2898:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
	
	for (i = 0; i < iterations; i++)
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	e8 1a       	sub	r14, r24
    28a0:	f8 0a       	sbc	r15, r24
    28a2:	ec 14       	cp	r14, r12
    28a4:	fd 04       	cpc	r15, r13
    28a6:	c9 f6       	brne	.-78     	; 0x285a <effect_rand_patharound+0x6a>
		
		effect_pathmove(path, 28);
		setvoxel(0,7,z);
		delay_ms(delay);
	}
}
    28a8:	6c 96       	adiw	r28, 0x1c	; 28
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	df 90       	pop	r13
    28c2:	cf 90       	pop	r12
    28c4:	bf 90       	pop	r11
    28c6:	af 90       	pop	r10
    28c8:	9f 90       	pop	r9
    28ca:	8f 90       	pop	r8
    28cc:	7f 90       	pop	r7
    28ce:	6f 90       	pop	r6
    28d0:	5f 90       	pop	r5
    28d2:	4f 90       	pop	r4
    28d4:	08 95       	ret

000028d6 <effect_pathspiral>:

void effect_pathspiral (int iterations, int delay)
{
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	60 97       	sbiw	r28, 0x10	; 16
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	7c 01       	movw	r14, r24
    28f8:	6b 01       	movw	r12, r22
	int z, i;
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
    28fa:	40 e1       	ldi	r20, 0x10	; 16
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	be 01       	movw	r22, r28
    2900:	6f 5f       	subi	r22, 0xFF	; 255
    2902:	7f 4f       	sbci	r23, 0xFF	; 255
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <font_getpath>
	
	for (i = 0; i < iterations; i++)
    290a:	1e 14       	cp	r1, r14
    290c:	1f 04       	cpc	r1, r15
    290e:	0c f5       	brge	.+66     	; 0x2952 <effect_pathspiral+0x7c>
    2910:	00 e0       	ldi	r16, 0x00	; 0
    2912:	10 e0       	ldi	r17, 0x00	; 0
	{
		setvoxel(4,0,i%8);
    2914:	a8 01       	movw	r20, r16
    2916:	47 70       	andi	r20, 0x07	; 7
    2918:	50 78       	andi	r21, 0x80	; 128
    291a:	55 23       	and	r21, r21
    291c:	34 f4       	brge	.+12     	; 0x292a <effect_pathspiral+0x54>
    291e:	41 50       	subi	r20, 0x01	; 1
    2920:	51 09       	sbc	r21, r1
    2922:	48 6f       	ori	r20, 0xF8	; 248
    2924:	5f 6f       	ori	r21, 0xFF	; 255
    2926:	4f 5f       	subi	r20, 0xFF	; 255
    2928:	5f 4f       	sbci	r21, 0xFF	; 255
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	84 e0       	ldi	r24, 0x04	; 4
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
		delay_ms(delay);
    2936:	c6 01       	movw	r24, r12
    2938:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		effect_pathmove(path, 28);
    293c:	6c e1       	ldi	r22, 0x1C	; 28
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	ce 01       	movw	r24, r28
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
    2948:	0f 5f       	subi	r16, 0xFF	; 255
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	0e 15       	cp	r16, r14
    294e:	1f 05       	cpc	r17, r15
    2950:	09 f7       	brne	.-62     	; 0x2914 <effect_pathspiral+0x3e>
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
		
	}
}
    2952:	60 96       	adiw	r28, 0x10	; 16
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	1f 91       	pop	r17
    2964:	0f 91       	pop	r16
    2966:	ff 90       	pop	r15
    2968:	ef 90       	pop	r14
    296a:	df 90       	pop	r13
    296c:	cf 90       	pop	r12
    296e:	08 95       	ret

00002970 <effect_path_text>:

void effect_path_text (int delay, char *str)
{
    2970:	2f 92       	push	r2
    2972:	3f 92       	push	r3
    2974:	4f 92       	push	r4
    2976:	5f 92       	push	r5
    2978:	6f 92       	push	r6
    297a:	7f 92       	push	r7
    297c:	8f 92       	push	r8
    297e:	9f 92       	push	r9
    2980:	af 92       	push	r10
    2982:	bf 92       	push	r11
    2984:	cf 92       	push	r12
    2986:	df 92       	push	r13
    2988:	ef 92       	push	r14
    298a:	ff 92       	push	r15
    298c:	0f 93       	push	r16
    298e:	1f 93       	push	r17
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	a5 97       	sbiw	r28, 0x25	; 37
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	8a a3       	std	Y+34, r24	; 0x22
    29a6:	9b a3       	std	Y+35, r25	; 0x23
    29a8:	8b 01       	movw	r16, r22
	int z, i,ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    29aa:	4c e1       	ldi	r20, 0x1C	; 28
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	be 01       	movw	r22, r28
    29b0:	6f 5f       	subi	r22, 0xFF	; 255
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <font_getpath>
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str)
    29ba:	f8 01       	movw	r30, r16
    29bc:	80 81       	ld	r24, Z
    29be:	88 23       	and	r24, r24
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <effect_path_text+0x54>
    29c2:	70 c0       	rjmp	.+224    	; 0x2aa4 <effect_path_text+0x134>
    29c4:	98 01       	movw	r18, r16
    29c6:	2f 5f       	subi	r18, 0xFF	; 255
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	3d a3       	std	Y+37, r19	; 0x25
    29cc:	2c a3       	std	Y+36, r18	; 0x24
    29ce:	4e 01       	movw	r8, r28
    29d0:	32 e2       	ldi	r19, 0x22	; 34
    29d2:	83 0e       	add	r8, r19
    29d4:	91 1c       	adc	r9, r1
    29d6:	0f 2e       	mov	r0, r31
    29d8:	f7 e0       	ldi	r31, 0x07	; 7
    29da:	cf 2e       	mov	r12, r31
    29dc:	d1 2c       	mov	r13, r1
    29de:	f0 2d       	mov	r31, r0
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++)
    29e0:	61 2c       	mov	r6, r1
    29e2:	71 2c       	mov	r7, r1
    29e4:	4c 2c       	mov	r4, r12
    29e6:	5d 2c       	mov	r5, r13
					clrvoxel(0,7,z);
				}
				
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
    29e8:	2a a0       	ldd	r2, Y+34	; 0x22
    29ea:	3b a0       	ldd	r3, Y+35	; 0x23
	while (*str)
	{
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
    29ec:	be 01       	movw	r22, r28
    29ee:	63 5e       	subi	r22, 0xE3	; 227
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255
    29f2:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <font_getchar>
    29f6:	ce 01       	movw	r24, r28
    29f8:	4d 96       	adiw	r24, 0x1d	; 29
    29fa:	5c 01       	movw	r10, r24
		
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    29fc:	f5 01       	movw	r30, r10
    29fe:	e1 90       	ld	r14, Z+
    2a00:	5f 01       	movw	r10, r30
			
			for (z=0;z<8;z++)
    2a02:	06 2d       	mov	r16, r6
    2a04:	17 2d       	mov	r17, r7
			{
				if ((stripe>>(7-z)) & 0x01)
    2a06:	f1 2c       	mov	r15, r1
    2a08:	c6 01       	movw	r24, r12
    2a0a:	80 1b       	sub	r24, r16
    2a0c:	91 0b       	sbc	r25, r17
    2a0e:	97 01       	movw	r18, r14
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <effect_path_text+0xa6>
    2a12:	35 95       	asr	r19
    2a14:	27 95       	ror	r18
    2a16:	8a 95       	dec	r24
    2a18:	e2 f7       	brpl	.-8      	; 0x2a12 <effect_path_text+0xa2>
    2a1a:	20 ff       	sbrs	r18, 0
    2a1c:	08 c0       	rjmp	.+16     	; 0x2a2e <effect_path_text+0xbe>
				{
					setvoxel(0,7,z);
    2a1e:	a8 01       	movw	r20, r16
    2a20:	64 2d       	mov	r22, r4
    2a22:	75 2d       	mov	r23, r5
    2a24:	86 2d       	mov	r24, r6
    2a26:	97 2d       	mov	r25, r7
    2a28:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    2a2c:	07 c0       	rjmp	.+14     	; 0x2a3c <effect_path_text+0xcc>
				} else
				{
					clrvoxel(0,7,z);
    2a2e:	a8 01       	movw	r20, r16
    2a30:	64 2d       	mov	r22, r4
    2a32:	75 2d       	mov	r23, r5
    2a34:	86 2d       	mov	r24, r6
    2a36:	97 2d       	mov	r25, r7
    2a38:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++)
    2a3c:	0f 5f       	subi	r16, 0xFF	; 255
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	08 30       	cpi	r16, 0x08	; 8
    2a42:	11 05       	cpc	r17, r1
    2a44:	09 f7       	brne	.-62     	; 0x2a08 <effect_path_text+0x98>
				{
					clrvoxel(0,7,z);
				}
				
			}
			effect_pathmove(path, 28);
    2a46:	6c e1       	ldi	r22, 0x1C	; 28
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
			delay_ms(delay);
    2a52:	82 2d       	mov	r24, r2
    2a54:	93 2d       	mov	r25, r3
    2a56:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++)
    2a5a:	a8 14       	cp	r10, r8
    2a5c:	b9 04       	cpc	r11, r9
    2a5e:	71 f6       	brne	.-100    	; 0x29fc <effect_path_text+0x8c>
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
		}
	
		effect_pathmove(path, 28);
    2a60:	6c e1       	ldi	r22, 0x1C	; 28
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	ce 01       	movw	r24, r28
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
		delay_ms(delay);
    2a6c:	82 2d       	mov	r24, r2
    2a6e:	93 2d       	mov	r25, r3
    2a70:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
	font_getpath(0,path,28);
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str)
    2a74:	ec a1       	ldd	r30, Y+36	; 0x24
    2a76:	fd a1       	ldd	r31, Y+37	; 0x25
    2a78:	81 91       	ld	r24, Z+
    2a7a:	fd a3       	std	Y+37, r31	; 0x25
    2a7c:	ec a3       	std	Y+36, r30	; 0x24
    2a7e:	81 11       	cpse	r24, r1
    2a80:	b5 cf       	rjmp	.-150    	; 0x29ec <effect_path_text+0x7c>
    2a82:	10 c0       	rjmp	.+32     	; 0x2aa4 <effect_path_text+0x134>
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
	{
		effect_pathmove(path, 28);
    2a84:	6c e1       	ldi	r22, 0x1C	; 28
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	ce 01       	movw	r24, r28
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
		delay_ms(delay);
    2a90:	8a a1       	ldd	r24, Y+34	; 0x22
    2a92:	9b a1       	ldd	r25, Y+35	; 0x23
    2a94:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
    2a98:	01 50       	subi	r16, 0x01	; 1
    2a9a:	11 09       	sbc	r17, r1
		}
	
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
    2a9c:	01 15       	cp	r16, r1
    2a9e:	11 05       	cpc	r17, r1
    2aa0:	89 f7       	brne	.-30     	; 0x2a84 <effect_path_text+0x114>
    2aa2:	03 c0       	rjmp	.+6      	; 0x2aaa <effect_path_text+0x13a>
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++)
    2aa4:	0c e1       	ldi	r16, 0x1C	; 28
    2aa6:	10 e0       	ldi	r17, 0x00	; 0
    2aa8:	ed cf       	rjmp	.-38     	; 0x2a84 <effect_path_text+0x114>
	for (i=0;i<28;i++)
	{
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
}
    2aaa:	a5 96       	adiw	r28, 0x25	; 37
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	df 90       	pop	r13
    2ac4:	cf 90       	pop	r12
    2ac6:	bf 90       	pop	r11
    2ac8:	af 90       	pop	r10
    2aca:	9f 90       	pop	r9
    2acc:	8f 90       	pop	r8
    2ace:	7f 90       	pop	r7
    2ad0:	6f 90       	pop	r6
    2ad2:	5f 90       	pop	r5
    2ad4:	4f 90       	pop	r4
    2ad6:	3f 90       	pop	r3
    2ad8:	2f 90       	pop	r2
    2ada:	08 95       	ret

00002adc <effect_path_bitmap>:

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2adc:	2f 92       	push	r2
    2ade:	3f 92       	push	r3
    2ae0:	4f 92       	push	r4
    2ae2:	5f 92       	push	r5
    2ae4:	6f 92       	push	r6
    2ae6:	7f 92       	push	r7
    2ae8:	8f 92       	push	r8
    2aea:	9f 92       	push	r9
    2aec:	af 92       	push	r10
    2aee:	bf 92       	push	r11
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	6c 97       	sbiw	r28, 0x1c	; 28
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	58 2e       	mov	r5, r24
    2b12:	49 2e       	mov	r4, r25
    2b14:	86 2e       	mov	r8, r22
    2b16:	6a 01       	movw	r12, r20
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    2b18:	4c e1       	ldi	r20, 0x1C	; 28
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	be 01       	movw	r22, r28
    2b1e:	6f 5f       	subi	r22, 0xFF	; 255
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <font_getpath>
	
	for (i=0; i < iterations; i++)
    2b28:	1c 14       	cp	r1, r12
    2b2a:	1d 04       	cpc	r1, r13
    2b2c:	0c f0       	brlt	.+2      	; 0x2b30 <effect_path_bitmap+0x54>
    2b2e:	62 c0       	rjmp	.+196    	; 0x2bf4 <effect_path_bitmap+0x118>
    2b30:	e1 2c       	mov	r14, r1
    2b32:	f1 2c       	mov	r15, r1
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2b34:	31 2c       	mov	r3, r1
    2b36:	0f 2e       	mov	r0, r31
    2b38:	f7 e0       	ldi	r31, 0x07	; 7
    2b3a:	9f 2e       	mov	r9, r31
    2b3c:	f0 2d       	mov	r31, r0
    2b3e:	a1 2c       	mov	r10, r1
    2b40:	b1 2c       	mov	r11, r1
				{
					clrvoxel(0,7,z);
				}
				
			}
			delay_ms(delay);
    2b42:	65 2c       	mov	r6, r5
    2b44:	74 2c       	mov	r7, r4
    2b46:	44 c0       	rjmp	.+136    	; 0x2bd0 <effect_path_bitmap+0xf4>
	{	
		for (ii=0;ii<8;ii++)
		{		
			for (z=0;z<8;z++)
			{
				if (font_getbitmappixel(bitmap,(7-z),ii))
    2b48:	42 2d       	mov	r20, r2
    2b4a:	69 2d       	mov	r22, r9
    2b4c:	60 1b       	sub	r22, r16
    2b4e:	88 2d       	mov	r24, r8
    2b50:	0e 94 56 16 	call	0x2cac	; 0x2cac <font_getbitmappixel>
    2b54:	88 23       	and	r24, r24
    2b56:	41 f0       	breq	.+16     	; 0x2b68 <effect_path_bitmap+0x8c>
				{
					setvoxel(0,7,z);
    2b58:	a8 01       	movw	r20, r16
    2b5a:	67 e0       	ldi	r22, 0x07	; 7
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	8a 2d       	mov	r24, r10
    2b60:	9b 2d       	mov	r25, r11
    2b62:	0e 94 87 00 	call	0x10e	; 0x10e <setvoxel>
    2b66:	07 c0       	rjmp	.+14     	; 0x2b76 <effect_path_bitmap+0x9a>
				} else
				{
					clrvoxel(0,7,z);
    2b68:	a8 01       	movw	r20, r16
    2b6a:	67 e0       	ldi	r22, 0x07	; 7
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	8a 2d       	mov	r24, r10
    2b70:	9b 2d       	mov	r25, r11
    2b72:	0e 94 ae 00 	call	0x15c	; 0x15c <clrvoxel>
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
		{		
			for (z=0;z<8;z++)
    2b76:	0f 5f       	subi	r16, 0xFF	; 255
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	08 30       	cpi	r16, 0x08	; 8
    2b7c:	11 05       	cpc	r17, r1
    2b7e:	21 f7       	brne	.-56     	; 0x2b48 <effect_path_bitmap+0x6c>
				{
					clrvoxel(0,7,z);
				}
				
			}
			delay_ms(delay);
    2b80:	86 2d       	mov	r24, r6
    2b82:	97 2d       	mov	r25, r7
    2b84:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			effect_pathmove(path, 28);
    2b88:	6c e1       	ldi	r22, 0x1C	; 28
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
    2b94:	23 94       	inc	r2
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
    2b96:	88 e0       	ldi	r24, 0x08	; 8
    2b98:	28 16       	cp	r2, r24
    2b9a:	19 f0       	breq	.+6      	; 0x2ba2 <effect_path_bitmap+0xc6>
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2b9c:	0a 2d       	mov	r16, r10
    2b9e:	1b 2d       	mov	r17, r11
    2ba0:	d3 cf       	rjmp	.-90     	; 0x2b48 <effect_path_bitmap+0x6c>
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
    2ba2:	04 e1       	ldi	r16, 0x14	; 20
    2ba4:	10 e0       	ldi	r17, 0x00	; 0
			effect_pathmove(path, 28);
		}
	
		for (ii=0;ii<20;ii++)
		{
			delay_ms(delay);
    2ba6:	86 2d       	mov	r24, r6
    2ba8:	97 2d       	mov	r25, r7
    2baa:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			effect_pathmove(path, 28);
    2bae:	6c e1       	ldi	r22, 0x1C	; 28
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	01 96       	adiw	r24, 0x01	; 1
    2bb6:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
    2bba:	01 50       	subi	r16, 0x01	; 1
    2bbc:	11 09       	sbc	r17, r1
			}
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	
		for (ii=0;ii<20;ii++)
    2bbe:	01 15       	cp	r16, r1
    2bc0:	11 05       	cpc	r17, r1
    2bc2:	89 f7       	brne	.-30     	; 0x2ba6 <effect_path_bitmap+0xca>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    2bc4:	8f ef       	ldi	r24, 0xFF	; 255
    2bc6:	e8 1a       	sub	r14, r24
    2bc8:	f8 0a       	sbc	r15, r24
    2bca:	ec 14       	cp	r14, r12
    2bcc:	fd 04       	cpc	r15, r13
    2bce:	91 f0       	breq	.+36     	; 0x2bf4 <effect_path_bitmap+0x118>
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2bd0:	23 2c       	mov	r2, r3
    2bd2:	e4 cf       	rjmp	.-56     	; 0x2b9c <effect_path_bitmap+0xc0>
			effect_pathmove(path, 28);
		}
	}
	for (ii=0;ii<10;ii++)
	{
		delay_ms(delay);
    2bd4:	85 2d       	mov	r24, r5
    2bd6:	94 2d       	mov	r25, r4
    2bd8:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		effect_pathmove(path, 28);
    2bdc:	6c e1       	ldi	r22, 0x1C	; 28
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	ce 01       	movw	r24, r28
    2be2:	01 96       	adiw	r24, 0x01	; 1
    2be4:	0e 94 91 13 	call	0x2722	; 0x2722 <effect_pathmove>
    2be8:	01 50       	subi	r16, 0x01	; 1
    2bea:	11 09       	sbc	r17, r1
		{
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	}
	for (ii=0;ii<10;ii++)
    2bec:	01 15       	cp	r16, r1
    2bee:	11 05       	cpc	r17, r1
    2bf0:	89 f7       	brne	.-30     	; 0x2bd4 <effect_path_bitmap+0xf8>
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <effect_path_bitmap+0x11e>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    2bf4:	0a e0       	ldi	r16, 0x0A	; 10
    2bf6:	10 e0       	ldi	r17, 0x00	; 0
    2bf8:	ed cf       	rjmp	.-38     	; 0x2bd4 <effect_path_bitmap+0xf8>
	for (ii=0;ii<10;ii++)
	{
		delay_ms(delay);
		effect_pathmove(path, 28);
	}
}
    2bfa:	6c 96       	adiw	r28, 0x1c	; 28
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	ff 90       	pop	r15
    2c10:	ef 90       	pop	r14
    2c12:	df 90       	pop	r13
    2c14:	cf 90       	pop	r12
    2c16:	bf 90       	pop	r11
    2c18:	af 90       	pop	r10
    2c1a:	9f 90       	pop	r9
    2c1c:	8f 90       	pop	r8
    2c1e:	7f 90       	pop	r7
    2c20:	6f 90       	pop	r6
    2c22:	5f 90       	pop	r5
    2c24:	4f 90       	pop	r4
    2c26:	3f 90       	pop	r3
    2c28:	2f 90       	pop	r2
    2c2a:	08 95       	ret

00002c2c <font_getpath>:
void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
	
	if (path == 1)
    2c2c:	81 30       	cpi	r24, 0x01	; 1
    2c2e:	19 f0       	breq	.+6      	; 0x2c36 <font_getpath+0xa>
0x04,0x03,0x12,0x21,0x30,0x40,0x51,0x62,0x73,0x74,0x65,0x56,0x47,0x37,0x26,0x15}; // circle, len 16, offset 28

void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
    2c30:	e0 e0       	ldi	r30, 0x00	; 0
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <font_getpath+0xe>
	
	if (path == 1)
		offset=28;
    2c36:	ec e1       	ldi	r30, 0x1C	; 28
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
	
	for (i = 0; i < length; i++)
    2c3a:	14 16       	cp	r1, r20
    2c3c:	15 06       	cpc	r1, r21
    2c3e:	5c f4       	brge	.+22     	; 0x2c56 <font_getpath+0x2a>
    2c40:	ea 57       	subi	r30, 0x7A	; 122
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	db 01       	movw	r26, r22
    2c46:	64 0f       	add	r22, r20
    2c48:	75 1f       	adc	r23, r21
		destination[i] = pgm_read_byte(&paths[i+offset]);
    2c4a:	84 91       	lpm	r24, Z
    2c4c:	8d 93       	st	X+, r24
    2c4e:	31 96       	adiw	r30, 0x01	; 1
	int offset = 0;
	
	if (path == 1)
		offset=28;
	
	for (i = 0; i < length; i++)
    2c50:	a6 17       	cp	r26, r22
    2c52:	b7 07       	cpc	r27, r23
    2c54:	d1 f7       	brne	.-12     	; 0x2c4a <font_getpath+0x1e>
    2c56:	08 95       	ret

00002c58 <font_getchar>:
		destination[i] = pgm_read_byte(&paths[i+offset]);
}

void font_getchar (char chr, unsigned char dst[5])
{
    2c58:	ef 92       	push	r14
    2c5a:	ff 92       	push	r15
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
    2c64:	80 52       	subi	r24, 0x20	; 32
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	7c 01       	movw	r14, r24
    2c6a:	ee 0c       	add	r14, r14
    2c6c:	ff 1c       	adc	r15, r15
    2c6e:	ee 0c       	add	r14, r14
    2c70:	ff 1c       	adc	r15, r15
    2c72:	8e 0d       	add	r24, r14
    2c74:	9f 1d       	adc	r25, r15
    2c76:	06 2f       	mov	r16, r22
    2c78:	17 2f       	mov	r17, r23
    2c7a:	c0 e0       	ldi	r28, 0x00	; 0
    2c7c:	d0 e0       	ldi	r29, 0x00	; 0
    2c7e:	9c 01       	movw	r18, r24
    2c80:	28 5c       	subi	r18, 0xC8	; 200
    2c82:	3f 4f       	sbci	r19, 0xFF	; 255
    2c84:	79 01       	movw	r14, r18
    2c86:	c7 01       	movw	r24, r14
    2c88:	8c 0f       	add	r24, r28
    2c8a:	9d 1f       	adc	r25, r29
    2c8c:	0e 94 be 19 	call	0x337c	; 0x337c <__eerd_byte_m32>
    2c90:	f8 01       	movw	r30, r16
    2c92:	81 93       	st	Z+, r24
    2c94:	8f 01       	movw	r16, r30
    2c96:	21 96       	adiw	r28, 0x01	; 1
void font_getchar (char chr, unsigned char dst[5])
{
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
    2c98:	c5 30       	cpi	r28, 0x05	; 5
    2c9a:	d1 05       	cpc	r29, r1
    2c9c:	a1 f7       	brne	.-24     	; 0x2c86 <font_getchar+0x2e>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	08 95       	ret

00002cac <font_getbitmappixel>:
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    2cac:	cf 93       	push	r28
    2cae:	c4 2f       	mov	r28, r20
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	9b 01       	movw	r18, r22
    2cb4:	48 e0       	ldi	r20, 0x08	; 8
    2cb6:	84 9f       	mul	r24, r20
    2cb8:	20 0d       	add	r18, r0
    2cba:	31 1d       	adc	r19, r1
    2cbc:	11 24       	eor	r1, r1
    2cbe:	c9 01       	movw	r24, r18
    2cc0:	80 50       	subi	r24, 0x00	; 0
    2cc2:	90 40       	sbci	r25, 0x00	; 0
    2cc4:	0e 94 be 19 	call	0x337c	; 0x337c <__eerd_byte_m32>
	return (tmp >> y) & 0x01;
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <font_getbitmappixel+0x24>
    2ccc:	95 95       	asr	r25
    2cce:	87 95       	ror	r24
    2cd0:	ca 95       	dec	r28
    2cd2:	e2 f7       	brpl	.-8      	; 0x2ccc <font_getbitmappixel+0x20>
}
    2cd4:	81 70       	andi	r24, 0x01	; 1
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <launch_effect>:
#include "effect.h"
#include "draw.h"
#include "gameoflife.h"

void launch_effect (int effect)
{
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	ec 01       	movw	r28, r24
	int i;
    unsigned char ii;

	fill(0x00);
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	0e 94 99 01 	call	0x332	; 0x332 <fill>

	switch (effect)
    2cea:	c9 31       	cpi	r28, 0x19	; 25
    2cec:	d1 05       	cpc	r29, r1
    2cee:	08 f0       	brcs	.+2      	; 0x2cf2 <launch_effect+0x18>
    2cf0:	c3 c1       	rjmp	.+902    	; 0x3078 <launch_effect+0x39e>
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e6 5d       	subi	r30, 0xD6	; 214
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	0c 94 46 19 	jmp	0x328c	; 0x328c <__tablejump2__>
	{
		
		
	
		case 0:
			effect_rain(100);
    2cfc:	84 e6       	ldi	r24, 0x64	; 100
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 11 0c 	call	0x1822	; 0x1822 <effect_rain>
			break;
    2d04:	bd c1       	rjmp	.+890    	; 0x3080 <launch_effect+0x3a6>
		
			
		case 1:
			sendvoxels_rand_z(20,220,2000);
    2d06:	40 ed       	ldi	r20, 0xD0	; 208
    2d08:	57 e0       	ldi	r21, 0x07	; 7
    2d0a:	6c ed       	ldi	r22, 0xDC	; 220
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	84 e1       	ldi	r24, 0x14	; 20
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 00 08 	call	0x1000	; 0x1000 <sendvoxels_rand_z>
			break;
    2d16:	b4 c1       	rjmp	.+872    	; 0x3080 <launch_effect+0x3a6>
				
		case 2:
			effect_random_filler(5,1);
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	85 e0       	ldi	r24, 0x05	; 5
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 97 0b 	call	0x172e	; 0x172e <effect_random_filler>
			effect_random_filler(5,0);
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	85 e0       	ldi	r24, 0x05	; 5
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 97 0b 	call	0x172e	; 0x172e <effect_random_filler>
			effect_random_filler(5,1);
    2d30:	61 e0       	ldi	r22, 0x01	; 1
    2d32:	70 e0       	ldi	r23, 0x00	; 0
    2d34:	85 e0       	ldi	r24, 0x05	; 5
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 97 0b 	call	0x172e	; 0x172e <effect_random_filler>
			effect_random_filler(5,0);
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	85 e0       	ldi	r24, 0x05	; 5
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 97 0b 	call	0x172e	; 0x172e <effect_random_filler>
			break;
    2d48:	9b c1       	rjmp	.+822    	; 0x3080 <launch_effect+0x3a6>
				
				
		case 3:
			effect_wormsqueeze (2, AXIS_Z, -1, 100, 1000);
    2d4a:	08 ee       	ldi	r16, 0xE8	; 232
    2d4c:	13 e0       	ldi	r17, 0x03	; 3
    2d4e:	24 e6       	ldi	r18, 0x64	; 100
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4f ef       	ldi	r20, 0xFF	; 255
    2d54:	5f ef       	ldi	r21, 0xFF	; 255
    2d56:	6a e7       	ldi	r22, 0x7A	; 122
    2d58:	70 e0       	ldi	r23, 0x00	; 0
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <effect_wormsqueeze>
			break;
    2d62:	8e c1       	rjmp	.+796    	; 0x3080 <launch_effect+0x3a6>
				
		case 4:
			effect_blinky2();
    2d64:	0e 94 49 06 	call	0xc92	; 0xc92 <effect_blinky2>
			break;
    2d68:	8b c1       	rjmp	.+790    	; 0x3080 <launch_effect+0x3a6>
	int i;
    unsigned char ii;

	fill(0x00);

	switch (effect)
    2d6a:	c0 e0       	ldi	r28, 0x00	; 0
			break;
				
		case 5: 
            for (ii=0;ii<8;ii++)
			{
				effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
    2d6c:	4c 2f       	mov	r20, r28
    2d6e:	44 70       	andi	r20, 0x04	; 4
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	6c 2f       	mov	r22, r28
    2d74:	63 70       	andi	r22, 0x03	; 3
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	22 ec       	ldi	r18, 0xC2	; 194
    2d7a:	31 e0       	ldi	r19, 0x01	; 1
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 d0 06 	call	0xda0	; 0xda0 <effect_box_shrink_grow>
		case 4:
			effect_blinky2();
			break;
				
		case 5: 
            for (ii=0;ii<8;ii++)
    2d84:	cf 5f       	subi	r28, 0xFF	; 255
    2d86:	c8 30       	cpi	r28, 0x08	; 8
    2d88:	89 f7       	brne	.-30     	; 0x2d6c <launch_effect+0x92>
			{
				effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
			}

			effect_box_woopwoop(800,0);
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	80 e2       	ldi	r24, 0x20	; 32
    2d90:	93 e0       	ldi	r25, 0x03	; 3
    2d92:	0e 94 6d 07 	call	0xeda	; 0xeda <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    2d96:	61 e0       	ldi	r22, 0x01	; 1
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	80 e2       	ldi	r24, 0x20	; 32
    2d9c:	93 e0       	ldi	r25, 0x03	; 3
    2d9e:	0e 94 6d 07 	call	0xeda	; 0xeda <effect_box_woopwoop>
			effect_box_woopwoop(800,0);
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	80 e2       	ldi	r24, 0x20	; 32
    2da8:	93 e0       	ldi	r25, 0x03	; 3
    2daa:	0e 94 6d 07 	call	0xeda	; 0xeda <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    2dae:	61 e0       	ldi	r22, 0x01	; 1
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	80 e2       	ldi	r24, 0x20	; 32
    2db4:	93 e0       	ldi	r25, 0x03	; 3
    2db6:	0e 94 6d 07 	call	0xeda	; 0xeda <effect_box_woopwoop>
			break;
    2dba:	62 c1       	rjmp	.+708    	; 0x3080 <launch_effect+0x3a6>
			
		case 6:
			effect_planboing (AXIS_Z, 400);
    2dbc:	60 e9       	ldi	r22, 0x90	; 144
    2dbe:	71 e0       	ldi	r23, 0x01	; 1
    2dc0:	8a e7       	ldi	r24, 0x7A	; 122
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 35 05 	call	0xa6a	; 0xa6a <effect_planboing>
			effect_planboing (AXIS_X, 400);
    2dc8:	60 e9       	ldi	r22, 0x90	; 144
    2dca:	71 e0       	ldi	r23, 0x01	; 1
    2dcc:	88 e7       	ldi	r24, 0x78	; 120
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 35 05 	call	0xa6a	; 0xa6a <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    2dd4:	60 e9       	ldi	r22, 0x90	; 144
    2dd6:	71 e0       	ldi	r23, 0x01	; 1
    2dd8:	89 e7       	ldi	r24, 0x79	; 121
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 35 05 	call	0xa6a	; 0xa6a <effect_planboing>
			effect_planboing (AXIS_Z, 400);
    2de0:	60 e9       	ldi	r22, 0x90	; 144
    2de2:	71 e0       	ldi	r23, 0x01	; 1
    2de4:	8a e7       	ldi	r24, 0x7A	; 122
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 35 05 	call	0xa6a	; 0xa6a <effect_planboing>
			effect_planboing (AXIS_X, 400);
    2dec:	60 e9       	ldi	r22, 0x90	; 144
    2dee:	71 e0       	ldi	r23, 0x01	; 1
    2df0:	88 e7       	ldi	r24, 0x78	; 120
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 35 05 	call	0xa6a	; 0xa6a <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    2df8:	60 e9       	ldi	r22, 0x90	; 144
    2dfa:	71 e0       	ldi	r23, 0x01	; 1
    2dfc:	89 e7       	ldi	r24, 0x79	; 121
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 35 05 	call	0xa6a	; 0xa6a <effect_planboing>
			fill(0x00);
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	0e 94 99 01 	call	0x332	; 0x332 <fill>
			break;
    2e0a:	3a c1       	rjmp	.+628    	; 0x3080 <launch_effect+0x3a6>
		
		case 7:
			fill(0x00);
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	0e 94 99 01 	call	0x332	; 0x332 <fill>
			effect_telcstairs(0,800,0xff);
    2e12:	4f ef       	ldi	r20, 0xFF	; 255
    2e14:	50 e0       	ldi	r21, 0x00	; 0
    2e16:	60 e2       	ldi	r22, 0x20	; 32
    2e18:	73 e0       	ldi	r23, 0x03	; 3
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <effect_telcstairs>
			effect_telcstairs(0,800,0x00);
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	60 e2       	ldi	r22, 0x20	; 32
    2e28:	73 e0       	ldi	r23, 0x03	; 3
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    2e32:	4f ef       	ldi	r20, 0xFF	; 255
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	60 e2       	ldi	r22, 0x20	; 32
    2e38:	73 e0       	ldi	r23, 0x03	; 3
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    2e42:	4f ef       	ldi	r20, 0xFF	; 255
    2e44:	50 e0       	ldi	r21, 0x00	; 0
    2e46:	60 e2       	ldi	r22, 0x20	; 32
    2e48:	73 e0       	ldi	r23, 0x03	; 3
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <effect_telcstairs>
			break;
    2e52:	16 c1       	rjmp	.+556    	; 0x3080 <launch_effect+0x3a6>
			
		case 8:
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	48 e8       	ldi	r20, 0x88	; 136
    2e5a:	53 e1       	ldi	r21, 0x13	; 19
    2e5c:	66 e2       	ldi	r22, 0x26	; 38
    2e5e:	72 e0       	ldi	r23, 0x02	; 2
    2e60:	8a e7       	ldi	r24, 0x7A	; 122
    2e62:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    2e66:	21 e0       	ldi	r18, 0x01	; 1
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	48 e8       	ldi	r20, 0x88	; 136
    2e6c:	53 e1       	ldi	r21, 0x13	; 19
    2e6e:	66 e2       	ldi	r22, 0x26	; 38
    2e70:	72 e0       	ldi	r23, 0x02	; 2
    2e72:	8a e7       	ldi	r24, 0x7A	; 122
    2e74:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	48 e8       	ldi	r20, 0x88	; 136
    2e7e:	53 e1       	ldi	r21, 0x13	; 19
    2e80:	66 e2       	ldi	r22, 0x26	; 38
    2e82:	72 e0       	ldi	r23, 0x02	; 2
    2e84:	8a e7       	ldi	r24, 0x7A	; 122
    2e86:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    2e8a:	21 e0       	ldi	r18, 0x01	; 1
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	48 e8       	ldi	r20, 0x88	; 136
    2e90:	53 e1       	ldi	r21, 0x13	; 19
    2e92:	66 e2       	ldi	r22, 0x26	; 38
    2e94:	72 e0       	ldi	r23, 0x02	; 2
    2e96:	8a e7       	ldi	r24, 0x7A	; 122
    2e98:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,0);
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	48 e8       	ldi	r20, 0x88	; 136
    2ea2:	53 e1       	ldi	r21, 0x13	; 19
    2ea4:	66 e2       	ldi	r22, 0x26	; 38
    2ea6:	72 e0       	ldi	r23, 0x02	; 2
    2ea8:	88 e7       	ldi	r24, 0x78	; 120
    2eaa:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,1);
    2eae:	21 e0       	ldi	r18, 0x01	; 1
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	48 e8       	ldi	r20, 0x88	; 136
    2eb4:	53 e1       	ldi	r21, 0x13	; 19
    2eb6:	66 e2       	ldi	r22, 0x26	; 38
    2eb8:	72 e0       	ldi	r23, 0x02	; 2
    2eba:	88 e7       	ldi	r24, 0x78	; 120
    2ebc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,0);
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	48 e8       	ldi	r20, 0x88	; 136
    2ec6:	53 e1       	ldi	r21, 0x13	; 19
    2ec8:	66 e2       	ldi	r22, 0x26	; 38
    2eca:	72 e0       	ldi	r23, 0x02	; 2
    2ecc:	89 e7       	ldi	r24, 0x79	; 121
    2ece:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,1);
    2ed2:	21 e0       	ldi	r18, 0x01	; 1
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	48 e8       	ldi	r20, 0x88	; 136
    2ed8:	53 e1       	ldi	r21, 0x13	; 19
    2eda:	66 e2       	ldi	r22, 0x26	; 38
    2edc:	72 e0       	ldi	r23, 0x02	; 2
    2ede:	89 e7       	ldi	r24, 0x79	; 121
    2ee0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <effect_axis_updown_randsuspend>
			break;
    2ee4:	cd c0       	rjmp	.+410    	; 0x3080 <launch_effect+0x3a6>
			
		case 9:
			effect_loadbar(2000);
    2ee6:	80 ed       	ldi	r24, 0xD0	; 208
    2ee8:	97 e0       	ldi	r25, 0x07	; 7
    2eea:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <effect_loadbar>
			break;
    2eee:	c8 c0       	rjmp	.+400    	; 0x3080 <launch_effect+0x3a6>
			
		case 10:
			effect_wormsqueeze (1, AXIS_Z, 1, 100, 1000);
    2ef0:	08 ee       	ldi	r16, 0xE8	; 232
    2ef2:	13 e0       	ldi	r17, 0x03	; 3
    2ef4:	24 e6       	ldi	r18, 0x64	; 100
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	50 e0       	ldi	r21, 0x00	; 0
    2efc:	6a e7       	ldi	r22, 0x7A	; 122
    2efe:	70 e0       	ldi	r23, 0x00	; 0
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <effect_wormsqueeze>
			break;
    2f08:	bb c0       	rjmp	.+374    	; 0x3080 <launch_effect+0x3a6>
			
			
		case 11:
			effect_stringfly2("MOUSER.COM");
    2f0a:	84 e8       	ldi	r24, 0x84	; 132
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0e 94 9f 04 	call	0x93e	; 0x93e <effect_stringfly2>
			break;
    2f12:	b6 c0       	rjmp	.+364    	; 0x3080 <launch_effect+0x3a6>
			
			
		case 12:
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,1);
    2f14:	21 e0       	ldi	r18, 0x01	; 1
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	48 ec       	ldi	r20, 0xC8	; 200
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	8a e7       	ldi	r24, 0x7A	; 122
    2f22:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    2f26:	8c ed       	ldi	r24, 0xDC	; 220
    2f28:	95 e0       	ldi	r25, 0x05	; 5
    2f2a:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,1);
    2f2e:	21 e0       	ldi	r18, 0x01	; 1
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	48 ec       	ldi	r20, 0xC8	; 200
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	61 e0       	ldi	r22, 0x01	; 1
    2f38:	70 e0       	ldi	r23, 0x00	; 0
    2f3a:	8a e7       	ldi	r24, 0x7A	; 122
    2f3c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    2f40:	8c ed       	ldi	r24, 0xDC	; 220
    2f42:	95 e0       	ldi	r25, 0x05	; 5
    2f44:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,2);
    2f48:	22 e0       	ldi	r18, 0x02	; 2
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	48 ec       	ldi	r20, 0xC8	; 200
    2f4e:	50 e0       	ldi	r21, 0x00	; 0
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	8a e7       	ldi	r24, 0x7A	; 122
    2f56:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    2f5a:	8c ed       	ldi	r24, 0xDC	; 220
    2f5c:	95 e0       	ldi	r25, 0x05	; 5
    2f5e:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,2);
    2f62:	22 e0       	ldi	r18, 0x02	; 2
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	48 ec       	ldi	r20, 0xC8	; 200
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	61 e0       	ldi	r22, 0x01	; 1
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	8a e7       	ldi	r24, 0x7A	; 122
    2f70:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    2f74:	8c ed       	ldi	r24, 0xDC	; 220
    2f76:	95 e0       	ldi	r25, 0x05	; 5
    2f78:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Y, 0 , 200,1);
    2f7c:	21 e0       	ldi	r18, 0x01	; 1
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	48 ec       	ldi	r20, 0xC8	; 200
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	89 e7       	ldi	r24, 0x79	; 121
    2f8a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    2f8e:	8c ed       	ldi	r24, 0xDC	; 220
    2f90:	95 e0       	ldi	r25, 0x05	; 5
    2f92:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Y, 1 , 200,1);
    2f96:	21 e0       	ldi	r18, 0x01	; 1
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	48 ec       	ldi	r20, 0xC8	; 200
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	61 e0       	ldi	r22, 0x01	; 1
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	89 e7       	ldi	r24, 0x79	; 121
    2fa4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    2fa8:	8c ed       	ldi	r24, 0xDC	; 220
    2faa:	95 e0       	ldi	r25, 0x05	; 5
    2fac:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
			break;
    2fb0:	67 c0       	rjmp	.+206    	; 0x3080 <launch_effect+0x3a6>
			
		case 13:
			boingboing(250, 600, 0x01, 0x02);
    2fb2:	22 e0       	ldi	r18, 0x02	; 2
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	68 e5       	ldi	r22, 0x58	; 88
    2fb8:	72 e0       	ldi	r23, 0x02	; 2
    2fba:	8a ef       	ldi	r24, 0xFA	; 250
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 8c 08 	call	0x1118	; 0x1118 <boingboing>
			break;
    2fc2:	5e c0       	rjmp	.+188    	; 0x3080 <launch_effect+0x3a6>
			
		case 14:
			effect_pathspiral(100,1000);
    2fc4:	68 ee       	ldi	r22, 0xE8	; 232
    2fc6:	73 e0       	ldi	r23, 0x03	; 3
    2fc8:	84 e6       	ldi	r24, 0x64	; 100
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <effect_pathspiral>
			break;
    2fd0:	57 c0       	rjmp	.+174    	; 0x3080 <launch_effect+0x3a6>
			
		case 15:
			effect_path_bitmap(700,2,3);
    2fd2:	43 e0       	ldi	r20, 0x03	; 3
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	62 e0       	ldi	r22, 0x02	; 2
    2fd8:	8c eb       	ldi	r24, 0xBC	; 188
    2fda:	92 e0       	ldi	r25, 0x02	; 2
    2fdc:	0e 94 6e 15 	call	0x2adc	; 0x2adc <effect_path_bitmap>
			break;
    2fe0:	4f c0       	rjmp	.+158    	; 0x3080 <launch_effect+0x3a6>
			
		case 16:
			effect_path_text(2000,"M O U S E R . C O M");
    2fe2:	6f e8       	ldi	r22, 0x8F	; 143
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	80 ed       	ldi	r24, 0xD0	; 208
    2fe8:	97 e0       	ldi	r25, 0x07	; 7
    2fea:	0e 94 b8 14 	call	0x2970	; 0x2970 <effect_path_text>
			break;
    2fee:	48 c0       	rjmp	.+144    	; 0x3080 <launch_effect+0x3a6>
	
		case 17:
			effect_rand_patharound(200,500);
    2ff0:	64 ef       	ldi	r22, 0xF4	; 244
    2ff2:	71 e0       	ldi	r23, 0x01	; 1
    2ff4:	88 ec       	ldi	r24, 0xC8	; 200
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <effect_rand_patharound>
			break;
    2ffc:	41 c0       	rjmp	.+130    	; 0x3080 <launch_effect+0x3a6>
			
		case 18:
			effect_wormsqueeze (3, AXIS_Z, -1, 100, 1000);
    2ffe:	08 ee       	ldi	r16, 0xE8	; 232
    3000:	13 e0       	ldi	r17, 0x03	; 3
    3002:	24 e6       	ldi	r18, 0x64	; 100
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4f ef       	ldi	r20, 0xFF	; 255
    3008:	5f ef       	ldi	r21, 0xFF	; 255
    300a:	6a e7       	ldi	r22, 0x7A	; 122
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	83 e0       	ldi	r24, 0x03	; 3
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <effect_wormsqueeze>
			break;
    3016:	34 c0       	rjmp	.+104    	; 0x3080 <launch_effect+0x3a6>
			
		case 19:
			effect_smileyspin(2,2500,4);
    3018:	44 e0       	ldi	r20, 0x04	; 4
    301a:	64 ec       	ldi	r22, 0xC4	; 196
    301c:	79 e0       	ldi	r23, 0x09	; 9
    301e:	82 e0       	ldi	r24, 0x02	; 2
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 ff 10 	call	0x21fe	; 0x21fe <effect_smileyspin>
			break;
    3026:	2c c0       	rjmp	.+88     	; 0x3080 <launch_effect+0x3a6>
			
		case 20:
			effect_random_sparkle();
    3028:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <effect_random_sparkle>
			break;
    302c:	29 c0       	rjmp	.+82     	; 0x3080 <launch_effect+0x3a6>
			
		case 21:
			effect_wormsqueeze (4, AXIS_Z, -1, 100, 1000);
    302e:	08 ee       	ldi	r16, 0xE8	; 232
    3030:	13 e0       	ldi	r17, 0x03	; 3
    3032:	24 e6       	ldi	r18, 0x64	; 100
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4f ef       	ldi	r20, 0xFF	; 255
    3038:	5f ef       	ldi	r21, 0xFF	; 255
    303a:	6a e7       	ldi	r22, 0x7A	; 122
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	84 e0       	ldi	r24, 0x04	; 4
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <effect_wormsqueeze>
			break;
    3046:	1c c0       	rjmp	.+56     	; 0x3080 <launch_effect+0x3a6>
		
		case 22:
			boingboing(250, 600, 0x01, 0x03);
    3048:	23 e0       	ldi	r18, 0x03	; 3
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	68 e5       	ldi	r22, 0x58	; 88
    304e:	72 e0       	ldi	r23, 0x02	; 2
    3050:	8a ef       	ldi	r24, 0xFA	; 250
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	0e 94 8c 08 	call	0x1118	; 0x1118 <boingboing>
			break;
    3058:	13 c0       	rjmp	.+38     	; 0x3080 <launch_effect+0x3a6>
			
		case 23:
			effect_smileyspin(2,2500,2);
    305a:	42 e0       	ldi	r20, 0x02	; 2
    305c:	64 ec       	ldi	r22, 0xC4	; 196
    305e:	79 e0       	ldi	r23, 0x09	; 9
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	0e 94 ff 10 	call	0x21fe	; 0x21fe <effect_smileyspin>
			break;
    3068:	0b c0       	rjmp	.+22     	; 0x3080 <launch_effect+0x3a6>
		
		case 24:
			fill_cube(3,1000);
    306a:	68 ee       	ldi	r22, 0xE8	; 232
    306c:	73 e0       	ldi	r23, 0x03	; 3
    306e:	83 e0       	ldi	r24, 0x03	; 3
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	0e 94 64 05 	call	0xac8	; 0xac8 <fill_cube>
			break;
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <launch_effect+0x3a6>
		
	
		
		// In case the effect number is out of range:
		default:
			effect_stringfly2("FAIL");
    3078:	83 ea       	ldi	r24, 0xA3	; 163
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 9f 04 	call	0x93e	; 0x93e <effect_stringfly2>
			break;
		
		

	}
}
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	1f 91       	pop	r17
    3086:	0f 91       	pop	r16
    3088:	08 95       	ret

0000308a <__vector_4>:
 * 6) Increment the current_layer variable, so the next layer is
 *    drawn the next time this function runs.
*/

ISR(TIMER2_COMP_vect)
{
    308a:	1f 92       	push	r1
    308c:	0f 92       	push	r0
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	0f 92       	push	r0
    3092:	11 24       	eor	r1, r1
    3094:	2f 93       	push	r18
    3096:	3f 93       	push	r19
    3098:	8f 93       	push	r24
    309a:	9f 93       	push	r25
    309c:	ef 93       	push	r30
    309e:	ff 93       	push	r31
	int i;

	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
    30a0:	15 ba       	out	0x15, r1	; 21
	OE_PORT |= OE_MASK; // Set OE high, disabling all outputs on latch array
    30a2:	c3 9a       	sbi	0x18, 3	; 24

	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0; i < 8; i++)
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
	{
		// Set the data on the data-bus of the latch array.
		PORTA = cube[current_layer][i];
    30a8:	20 91 29 01 	lds	r18, 0x0129
    30ac:	fc 01       	movw	r30, r24
    30ae:	38 e0       	ldi	r19, 0x08	; 8
    30b0:	23 9f       	mul	r18, r19
    30b2:	e0 0d       	add	r30, r0
    30b4:	f1 1d       	adc	r31, r1
    30b6:	11 24       	eor	r1, r1
    30b8:	e8 51       	subi	r30, 0x18	; 24
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	20 81       	ld	r18, Z
    30be:	2b bb       	out	0x1b, r18	; 27
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1));
    30c0:	28 b3       	in	r18, 0x18	; 24
    30c2:	31 e0       	ldi	r19, 0x01	; 1
    30c4:	38 0f       	add	r19, r24
    30c6:	37 70       	andi	r19, 0x07	; 7
    30c8:	28 7f       	andi	r18, 0xF8	; 248
    30ca:	23 2b       	or	r18, r19
    30cc:	28 bb       	out	0x18, r18	; 24
	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
	OE_PORT |= OE_MASK; // Set OE high, disabling all outputs on latch array

	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0; i < 8; i++)
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	88 30       	cpi	r24, 0x08	; 8
    30d2:	91 05       	cpc	r25, r1
    30d4:	49 f7       	brne	.-46     	; 0x30a8 <__vector_4+0x1e>
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1));
	}

	OE_PORT &= ~OE_MASK; // Set OE low, enabling outputs on the latch array
    30d6:	c3 98       	cbi	0x18, 3	; 24
	LAYER_SELECT = (0x01 << current_layer); // Transistor ON for current layer
    30d8:	20 91 29 01 	lds	r18, 0x0129
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <__vector_4+0x5c>
    30e2:	88 0f       	add	r24, r24
    30e4:	99 1f       	adc	r25, r25
    30e6:	2a 95       	dec	r18
    30e8:	e2 f7       	brpl	.-8      	; 0x30e2 <__vector_4+0x58>
    30ea:	85 bb       	out	0x15, r24	; 21

	// Increment the curren_layer counter so that the next layer is
	// drawn the next time this function runs.
	current_layer++;
    30ec:	80 91 29 01 	lds	r24, 0x0129
    30f0:	8f 5f       	subi	r24, 0xFF	; 255
    30f2:	80 93 29 01 	sts	0x0129, r24
	// We want to count from 0-7, so set it to 0 when it reaches 8.
	if (current_layer == 8)
    30f6:	80 91 29 01 	lds	r24, 0x0129
    30fa:	88 30       	cpi	r24, 0x08	; 8
    30fc:	11 f4       	brne	.+4      	; 0x3102 <__vector_4+0x78>
		current_layer = 0;
    30fe:	10 92 29 01 	sts	0x0129, r1
}
    3102:	ff 91       	pop	r31
    3104:	ef 91       	pop	r30
    3106:	9f 91       	pop	r25
    3108:	8f 91       	pop	r24
    310a:	3f 91       	pop	r19
    310c:	2f 91       	pop	r18
    310e:	0f 90       	pop	r0
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	0f 90       	pop	r0
    3114:	1f 90       	pop	r1
    3116:	18 95       	reti

00003118 <ioinit>:


void ioinit (void)
{
	DDRA = 0xff;	// DATA bus output
    3118:	8f ef       	ldi	r24, 0xFF	; 255
    311a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xef;	// Button on B4
    311c:	9f ee       	ldi	r25, 0xEF	; 239
    311e:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xff;	// Layer select output
    3120:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xdf;	// Button on D5
    3122:	8f ed       	ldi	r24, 0xDF	; 223
    3124:	81 bb       	out	0x11, r24	; 17
	
	
	PORTA = 0x00; // Set data bus off
    3126:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00; // Set layer select off
    3128:	15 ba       	out	0x15, r1	; 21
	PORTB = 0x10; // Enable pull up on button.
    312a:	80 e1       	ldi	r24, 0x10	; 16
    312c:	88 bb       	out	0x18, r24	; 24
	PORTD = 0x20; // Enable pull up on button.
    312e:	80 e2       	ldi	r24, 0x20	; 32
    3130:	82 bb       	out	0x12, r24	; 18

	// Timer 2
	// Frame buffer interrupt
	// 14745600/128/11 = 10472.72 interrupts per second
	// 10472.72/8 = 1309 frames per second
	OCR2 = 10; 	// interrupt at counter = 10
    3132:	8a e0       	ldi	r24, 0x0A	; 10
    3134:	83 bd       	out	0x23, r24	; 35
    TCCR2 |= (1 << CS20) | (1 << CS22); // Prescaler = 128.
    3136:	85 b5       	in	r24, 0x25	; 37
    3138:	85 60       	ori	r24, 0x05	; 5
    313a:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << WGM21); // CTC mode. Reset counter when OCR2 is reached.
    313c:	85 b5       	in	r24, 0x25	; 37
    313e:	88 60       	ori	r24, 0x08	; 8
    3140:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;	// initial counter value = 0;
    3142:	14 bc       	out	0x24, r1	; 36
	TIMSK |= (1 << OCIE2); // Enable CTC interrupt
    3144:	89 b7       	in	r24, 0x39	; 57
    3146:	80 68       	ori	r24, 0x80	; 128
    3148:	89 bf       	out	0x39, r24	; 57



    // Initiate RS232
    // USART Baud rate is defined in MYUBRR
    UBRRH = MYUBRR >> 8;
    314a:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
    314c:	87 e1       	ldi	r24, 0x17	; 23
    314e:	89 b9       	out	0x09, r24	; 9
    // bit 7-6      sync/ascyn 00 = async,  01 = sync
    // bit 5-4      parity 00 = disabled
    // bit 3        stop bits 0 = 1 bit  1 = 2 bits
    // bit 2-1      frame length 11 = 8
    // bit 0        clock polarity = 0
    UCSRC  = 0b10000110;
    3150:	86 e8       	ldi	r24, 0x86	; 134
    3152:	80 bd       	out	0x20, r24	; 32
    // Enable RS232, tx and rx
    UCSRB = (1<<RXEN)|(1<<TXEN);
    3154:	88 e1       	ldi	r24, 0x18	; 24
    3156:	8a b9       	out	0x0a, r24	; 10
    UDR = 0x00; // send an empty byte to indicate powerup.
    3158:	1c b8       	out	0x0c, r1	; 12
    315a:	08 95       	ret

0000315c <bootwait>:
//    those LEDs on and off generates some noise.
// 2) Set a random random seed based on the delay between boot time and
//    the time you press a button.
// 3) Select mode of operation, autonomous or rs232 controlled.
unsigned int bootwait (void)
{
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
	// All the LED_PORT... code blinks the red and green status LEDs.

	unsigned int x = 0;
	LED_PORT |= LED_GREEN;
    3160:	93 9a       	sbi	0x12, 3	; 18
// 3) Select mode of operation, autonomous or rs232 controlled.
unsigned int bootwait (void)
{
	// All the LED_PORT... code blinks the red and green status LEDs.

	unsigned int x = 0;
    3162:	c0 e0       	ldi	r28, 0x00	; 0
    3164:	d0 e0       	ldi	r29, 0x00	; 0
	LED_PORT |= LED_GREEN;
	while (1)
	{
        x++; // increment x by one.
    3166:	21 96       	adiw	r28, 0x01	; 1
		srand(x); // use counter x as random seed
    3168:	ce 01       	movw	r24, r28
    316a:	0e 94 b3 19 	call	0x3366	; 0x3366 <srand>
		
		delay_ms(1000);
    316e:	88 ee       	ldi	r24, 0xE8	; 232
    3170:	93 e0       	ldi	r25, 0x03	; 3
    3172:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		LED_PORT &= ~LED_GREEN; // green off, red on
    3176:	93 98       	cbi	0x12, 3	; 18
		LED_PORT |= LED_RED;
    3178:	92 9a       	sbi	0x12, 2	; 18
		
		// Listen for button presses and return with the
		// apropriate number.
		if (!(PIND & RS232_BTN))
    317a:	85 9b       	sbis	0x10, 5	; 16
    317c:	0d c0       	rjmp	.+26     	; 0x3198 <bootwait+0x3c>
			return 2;

		if (!(PINB & MAIN_BTN))
    317e:	b4 9b       	sbis	0x16, 4	; 22
    3180:	0e c0       	rjmp	.+28     	; 0x319e <bootwait+0x42>
			return 1;
		
		delay_ms(1000);
    3182:	88 ee       	ldi	r24, 0xE8	; 232
    3184:	93 e0       	ldi	r25, 0x03	; 3
    3186:	0e 94 a0 02 	call	0x540	; 0x540 <delay_ms>
		LED_PORT &= ~LED_RED; // red off, green on
    318a:	92 98       	cbi	0x12, 2	; 18
		LED_PORT |= LED_GREEN;
    318c:	93 9a       	sbi	0x12, 3	; 18
		
		// Same as above. I do it twise because there are two delays
		// in this loop, used for the red and green led blinking..
		if (!(PIND & RS232_BTN))
    318e:	85 9b       	sbis	0x10, 5	; 16
    3190:	09 c0       	rjmp	.+18     	; 0x31a4 <bootwait+0x48>
			return 2;

		if (!(PINB & MAIN_BTN))
    3192:	b4 99       	sbic	0x16, 4	; 22
    3194:	e8 cf       	rjmp	.-48     	; 0x3166 <bootwait+0xa>
    3196:	09 c0       	rjmp	.+18     	; 0x31aa <bootwait+0x4e>
		LED_PORT |= LED_RED;
		
		// Listen for button presses and return with the
		// apropriate number.
		if (!(PIND & RS232_BTN))
			return 2;
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <bootwait+0x52>

		if (!(PINB & MAIN_BTN))
			return 1;
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	05 c0       	rjmp	.+10     	; 0x31ae <bootwait+0x52>
		LED_PORT |= LED_GREEN;
		
		// Same as above. I do it twise because there are two delays
		// in this loop, used for the red and green led blinking..
		if (!(PIND & RS232_BTN))
			return 2;
    31a4:	82 e0       	ldi	r24, 0x02	; 2
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <bootwait+0x52>

		if (!(PINB & MAIN_BTN))
			return 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	08 95       	ret

000031b4 <rs232>:
// Take input from a computer and load it onto the cube buffer
void rs232(void)
{
	int tempval;
	int x = 0;
	int y = 0;
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0

// Take input from a computer and load it onto the cube buffer
void rs232(void)
{
	int tempval;
	int x = 0;
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	50 e0       	ldi	r21, 0x00	; 0
	while (1)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		LED_PORT ^= LED_RED;
    31bc:	c4 e0       	ldi	r28, 0x04	; 4
    				tmp2cube();
    			} else
    			{
    				// A layer is loaded, reset y and increment x.
    				x++;
    				y = 0;
    31be:	10 e0       	ldi	r17, 0x00	; 0
    31c0:	d0 e0       	ldi	r29, 0x00	; 0
    31c2:	04 c0       	rjmp	.+8      	; 0x31cc <rs232+0x18>
			 // Sync signal is received.
			 // Reset x and y counters to 0.
			 if (tempval == 0x00)
			 {
				x = 0;
				y = 0;
    31c4:	21 2f       	mov	r18, r17
    31c6:	3d 2f       	mov	r19, r29

			 // Sync signal is received.
			 // Reset x and y counters to 0.
			 if (tempval == 0x00)
			 {
				x = 0;
    31c8:	41 2f       	mov	r20, r17
    31ca:	5d 2f       	mov	r21, r29
	while (1)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		LED_PORT ^= LED_RED;
    31cc:	82 b3       	in	r24, 0x12	; 18
    31ce:	8c 27       	eor	r24, r28
    31d0:	82 bb       	out	0x12, r24	; 18

		// Wait until a byte has been received
		while ( !(UCSRA & (1<<RXC)) );
    31d2:	5f 9b       	sbis	0x0b, 7	; 11
    31d4:	fe cf       	rjmp	.-4      	; 0x31d2 <rs232+0x1e>

		// Load the received byte from rs232 into a buffer.
		tempval = UDR;
    31d6:	8c b1       	in	r24, 0x0c	; 12
    31d8:	90 e0       	ldi	r25, 0x00	; 0
		// are reset to 0. This way the x and y counters are
		// always the same on the computer and in the cube.
		// To send an 0xff byte, you have to send it twice!

		// Go into sync escape mode
		if (tempval == 0xff)
    31da:	8f 3f       	cpi	r24, 0xFF	; 255
    31dc:	91 05       	cpc	r25, r1
    31de:	31 f4       	brne	.+12     	; 0x31ec <rs232+0x38>
		{
			// Wait for the next byte
			 while ( !(UCSRA & (1<<RXC)) );
    31e0:	5f 9b       	sbis	0x0b, 7	; 11
    31e2:	fe cf       	rjmp	.-4      	; 0x31e0 <rs232+0x2c>
			 // Get the next byte
			 tempval = UDR;
    31e4:	8c b1       	in	r24, 0x0c	; 12
    31e6:	90 e0       	ldi	r25, 0x00	; 0

			 // Sync signal is received.
			 // Reset x and y counters to 0.
			 if (tempval == 0x00)
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	61 f3       	breq	.-40     	; 0x31c4 <rs232+0x10>
		}

        if (escape == 0)
        {
		// Load data into the current position in the buffer
		fb[x][y] = tempval;
    31ec:	fa 01       	movw	r30, r20
    31ee:	ee 0f       	add	r30, r30
    31f0:	ff 1f       	adc	r31, r31
    31f2:	ee 0f       	add	r30, r30
    31f4:	ff 1f       	adc	r31, r31
    31f6:	ee 0f       	add	r30, r30
    31f8:	ff 1f       	adc	r31, r31
    31fa:	e2 0f       	add	r30, r18
    31fc:	f3 1f       	adc	r31, r19
    31fe:	e8 55       	subi	r30, 0x58	; 88
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 83       	st	Z, r24

    		// Check if we have reached the limits of the buffer array.
    		if (y == 7)
    3204:	27 30       	cpi	r18, 0x07	; 7
    3206:	31 05       	cpc	r19, r1
    3208:	79 f4       	brne	.+30     	; 0x3228 <rs232+0x74>
    		{
    			if (x == 7)
    320a:	47 30       	cpi	r20, 0x07	; 7
    320c:	51 05       	cpc	r21, r1
    320e:	39 f4       	brne	.+14     	; 0x321e <rs232+0x6a>
    			{
    				// All data is loaded. Reset both counters
    				y = 0;
    				x = 0;
                    // Copy the data onto the cube.
    				tmp2cube();
    3210:	0e 94 b1 02 	call	0x562	; 0x562 <tmp2cube>
    		if (y == 7)
    		{
    			if (x == 7)
    			{
    				// All data is loaded. Reset both counters
    				y = 0;
    3214:	21 2f       	mov	r18, r17
    3216:	3d 2f       	mov	r19, r29
    				x = 0;
    3218:	41 2f       	mov	r20, r17
    321a:	5d 2f       	mov	r21, r29
    321c:	d7 cf       	rjmp	.-82     	; 0x31cc <rs232+0x18>
                    // Copy the data onto the cube.
    				tmp2cube();
    			} else
    			{
    				// A layer is loaded, reset y and increment x.
    				x++;
    321e:	4f 5f       	subi	r20, 0xFF	; 255
    3220:	5f 4f       	sbci	r21, 0xFF	; 255
    				y = 0;
    3222:	21 2f       	mov	r18, r17
    3224:	3d 2f       	mov	r19, r29
    3226:	d2 cf       	rjmp	.-92     	; 0x31cc <rs232+0x18>
    			}
    		} else
    		{
    			// We are in the middle of loading a layer. increment y.
    			y++;
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	cf cf       	rjmp	.-98     	; 0x31cc <rs232+0x18>

0000322e <main>:
int main (void)
{

	// This function initiates IO ports, timers, interrupts and
    // serial communications
	ioinit();
    322e:	0e 94 8c 18 	call	0x3118	; 0x3118 <ioinit>
	
    // This variable specifies which layer is currently being drawn by the
	// cube interrupt routine. We assign a value to it to make sure it's not >7.
	current_layer = 1;	
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	80 93 29 01 	sts	0x0129, r24
	// 3) Random seed. The bootwait function counts forever from 0 to 255.
	//    Whenever you press the button, this counter stops, and the number it
	//    stopped at is used as a random seed. This ensures true randomness at
	//    every boot. Without this (or some similar process) the cube would
	//    produce the same "random" sequence every time
	i = bootwait();
    3238:	0e 94 ae 18 	call	0x315c	; 0x315c <bootwait>

	// Enable interrupts
	// This starts the routine that draws the cube content
	sei();
    323c:	78 94       	sei

	// Result for bootwait() is 2:
	// Go to rs232 mode. this function loops forever.
	if (i == 2)
    323e:	02 97       	sbiw	r24, 0x02	; 2
    3240:	29 f0       	breq	.+10     	; 0x324c <main+0x1e>
    3242:	c0 e0       	ldi	r28, 0x00	; 0
    3244:	d0 e0       	ldi	r29, 0x00	; 0
	// Result of bootwait() is something other than 2:
	// Do awesome effects. Loop forever.
	while (1)
	{
		// Show the effects in a predefined order
		for (i=0; i<EFFECTS_TOTAL; i++)
    3246:	00 e0       	ldi	r16, 0x00	; 0
    3248:	10 e0       	ldi	r17, 0x00	; 0
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <main+0x22>

	// Result for bootwait() is 2:
	// Go to rs232 mode. this function loops forever.
	if (i == 2)
	{
		rs232();
    324c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <rs232>
	// Do awesome effects. Loop forever.
	while (1)
	{
		// Show the effects in a predefined order
		for (i=0; i<EFFECTS_TOTAL; i++)
			launch_effect(i);
    3250:	ce 01       	movw	r24, r28
    3252:	0e 94 6d 16 	call	0x2cda	; 0x2cda <launch_effect>
	// Result of bootwait() is something other than 2:
	// Do awesome effects. Loop forever.
	while (1)
	{
		// Show the effects in a predefined order
		for (i=0; i<EFFECTS_TOTAL; i++)
    3256:	21 96       	adiw	r28, 0x01	; 1
    3258:	c9 31       	cpi	r28, 0x19	; 25
    325a:	d1 05       	cpc	r29, r1
    325c:	cc f3       	brlt	.-14     	; 0x3250 <main+0x22>
    325e:	c0 2f       	mov	r28, r16
    3260:	d1 2f       	mov	r29, r17
    3262:	f6 cf       	rjmp	.-20     	; 0x3250 <main+0x22>

00003264 <__divmodhi4>:
    3264:	97 fb       	bst	r25, 7
    3266:	07 2e       	mov	r0, r23
    3268:	16 f4       	brtc	.+4      	; 0x326e <__divmodhi4+0xa>
    326a:	00 94       	com	r0
    326c:	07 d0       	rcall	.+14     	; 0x327c <__divmodhi4_neg1>
    326e:	77 fd       	sbrc	r23, 7
    3270:	09 d0       	rcall	.+18     	; 0x3284 <__divmodhi4_neg2>
    3272:	0e 94 4c 19 	call	0x3298	; 0x3298 <__udivmodhi4>
    3276:	07 fc       	sbrc	r0, 7
    3278:	05 d0       	rcall	.+10     	; 0x3284 <__divmodhi4_neg2>
    327a:	3e f4       	brtc	.+14     	; 0x328a <__divmodhi4_exit>

0000327c <__divmodhi4_neg1>:
    327c:	90 95       	com	r25
    327e:	81 95       	neg	r24
    3280:	9f 4f       	sbci	r25, 0xFF	; 255
    3282:	08 95       	ret

00003284 <__divmodhi4_neg2>:
    3284:	70 95       	com	r23
    3286:	61 95       	neg	r22
    3288:	7f 4f       	sbci	r23, 0xFF	; 255

0000328a <__divmodhi4_exit>:
    328a:	08 95       	ret

0000328c <__tablejump2__>:
    328c:	ee 0f       	add	r30, r30
    328e:	ff 1f       	adc	r31, r31

00003290 <__tablejump__>:
    3290:	05 90       	lpm	r0, Z+
    3292:	f4 91       	lpm	r31, Z
    3294:	e0 2d       	mov	r30, r0
    3296:	09 94       	ijmp

00003298 <__udivmodhi4>:
    3298:	aa 1b       	sub	r26, r26
    329a:	bb 1b       	sub	r27, r27
    329c:	51 e1       	ldi	r21, 0x11	; 17
    329e:	07 c0       	rjmp	.+14     	; 0x32ae <__udivmodhi4_ep>

000032a0 <__udivmodhi4_loop>:
    32a0:	aa 1f       	adc	r26, r26
    32a2:	bb 1f       	adc	r27, r27
    32a4:	a6 17       	cp	r26, r22
    32a6:	b7 07       	cpc	r27, r23
    32a8:	10 f0       	brcs	.+4      	; 0x32ae <__udivmodhi4_ep>
    32aa:	a6 1b       	sub	r26, r22
    32ac:	b7 0b       	sbc	r27, r23

000032ae <__udivmodhi4_ep>:
    32ae:	88 1f       	adc	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	5a 95       	dec	r21
    32b4:	a9 f7       	brne	.-22     	; 0x32a0 <__udivmodhi4_loop>
    32b6:	80 95       	com	r24
    32b8:	90 95       	com	r25
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	08 95       	ret

000032c0 <do_rand>:
    32c0:	8f 92       	push	r8
    32c2:	9f 92       	push	r9
    32c4:	af 92       	push	r10
    32c6:	bf 92       	push	r11
    32c8:	cf 92       	push	r12
    32ca:	df 92       	push	r13
    32cc:	ef 92       	push	r14
    32ce:	ff 92       	push	r15
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	ec 01       	movw	r28, r24
    32d6:	68 81       	ld	r22, Y
    32d8:	79 81       	ldd	r23, Y+1	; 0x01
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	9b 81       	ldd	r25, Y+3	; 0x03
    32de:	61 15       	cp	r22, r1
    32e0:	71 05       	cpc	r23, r1
    32e2:	81 05       	cpc	r24, r1
    32e4:	91 05       	cpc	r25, r1
    32e6:	21 f4       	brne	.+8      	; 0x32f0 <do_rand+0x30>
    32e8:	64 e2       	ldi	r22, 0x24	; 36
    32ea:	79 ed       	ldi	r23, 0xD9	; 217
    32ec:	8b e5       	ldi	r24, 0x5B	; 91
    32ee:	97 e0       	ldi	r25, 0x07	; 7
    32f0:	2d e1       	ldi	r18, 0x1D	; 29
    32f2:	33 ef       	ldi	r19, 0xF3	; 243
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	0e 94 c6 19 	call	0x338c	; 0x338c <__divmodsi4>
    32fc:	49 01       	movw	r8, r18
    32fe:	5a 01       	movw	r10, r20
    3300:	9b 01       	movw	r18, r22
    3302:	ac 01       	movw	r20, r24
    3304:	a7 ea       	ldi	r26, 0xA7	; 167
    3306:	b1 e4       	ldi	r27, 0x41	; 65
    3308:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__muluhisi3>
    330c:	6b 01       	movw	r12, r22
    330e:	7c 01       	movw	r14, r24
    3310:	ac ee       	ldi	r26, 0xEC	; 236
    3312:	b4 ef       	ldi	r27, 0xF4	; 244
    3314:	a5 01       	movw	r20, r10
    3316:	94 01       	movw	r18, r8
    3318:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__mulohisi3>
    331c:	c6 0e       	add	r12, r22
    331e:	d7 1e       	adc	r13, r23
    3320:	e8 1e       	adc	r14, r24
    3322:	f9 1e       	adc	r15, r25
    3324:	f7 fe       	sbrs	r15, 7
    3326:	06 c0       	rjmp	.+12     	; 0x3334 <do_rand+0x74>
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	c8 1a       	sub	r12, r24
    332c:	d1 08       	sbc	r13, r1
    332e:	e1 08       	sbc	r14, r1
    3330:	80 e8       	ldi	r24, 0x80	; 128
    3332:	f8 0a       	sbc	r15, r24
    3334:	c8 82       	st	Y, r12
    3336:	d9 82       	std	Y+1, r13	; 0x01
    3338:	ea 82       	std	Y+2, r14	; 0x02
    333a:	fb 82       	std	Y+3, r15	; 0x03
    333c:	c6 01       	movw	r24, r12
    333e:	9f 77       	andi	r25, 0x7F	; 127
    3340:	df 91       	pop	r29
    3342:	cf 91       	pop	r28
    3344:	ff 90       	pop	r15
    3346:	ef 90       	pop	r14
    3348:	df 90       	pop	r13
    334a:	cf 90       	pop	r12
    334c:	bf 90       	pop	r11
    334e:	af 90       	pop	r10
    3350:	9f 90       	pop	r9
    3352:	8f 90       	pop	r8
    3354:	08 95       	ret

00003356 <rand_r>:
    3356:	0e 94 60 19 	call	0x32c0	; 0x32c0 <do_rand>
    335a:	08 95       	ret

0000335c <rand>:
    335c:	80 e6       	ldi	r24, 0x60	; 96
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 60 19 	call	0x32c0	; 0x32c0 <do_rand>
    3364:	08 95       	ret

00003366 <srand>:
    3366:	a0 e0       	ldi	r26, 0x00	; 0
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	80 93 60 00 	sts	0x0060, r24
    336e:	90 93 61 00 	sts	0x0061, r25
    3372:	a0 93 62 00 	sts	0x0062, r26
    3376:	b0 93 63 00 	sts	0x0063, r27
    337a:	08 95       	ret

0000337c <__eerd_byte_m32>:
    337c:	e1 99       	sbic	0x1c, 1	; 28
    337e:	fe cf       	rjmp	.-4      	; 0x337c <__eerd_byte_m32>
    3380:	9f bb       	out	0x1f, r25	; 31
    3382:	8e bb       	out	0x1e, r24	; 30
    3384:	e0 9a       	sbi	0x1c, 0	; 28
    3386:	99 27       	eor	r25, r25
    3388:	8d b3       	in	r24, 0x1d	; 29
    338a:	08 95       	ret

0000338c <__divmodsi4>:
    338c:	05 2e       	mov	r0, r21
    338e:	97 fb       	bst	r25, 7
    3390:	1e f4       	brtc	.+6      	; 0x3398 <__divmodsi4+0xc>
    3392:	00 94       	com	r0
    3394:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__negsi2>
    3398:	57 fd       	sbrc	r21, 7
    339a:	07 d0       	rcall	.+14     	; 0x33aa <__divmodsi4_neg2>
    339c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <__udivmodsi4>
    33a0:	07 fc       	sbrc	r0, 7
    33a2:	03 d0       	rcall	.+6      	; 0x33aa <__divmodsi4_neg2>
    33a4:	4e f4       	brtc	.+18     	; 0x33b8 <__divmodsi4_exit>
    33a6:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__negsi2>

000033aa <__divmodsi4_neg2>:
    33aa:	50 95       	com	r21
    33ac:	40 95       	com	r20
    33ae:	30 95       	com	r19
    33b0:	21 95       	neg	r18
    33b2:	3f 4f       	sbci	r19, 0xFF	; 255
    33b4:	4f 4f       	sbci	r20, 0xFF	; 255
    33b6:	5f 4f       	sbci	r21, 0xFF	; 255

000033b8 <__divmodsi4_exit>:
    33b8:	08 95       	ret

000033ba <__negsi2>:
    33ba:	90 95       	com	r25
    33bc:	80 95       	com	r24
    33be:	70 95       	com	r23
    33c0:	61 95       	neg	r22
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	8f 4f       	sbci	r24, 0xFF	; 255
    33c6:	9f 4f       	sbci	r25, 0xFF	; 255
    33c8:	08 95       	ret

000033ca <__muluhisi3>:
    33ca:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__umulhisi3>
    33ce:	a5 9f       	mul	r26, r21
    33d0:	90 0d       	add	r25, r0
    33d2:	b4 9f       	mul	r27, r20
    33d4:	90 0d       	add	r25, r0
    33d6:	a4 9f       	mul	r26, r20
    33d8:	80 0d       	add	r24, r0
    33da:	91 1d       	adc	r25, r1
    33dc:	11 24       	eor	r1, r1
    33de:	08 95       	ret

000033e0 <__mulshisi3>:
    33e0:	b7 ff       	sbrs	r27, 7
    33e2:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__muluhisi3>

000033e6 <__mulohisi3>:
    33e6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__muluhisi3>
    33ea:	82 1b       	sub	r24, r18
    33ec:	93 0b       	sbc	r25, r19
    33ee:	08 95       	ret

000033f0 <__udivmodsi4>:
    33f0:	a1 e2       	ldi	r26, 0x21	; 33
    33f2:	1a 2e       	mov	r1, r26
    33f4:	aa 1b       	sub	r26, r26
    33f6:	bb 1b       	sub	r27, r27
    33f8:	fd 01       	movw	r30, r26
    33fa:	0d c0       	rjmp	.+26     	; 0x3416 <__udivmodsi4_ep>

000033fc <__udivmodsi4_loop>:
    33fc:	aa 1f       	adc	r26, r26
    33fe:	bb 1f       	adc	r27, r27
    3400:	ee 1f       	adc	r30, r30
    3402:	ff 1f       	adc	r31, r31
    3404:	a2 17       	cp	r26, r18
    3406:	b3 07       	cpc	r27, r19
    3408:	e4 07       	cpc	r30, r20
    340a:	f5 07       	cpc	r31, r21
    340c:	20 f0       	brcs	.+8      	; 0x3416 <__udivmodsi4_ep>
    340e:	a2 1b       	sub	r26, r18
    3410:	b3 0b       	sbc	r27, r19
    3412:	e4 0b       	sbc	r30, r20
    3414:	f5 0b       	sbc	r31, r21

00003416 <__udivmodsi4_ep>:
    3416:	66 1f       	adc	r22, r22
    3418:	77 1f       	adc	r23, r23
    341a:	88 1f       	adc	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	1a 94       	dec	r1
    3420:	69 f7       	brne	.-38     	; 0x33fc <__udivmodsi4_loop>
    3422:	60 95       	com	r22
    3424:	70 95       	com	r23
    3426:	80 95       	com	r24
    3428:	90 95       	com	r25
    342a:	9b 01       	movw	r18, r22
    342c:	ac 01       	movw	r20, r24
    342e:	bd 01       	movw	r22, r26
    3430:	cf 01       	movw	r24, r30
    3432:	08 95       	ret

00003434 <__umulhisi3>:
    3434:	a2 9f       	mul	r26, r18
    3436:	b0 01       	movw	r22, r0
    3438:	b3 9f       	mul	r27, r19
    343a:	c0 01       	movw	r24, r0
    343c:	a3 9f       	mul	r26, r19
    343e:	70 0d       	add	r23, r0
    3440:	81 1d       	adc	r24, r1
    3442:	11 24       	eor	r1, r1
    3444:	91 1d       	adc	r25, r1
    3446:	b2 9f       	mul	r27, r18
    3448:	70 0d       	add	r23, r0
    344a:	81 1d       	adc	r24, r1
    344c:	11 24       	eor	r1, r1
    344e:	91 1d       	adc	r25, r1
    3450:	08 95       	ret

00003452 <_exit>:
    3452:	f8 94       	cli

00003454 <__stop_program>:
    3454:	ff cf       	rjmp	.-2      	; 0x3454 <__stop_program>
